-----------------------------------------------------
-- Export file for user OPS$YUFU_CHINA_PS_RUN_BAK      --
-- Created by Administrator on 2018/12/12, 9:45:31 --
-----------------------------------------------------

spool OPS$YUFU_CHINA_PS_RUN_BAK-±í½á¹¹.log

prompt
prompt Creating table ACCBALSLOG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCBALSLOG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  ACCDET_ID   NUMBER(10) not null,
  ACCITEMS_ID NUMBER(10) not null,
  CTXDATE     DATE not null,
  CURRCODE    CHAR(3) not null,
  AVLBAL      FLOAT not null,
  BLKAMT      FLOAT not null,
  LOGTYPE     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCBALSLOG on OPS$YUFU_CHINA_PS_RUN_BAK.ACCBALSLOG (ACCDET_ID, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCCONTRA
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCCONTRA
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  ACCNO     VARCHAR2(28) not null,
  CURRCODE  CHAR(3) not null,
  BLKAMT    FLOAT not null,
  AVLBAL    FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCDCSEQ
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDCSEQ
(
  VERNO_CTX   NUMBER(10) default 0 not null,
  ID          NUMBER(10) default 0 not null,
  TXNCODE     NUMBER(5) default 0 not null,
  SUB_TXNCODE CHAR(2) default '' not null,
  IID         VARCHAR2(11) default '' not null,
  TXNSRC      CHAR(1) not null,
  ACCDCSEQ    VARCHAR2(255) default '' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCDCSEQ on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDCSEQ (TXNCODE, SUB_TXNCODE, IID, TXNSRC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCDET
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  INST_ID            NUMBER(10) default 0 not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  BRANCH_ID          NUMBER(10) default 0 not null,
  TYPECODE           CHAR(2) not null,
  CLASSID            NUMBER(5) not null,
  STATCODE           CHAR(2) not null,
  VIPFLAG            CHAR(1) not null,
  BLKAMT             FLOAT not null,
  AVLBAL             FLOAT not null,
  CLRBAL             FLOAT not null,
  UNCLRBAL           FLOAT not null,
  CREDIT_LIMIT       FLOAT not null,
  PREAUTH_BLK        FLOAT default 0.0 not null,
  PREAUTH_UNCLR      FLOAT default 0.0 not null,
  PREAUTH_EXP_BLK    FLOAT default 0.0 not null,
  PREAUTH_EXP_UNCLR  FLOAT default 0.0 not null,
  CAT_PARAMS         VARCHAR2(127) default ' ' not null,
  ID                 NUMBER(10) default 0 not null,
  CUSTDET_ID         NUMBER(10) default 0 not null,
  AVLBAL_UNSENT      FLOAT default 0 not null,
  BLKAMT_UNSENT      FLOAT default 0 not null,
  UNCLRCREDIT        FLOAT default 0 not null,
  UNCLRCREDIT_UNSENT FLOAT default 0 not null,
  SHDWAUTHOV         FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET
  add constraint PK_ACCDET primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET
  add constraint HASH_ACCDET unique (INST_ID, ACCNO, CURRCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_ACCDET_ID_BRANCH on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET (BRANCH_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_ACCDET_ID_CUSTDET on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET (CUSTDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_ACCDET_ID_INST on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET (INST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCDETCON
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDETCON
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  BASEFE     VARCHAR2(8) not null,
  KEYDATA    VARCHAR2(64) not null,
  KEYTYPE    NUMBER(5) not null,
  CURRCODE   CHAR(3) not null,
  ACCNO      VARCHAR2(28) not null,
  BRANCH_ID  NUMBER(10) default 0 not null,
  DESCR      VARCHAR2(32) not null,
  SUBKEYTYPE NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCDETCON on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDETCON (BASEFE, KEYDATA, KEYTYPE, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCDET_STCS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET_STCS
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  INST_ID            NUMBER(10) default 0 not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  BRANCH_ID          NUMBER(10) default 0 not null,
  TYPECODE           CHAR(2) not null,
  CLASSID            NUMBER(5) not null,
  STATCODE           CHAR(2) not null,
  VIPFLAG            CHAR(1) not null,
  BLKAMT             FLOAT not null,
  AVLBAL             FLOAT not null,
  CLRBAL             FLOAT not null,
  UNCLRBAL           FLOAT not null,
  CREDIT_LIMIT       FLOAT not null,
  PREAUTH_BLK        FLOAT default 0.0 not null,
  PREAUTH_UNCLR      FLOAT default 0.0 not null,
  PREAUTH_EXP_BLK    FLOAT default 0.0 not null,
  PREAUTH_EXP_UNCLR  FLOAT default 0.0 not null,
  CAT_PARAMS         VARCHAR2(127) default ' ' not null,
  ID                 NUMBER(10) default 0,
  CUSTDET_ID         NUMBER(10) default 0,
  AVLBAL_UNSENT      FLOAT default 0 not null,
  BLKAMT_UNSENT      FLOAT default 0 not null,
  UNCLRCREDIT        FLOAT default 0,
  UNCLRCREDIT_UNSENT FLOAT default 0,
  SHDWAUTHOV         FLOAT default 0
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCDET_STCS on OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET_STCS (INST_ID, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCDET_X
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET_X
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  ACCDET_ID    NUMBER(10) not null,
  USRDATA1     VARCHAR2(32) not null,
  USRDATA2     VARCHAR2(32) not null,
  USRDATA3     VARCHAR2(32) not null,
  USRDATA4     VARCHAR2(32) not null,
  USRDATA5     VARCHAR2(32) not null,
  USRDATA6     VARCHAR2(32) default ' ' not null,
  DATE_CREATED DATE default to_date('22630831', 'YYYYMMDD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCEVENT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCEVENT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  ACCDET_ID    NUMBER(10) default 0 not null,
  EVENTTYPE    NUMBER(5) not null,
  CTXDATE      DATE not null,
  WHEN_CREATED CHAR(17) default '22630831000000000' not null,
  STATUS       NUMBER(5) not null,
  EV_ID        NUMBER(10) default 0 not null,
  RELATED_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCEVENT on OPS$YUFU_CHINA_PS_RUN_BAK.ACCEVENT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCITEMS
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  MSGID           NUMBER(10) default 0 not null,
  BRANCH_ID       NUMBER(10) default 0 not null,
  ACCSTAT         CHAR(2) not null,
  CONACCNO        VARCHAR2(28) not null,
  DATELOCAL       DATE not null,
  TIMELOCAL       NUMBER(10) not null,
  CTXDATE         DATE not null,
  TXNTYPE         NUMBER(5) not null,
  REV             CHAR(1) not null,
  TXNCODE         NUMBER(5) not null,
  CRDACPTID       VARCHAR2(15) not null,
  AMTBILL         FLOAT not null,
  CURBILL         CHAR(3) not null,
  TLOGID          NUMBER(20) default 0 not null,
  AMTBLK          FLOAT not null,
  AMTAVL          FLOAT not null,
  BLKAMT          FLOAT not null,
  AVLBAL          FLOAT not null,
  DESCRIPTION     VARCHAR2(128) not null,
  LOADTYPE        NUMBER(5) default 0 not null,
  LOADSRC         NUMBER(5) default 0 not null,
  CRDDET_ID       NUMBER(10),
  ACCDET_ID       NUMBER(10) default 0 not null,
  ORGID           NUMBER(10) default 0 not null,
  FEEID           NUMBER(10) default 0 not null,
  TXNSTATUS       NUMBER(5) default 0 not null,
  AMTPAD          FLOAT default 0 not null,
  XFERID          NUMBER(10) default 0 not null,
  ITEMSRC         NUMBER(10) default 0 not null,
  EXTCODE         VARCHAR2(16) default ' ' not null,
  TERMPOS_ID      NUMBER(10) default 0 not null,
  EXTREFID        NUMBER(10) default 0 not null,
  PROGRAM_ID      NUMBER(10) default 0 not null,
  CORPCUSTPROG_ID NUMBER(10) default 0 not null,
  AMTTXN          FLOAT default 0 not null,
  CURTXN          CHAR(3) default ' ' not null,
  RATEBILL        FLOAT default 1 not null,
  REASONCODE      NUMBER(10) default 0 not null,
  PART_PAN        VARCHAR2(4) default ' ' not null,
  AMTBILLCOM      FLOAT default 0 not null,
  TXNSUBTYPE      NUMBER(5) default 0 not null,
  PREAUTH_BLK     FLOAT default 0 not null,
  PREAUTH_UNCLR   FLOAT default 0 not null,
  UNCLRCREDIT     FLOAT default 0 not null,
  UNCLRCREDITDIFF FLOAT default 0 not null,
  WHEN_CREATED    VARCHAR2(17) default '22630831000000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 320K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCITEMS on OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACCITEMS_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACCITEMS_DATELOCAL on OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS (DATELOCAL, TXNTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACCITEMS_MSGID on OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS (MSGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACCITEMS_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCITEMS_CHRGLNK
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS_CHRGLNK
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  CHARGELOG_RECID NUMBER(10) not null,
  ACCITEMS_ID     NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCLIMIT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCLIMIT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  CYCLE_LEN    NUMBER(5) not null,
  CYCLE_BEGIN  DATE not null,
  CASHLIM_AMT  FLOAT not null,
  CASHLIM_NUM  NUMBER(5) not null,
  PURCHLIM_AMT FLOAT not null,
  PURCHLIM_NUM NUMBER(5) not null,
  TOTLIM_AMT   FLOAT not null,
  TOTLIM_NUM   NUMBER(5) not null,
  CASH_AMT_TD  FLOAT,
  CASH_NUM_TD  NUMBER(5),
  PURCH_AMT_TD FLOAT,
  PURCH_NUM_TD NUMBER(5),
  ACCDET_ID    NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCLIMIT on OPS$YUFU_CHINA_PS_RUN_BAK.ACCLIMIT (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCLOG
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCLOG
(
  VERNO_CTX             NUMBER(10) default 1 not null,
  ID                    NUMBER(10) default 0 not null,
  ACCDET_ID             NUMBER(10) default 0 not null,
  TABLE_CODE            CHAR(1) default ' ' not null,
  EXT_LOG_ID            INTEGER default 0 not null,
  USR_ID                NUMBER(10) default 0 not null,
  WHEN_CREATED          CHAR(17) default '22630831000000000' not null,
  UPDATED_BY            VARCHAR2(16) default ' ' not null,
  OP_CODE               NUMBER(5) default 0 not null,
  HOSTNAME              VARCHAR2(4) default ' ' not null,
  SRC_CODE              VARCHAR2(11) default ' ' not null,
  DATEREC               DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  CTXSYSDATE            DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  TRN                   VARCHAR2(64) default ' ' not null,
  HAS_COMPONENTS        NUMBER(5) default 0 not null,
  OLD_ACCSTAT           CHAR(2) default ' ' not null,
  OLD_BLKAMT            FLOAT default 0.0 not null,
  OLD_AVLAMT            FLOAT default 0.0 not null,
  OLD_CLRBAL            FLOAT default 0.0 not null,
  OLD_UNCLRBAL          FLOAT default 0.0 not null,
  OLD_CREDIT_LIMIT      FLOAT default 0.0 not null,
  OLD_BLKAMT_UNSENT     FLOAT default 0.0 not null,
  OLD_AVLAMT_UNSENT     FLOAT default 0.0 not null,
  OLD_PREAUTH_BLK       FLOAT default 0.0 not null,
  OLD_PREAUTH_UNCLR     FLOAT default 0.0 not null,
  OLD_PREAUTH_EXP_BLK   FLOAT default 0.0 not null,
  OLD_PREAUTH_EXP_UNCLR FLOAT default 0.0 not null,
  NEW_ACCSTAT           CHAR(2) default ' ' not null,
  NEW_BLKAMT            FLOAT default 0.0 not null,
  NEW_AVLAMT            FLOAT default 0.0 not null,
  NEW_CLRBAL            FLOAT default 0.0 not null,
  NEW_UNCLRBAL          FLOAT default 0.0 not null,
  NEW_CREDIT_LIMIT      FLOAT default 0.0 not null,
  NEW_BLKAMT_UNSENT     FLOAT default 0.0 not null,
  NEW_AVLAMT_UNSENT     FLOAT default 0.0 not null,
  NEW_PREAUTH_BLK       FLOAT default 0.0 not null,
  NEW_PREAUTH_UNCLR     FLOAT default 0.0 not null,
  NEW_PREAUTH_EXP_BLK   FLOAT default 0.0 not null,
  NEW_PREAUTH_EXP_UNCLR FLOAT default 0.0 not null,
  DESCR                 VARCHAR2(128) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCLOG on OPS$YUFU_CHINA_PS_RUN_BAK.ACCLOG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACCLOG_INSTCODE on OPS$YUFU_CHINA_PS_RUN_BAK.ACCLOG (ACCDET_ID, WHEN_CREATED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCSTATUS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCSTATUS
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  STATCODE     CHAR(2) not null,
  DESCR        VARCHAR2(20) not null,
  SYSDEF       CHAR(1) not null,
  PRIORITY     NUMBER(5) not null,
  ACTIONCODE   CHAR(1) not null,
  RSPCODE      CHAR(2) not null,
  CRDSTATUS    CHAR(2) not null,
  GEN_STMT     CHAR(1) default '0' not null,
  CHG_INTEREST CHAR(1) default '0' not null,
  SUSPEND      CHAR(1) default '0' not null,
  REPORT       CHAR(1) default '0' not null,
  COLLECTION   CHAR(1) default '0' not null,
  DENYSVC      VARCHAR2(64) default ' ' not null,
  CANCELED     CHAR(1) default '0' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.ACCSTATUS (STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCSTATUSD
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCSTATUSD
(
  STATCODE     CHAR(2),
  VERNO_CTX    NUMBER(10) default 1 not null,
  LOCALEDEF_ID NUMBER(10),
  DESCR        VARCHAR2(128),
  SHORT_DESCR  VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACCTYPE
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCTYPE
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  INST_ID           NUMBER(10) default 0 not null,
  TYPECODE          CHAR(2) not null,
  CLASSID           NUMBER(5) not null,
  ISOCODE           NUMBER(5) not null,
  CURRCODE          CHAR(3) not null,
  CURRCODE2         CHAR(3) not null,
  SRVID             NUMBER(5) not null,
  FMTID             NUMBER(5) not null,
  DESCR             VARCHAR2(20) not null,
  BANKACCCODE       VARCHAR2(120),
  NOW               NUMBER(5) not null,
  ACCLEN            NUMBER(5) not null,
  ALLOWSVC          VARCHAR2(192) not null,
  CAT_PARAMS        VARCHAR2(127) default ' ' not null,
  BRKTYPE           NUMBER(5) default 0 not null,
  BRKOFFSET         NUMBER(10) default 10 not null,
  CAT_ACCTMRKUP_ID  NUMBER(10) default 0 not null,
  ACCLOGGING        NUMBER(10) default 1 not null,
  MAXOVRRDAMT       NUMBER(16,4) default -1 not null,
  MAXOVRRDCRLMPRCNT FLOAT default -1 not null,
  CAT_ACCTRISK_ID   NUMBER(10) default 1 not null,
  GENACCNUM         NUMBER(5) default 1 not null,
  ACCTYPESEQ        NUMBER(10) default 1 not null,
  ACCNUMFRMT        VARCHAR2(48) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.ACCTYPE (INST_ID, TYPECODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACCTYPELIM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACCTYPELIM
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  INST_ID      NUMBER(10) default 0 not null,
  TYPECODE     CHAR(2) not null,
  CURRCODE     CHAR(3) not null,
  LIMIT_TXNS   VARCHAR2(192) not null,
  CYCLE_LEN    NUMBER(5) not null,
  CASHLIM_AMT  FLOAT not null,
  CASHLIM_NUM  NUMBER(5) not null,
  PURCHLIM_AMT FLOAT not null,
  PURCHLIM_NUM NUMBER(5) not null,
  TOTLIM_AMT   FLOAT not null,
  TOTLIM_NUM   NUMBER(5) not null,
  VIP_MUL      FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACCTYPELIM on OPS$YUFU_CHINA_PS_RUN_BAK.ACCTYPELIM (INST_ID, TYPECODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACSITEM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACSITEM
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACSITEM   VARCHAR2(15) not null,
  ACSTYPE   VARCHAR2(4) not null,
  SHORTNAME VARCHAR2(4) not null,
  COMMAND   VARCHAR2(126) not null,
  HELPFORM  VARCHAR2(20) not null,
  DESCRTAG  INTEGER not null,
  ID        NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACSITEM on OPS$YUFU_CHINA_PS_RUN_BAK.ACSITEM (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACSLOG
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACSLOG
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  ACSDATE    DATE not null,
  ACSTIME    NUMBER(10) not null,
  ACSUSR     VARCHAR2(15) not null,
  DESCR      VARCHAR2(255) not null,
  INSTCODE   CHAR(4) default ' ' not null,
  IP_ADDRESS VARCHAR2(15) default ' ' not null,
  HOST       VARCHAR2(30) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_ACSLOG_DTM_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ACSLOG (ACSDATE, ACSTIME, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 7M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_ACSLOG_USR_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ACSLOG (ACSUSR, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 12M
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACTIVITY
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACTIVITY
(
  VERNO_CTX        NUMBER(10) default 0 not null,
  ID               NUMBER(10) not null,
  USER_NAME        VARCHAR2(16) not null,
  ACTIVITYDATETIME TIMESTAMP(6) not null,
  ACTIVITY_CODE    VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ACTLIM
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACTLIM
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CRDFORMAT_ID  NUMBER(10) default 0 not null,
  CURRCODE      CHAR(3) not null,
  NUM_PURCH_DAY NUMBER(5) not null,
  VAL_PURCH_DAY FLOAT not null,
  NUM_CASH_DAY  NUMBER(5) not null,
  VAL_CASH_DAY  FLOAT not null,
  NUM_PURCH_ACC NUMBER(5) not null,
  VAL_PURCH_ACC FLOAT not null,
  NUM_CASH_ACC  NUMBER(5) not null,
  VAL_CASH_ACC  FLOAT not null,
  VIP_MUL       FLOAT not null,
  FRQ_PURACT    CHAR(1) not null,
  FRQ_PURRSP    VARCHAR2(2) not null,
  FRQ_CASHACT   CHAR(1) not null,
  FRQ_CASHRSP   VARCHAR2(2) not null,
  LIM_ACT       CHAR(1) not null,
  LIM_RSP       VARCHAR2(2) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ACTLIM on OPS$YUFU_CHINA_PS_RUN_BAK.ACTLIM (CRDFORMAT_ID, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACT_LOG
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACT_LOG
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  CTXDATE       DATE not null,
  ACTIVITYSTART TIMESTAMP(3) not null,
  ACTIVITYEND   TIMESTAMP(3) default to_timestamp('2263/08/31 00:00:00','YYYY/MM/DD HH24:MI:SS') not null,
  ACTTYPE       NUMBER(5) not null,
  STATUS        NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACT_LOG_DATE_TYPE_STAT on OPS$YUFU_CHINA_PS_RUN_BAK.ACT_LOG (CTXDATE, ACTTYPE, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ACT_PROC
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ACT_PROC
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CTXDATE   DATE not null,
  CMDLINE   VARCHAR2(255) not null,
  CMD       VARCHAR2(32) not null,
  PROCTYPE  NUMBER(5) not null,
  FILENAME  VARCHAR2(255) default '' not null,
  STATUS    NUMBER(5) not null,
  USR       VARCHAR2(15) default '' not null,
  SUMMARY   VARCHAR2(255) default '' not null,
  LOG_ID    NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACT_PROC_CMD_DATE on OPS$YUFU_CHINA_PS_RUN_BAK.ACT_PROC (CMD, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ACT_PROC_DATE_TYPE_STAT on OPS$YUFU_CHINA_PS_RUN_BAK.ACT_PROC (CTXDATE, PROCTYPE, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ADDITIONALS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ADDITIONALS
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ADDITIONALNO  NUMBER(5) not null,
  CRDDET_ID     NUMBER(10) default 0 not null,
  ADD_CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ADDITIONALS on OPS$YUFU_CHINA_PS_RUN_BAK.ADDITIONALS (ADD_CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ADDROVER
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ADDROVER
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  INDATE      DATE not null,
  PURGEDATE   DATE not null,
  ADDRL       VARCHAR2(35) not null,
  ADDRL2      VARCHAR2(35) not null,
  ADDRL3      VARCHAR2(35) not null,
  CITY        VARCHAR2(40) not null,
  TEL         VARCHAR2(20) not null,
  POSTCODE    VARCHAR2(10) not null,
  CUSTDET_ID  NUMBER(10) default 0 not null,
  COUNTRYCODE CHAR(3) default ' ' not null,
  COUNTY      VARCHAR2(20) default ' ' not null,
  FIRSTNAME   VARCHAR2(20) default ' ' not null,
  LASTNAME    VARCHAR2(20) default ' ' not null,
  TITLE       VARCHAR2(20) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ADDROVER on OPS$YUFU_CHINA_PS_RUN_BAK.ADDROVER (CUSTDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ADVICES
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ADVICES
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TLOGID    NUMBER(20) not null,
  STATUS    NUMBER(5) not null,
  CTXDATE   DATE not null,
  IFE       VARCHAR2(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ADVICES on OPS$YUFU_CHINA_PS_RUN_BAK.ADVICES (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ADVICES_CTXDATE_STAT on OPS$YUFU_CHINA_PS_RUN_BAK.ADVICES (CTXDATE, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ADVICES_IFE on OPS$YUFU_CHINA_PS_RUN_BAK.ADVICES (IFE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ADVICES_STATUS on OPS$YUFU_CHINA_PS_RUN_BAK.ADVICES (STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AGGR_AGG
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_AGG
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  AGGR_DEF_ID   NUMBER(10) not null,
  SCOPEKEY      VARCHAR2(60) not null,
  CURRCODE      CHAR(3) not null,
  AGG_COUNT     NUMBER(10) not null,
  AGG_VALUE     FLOAT not null,
  AGG_DAYS      NUMBER(10) not null,
  EXPDATE_EPOCH NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AGGR_AGG on OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_AGG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AGGR_AGG_SCOPEKEY on OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_AGG (SCOPEKEY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AGGR_DEF
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_DEF
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  CYCLEDET_ID  NUMBER(10) not null,
  SCOPEDET_ID  NUMBER(10) not null,
  UPD_STRATEGY NUMBER(5) not null,
  AMT_IND      NUMBER(5) not null,
  AMT_ADJ_IND  NUMBER(5) not null,
  DATE_IND     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AGGR_DEF on OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_DEF (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ALLOWCHECK
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCHECK
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SID       NUMBER(5) not null,
  PRIORITY  NUMBER(5) not null,
  CONDLIST  VARCHAR2(64) not null,
  DESCR     VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALLOWCHECK on OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCHECK (SID, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ALLOWCOND
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCOND
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(5) not null,
  LOGIC     VARCHAR2(255) not null,
  DESCR     VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALLOWCOND on OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCOND (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ALLOWCRDPROD
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCRDPROD
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  SID           NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALLOWCRDPROD on OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWCRDPROD (CRDPRODUCT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ALLOWSET
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWSET
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SID       NUMBER(5) not null,
  DESCR     VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALLOWSET on OPS$YUFU_CHINA_PS_RUN_BAK.ALLOWSET (SID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ALOG
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALOG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TLOGID    NUMBER(20) not null,
  RECSEQ    NUMBER(5) not null,
  RECTYPE   VARCHAR2(6) not null,
  RECVER    NUMBER(5) not null,
  RECDATA   CLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALOG on OPS$YUFU_CHINA_PS_RUN_BAK.ALOG (TLOGID, RECSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ALTROUTE
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ALTROUTE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  IID       VARCHAR2(11) not null,
  ALTIID    VARCHAR2(11) not null,
  DESCR     VARCHAR2(25) not null,
  FMLCOND   CLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ALTROUTE on OPS$YUFU_CHINA_PS_RUN_BAK.ALTROUTE (IID, ALTIID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AMXATMREC
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AMXATMREC
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  STAN         NUMBER(10) not null,
  DATELOCAL    DATE not null,
  TIMELOCAL    NUMBER(10) not null,
  RECSTATUS    NUMBER(5) default 0 not null,
  AIID         VARCHAR2(11) not null,
  FNCODE       NUMBER(5) not null,
  TLOGID       NUMBER(10) not null,
  RRN          VARCHAR2(12) not null,
  CTXDATE      DATE not null,
  PAN          VARCHAR2(19) not null,
  TERMCODE     VARCHAR2(16) not null,
  AMTTXN       FLOAT not null,
  CURTXN       CHAR(3) not null,
  AMTSET       FLOAT default 0.0 not null,
  CURSET       CHAR(3) default ' ' not null,
  APRVLCODE    VARCHAR2(9) default ' ' not null,
  ACTIONCODE   CHAR(1) default '0' not null,
  RSPCODE      CHAR(2) default '00' not null,
  TXNSTATUS    NUMBER(5) default 0 not null,
  REVTLOGID    NUMBER(10) default 0 not null,
  AMTDSP       FLOAT default 0.0 not null,
  AMTSETDSP    FLOAT default 0.0 not null,
  AMXRPTBTCH   CHAR(6) default ' ' not null,
  AMXRUNDATE   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  AMXRUNTIME   NUMBER(10) default 0 not null,
  AMXPAN       VARCHAR2(19) default ' ' not null,
  AMXSYSDATE   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  AMXSYSTIME   NUMBER(10) default 0 not null,
  AMXDATESET   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  AMXTERMID    VARCHAR2(8) default ' ' not null,
  AMXCURDSP    CHAR(3) default ' ' not null,
  AMXAMTREQ    FLOAT default 0.0 not null,
  AMXAMTDSP    FLOAT default 0.0 not null,
  AMXRATESET   FLOAT default 1.0 not null,
  AMXCURSET    CHAR(3) default ' ' not null,
  AMXAMTSETREQ FLOAT default 0.0 not null,
  AMXAMTSETAPP FLOAT default 0.0 not null,
  AMXAMTSETDSP FLOAT default 0.0 not null,
  AMXFEENET    FLOAT default 0.0 not null,
  AMXFEEOTHER  FLOAT default 0.0 not null,
  AMXCURBILL   CHAR(3) default ' ' not null,
  AMXAMTTXN    FLOAT default 0.0 not null,
  AMXCTRYTERM  CHAR(2) default ' ' not null,
  AMXCTRYCACP  CHAR(2) default ' ' not null,
  AMXCTRYBILL  CHAR(2) default ' ' not null,
  AMXTERMLOC   VARCHAR2(40) default ' ' not null,
  AMXAUTHSTAT  NUMBER(5) default 0 not null,
  AMXTXNIND    CHAR(1) default 'H' not null,
  AMXACTORG    CHAR(3) default ' ' not null,
  AMXAPRVLCODE VARCHAR2(6) default ' ' not null,
  AMXADDREF    VARCHAR2(8) default ' ' not null,
  AMXTID       VARCHAR2(15) default ' ' not null,
  PAN_DISPLAY  VARCHAR2(19) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AMXATMREC on OPS$YUFU_CHINA_PS_RUN_BAK.AMXATMREC (AIID, DATELOCAL, TIMELOCAL, STAN, FNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_AMXATMREC_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.AMXATMREC (AIID, RRN, FNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AMXBTCHEXC
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AMXBTCHEXC
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  INST_ID    NUMBER(10) default 0 not null,
  CTXDATE    DATE not null,
  FILESEQ    NUMBER(10) not null,
  MSGNO      NUMBER(10) not null,
  FNCODE     NUMBER(5) not null,
  PAN        VARCHAR2(19) not null,
  EXPDATE    DATE not null,
  REASONCODE NUMBER(5) not null,
  STATUS     NUMBER(5) not null,
  REJCODES   VARCHAR2(40) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AMXBTCHEXC on OPS$YUFU_CHINA_PS_RUN_BAK.AMXBTCHEXC (INST_ID, FILESEQ, MSGNO, PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AMXBTCHEXC_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.AMXBTCHEXC (CTXDATE, FILESEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AMXFRDREP
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AMXFRDREP
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  INST_ID    NUMBER(10) default 0 not null,
  CTXDATE    DATE not null,
  FILESEQ    NUMBER(10) not null,
  MSGNO      NUMBER(10) not null,
  ARN        VARCHAR2(23) not null,
  FNCODE     NUMBER(5) not null,
  PAN        VARCHAR2(19) not null,
  TID        VARCHAR2(15) not null,
  DATETXN    DATE not null,
  TIMETXN    NUMBER(10) not null,
  FRDTYPE    NUMBER(5) not null,
  AMTSET     FLOAT not null,
  CURSET     CHAR(3) not null,
  CBSTAT     NUMBER(5) not null,
  CBREASON   NUMBER(5) not null,
  DATEDISP   DATE not null,
  TIMEDISP   NUMBER(10) not null,
  DATEREV    DATE not null,
  TIMEREV    NUMBER(10) not null,
  CRDACPTBUS NUMBER(5) not null,
  APRVLCODE  VARCHAR2(6) not null,
  CRDACPTID  VARCHAR2(15) not null,
  TERMCODE   VARCHAR2(8) not null,
  CRDACPTLOC VARCHAR2(64) not null,
  AMTTXN     FLOAT not null,
  CURTXN     CHAR(3) not null,
  AMTPRES    FLOAT not null,
  CURPRES    CHAR(3) not null,
  DATEPRC    DATE not null,
  EXPDATE    DATE not null,
  POSTCODE   VARCHAR2(15) not null,
  AMTBILL    FLOAT not null,
  CURBILL    CHAR(3) not null,
  AIID       VARCHAR2(11) not null,
  ACQPRCID   VARCHAR2(11) not null,
  TRANDATA   VARCHAR2(25) not null,
  TXNTXT     VARCHAR2(255) not null,
  TLOGID     NUMBER(10) not null,
  ACTIONCODE CHAR(1) not null,
  RSPCODE    CHAR(2) not null,
  REJCODES   VARCHAR2(40) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AMXFRDREP on OPS$YUFU_CHINA_PS_RUN_BAK.AMXFRDREP (INST_ID, FILESEQ, MSGNO, ARN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AMXFRDREP_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.AMXFRDREP (CTXDATE, FILESEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_AMXFRDREP_TID on OPS$YUFU_CHINA_PS_RUN_BAK.AMXFRDREP (TID, CBSTAT, FNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AMXSEDEMO
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AMXSEDEMO
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  INST_ID         NUMBER(10) default 0 not null,
  MRCHNO          VARCHAR2(15) not null,
  LOAD_DATE       DATE not null,
  EXPORT_DATE     DATE not null,
  EXPORT_REAS     CHAR(1) not null,
  NAME            VARCHAR2(25) not null,
  PHY_ADDRESS1    VARCHAR2(25) not null,
  PHY_ADDRESS2    VARCHAR2(25) not null,
  PHY_CITY        VARCHAR2(20) not null,
  PHY_STATE       VARCHAR2(3) not null,
  PHY_POSTCODE    VARCHAR2(15) not null,
  PHY_COUNTRYCODE CHAR(3) not null,
  EFF_DATE        DATE not null,
  CANC_DATE       DATE not null,
  CRDACPTBUS      NUMBER(5) not null,
  CURRCODE        CHAR(3) not null,
  TELNO           VARCHAR2(20) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AMXSEDEMO_EXPORT on OPS$YUFU_CHINA_PS_RUN_BAK.AMXSEDEMO (INST_ID, LOAD_DATE, EXPORT_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table APRVLCODE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  PAN         VARCHAR2(19) not null,
  SEQNO       NUMBER(5) not null,
  INST_ID     NUMBER(10) default 0 not null,
  ACCNO       VARCHAR2(28) not null,
  CODE        VARCHAR2(9) not null,
  ALLOCDATE   DATE not null,
  ALLOCTIME   NUMBER(10) not null,
  EXPDATE     DATE not null,
  AMTBILL     FLOAT not null,
  CURBILL     CHAR(3) not null,
  ACTIONCODE  CHAR(1) not null,
  RSPCODE     CHAR(2) not null,
  USR         VARCHAR2(15) not null,
  AIID        VARCHAR2(11) not null,
  MRCHCODE    VARCHAR2(15) not null,
  RRN         VARCHAR2(12) not null,
  AMTTXN      FLOAT not null,
  CURTXN      CHAR(3) not null,
  TXNCODE     NUMBER(5) not null,
  CRDACPTBUS  NUMBER(5) not null,
  POSCP       CHAR(1) not null,
  POSCHP      CHAR(1) not null,
  POSCDIM     CHAR(1) not null,
  POSCC89     NUMBER(5) not null,
  SOURCE      VARCHAR2(2) not null,
  CTXDISPOSE  CHAR(1) not null,
  DISPDATE    DATE not null,
  MSGCLS      CHAR(1) not null,
  TLOGID      NUMBER(20) not null,
  AMTBLK      FLOAT default 0.0 not null,
  CRDDET_ID   NUMBER(10) default 0 not null,
  ACCDET_ID   NUMBER(10) default 0 not null,
  CAT_PARAMS  VARCHAR2(127) default ' ' not null,
  SUB_TXNCODE CHAR(2) default '00' not null,
  TRN         VARCHAR2(25) default '0' not null,
  ORIGAMTBLK  FLOAT default 0.0 not null,
  MCSEQCNT    NUMBER(5) not null,
  MCSEQTOT    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_APRVLCODE on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLCODE_ACCDETID on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLCODE_ALLOCDATE on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (ALLOCDATE, ALLOCTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLCODE_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (PAN, SEQNO, ALLOCDATE DESC, ALLOCTIME DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLCODE_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLCODE_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table APRVLHIST
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  ACCNO       VARCHAR2(28) not null,
  PAN         VARCHAR2(19) not null,
  SEQNO       NUMBER(5) not null,
  CODE        VARCHAR2(9) not null,
  ALLOCDATE   DATE not null,
  ALLOCTIME   NUMBER(10) not null,
  EXPDATE     DATE not null,
  AMTBILL     FLOAT not null,
  CURBILL     CHAR(3) not null,
  ACTIONCODE  CHAR(1) not null,
  RSPCODE     CHAR(2) not null,
  USR         VARCHAR2(15) not null,
  AIID        VARCHAR2(11) not null,
  MRCHCODE    VARCHAR2(15) not null,
  RRN         VARCHAR2(12) not null,
  AMTTXN      FLOAT not null,
  CURTXN      CHAR(3) not null,
  TXNCODE     NUMBER(5) not null,
  CRDACPTBUS  NUMBER(5) not null,
  POSCP       CHAR(1) not null,
  POSCHP      CHAR(1) not null,
  POSCDIM     CHAR(1) not null,
  POSCC89     NUMBER(5) not null,
  SOURCE      VARCHAR2(2) not null,
  CTXDISPOSE  CHAR(1) not null,
  DISPDATE    DATE not null,
  MSGCLS      CHAR(1) not null,
  FINTLOGID   NUMBER(20) not null,
  PROCESSED   NUMBER(5) not null,
  TLOGID      NUMBER(20) not null,
  AMTBLK      FLOAT default 0.0 not null,
  CRDDET_ID   NUMBER(10) default 0 not null,
  ACCDET_ID   NUMBER(10) default 0 not null,
  CAT_PARAMS  VARCHAR2(127) default ' ' not null,
  SUB_TXNCODE CHAR(2) default '00' not null,
  TRN         VARCHAR2(25) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_APRVLHIST on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_ACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (INST_ID, ACCNO, ALLOCDATE DESC, ALLOCTIME DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_EXPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (EXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_FINTLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (FINTLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (PAN, SEQNO, ALLOCDATE DESC, ALLOCTIME DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_PROCACTDISP on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (PROCESSED, ACTIONCODE, CTXDISPOSE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_PROCESSED on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (PROCESSED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_APRVLHIST_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ARDEF
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ARDEF
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  BINHIGH           VARCHAR2(9) not null,
  BINLOW            VARCHAR2(9) not null,
  IID               VARCHAR2(6) not null,
  CHKDIGIT          NUMBER(5) not null,
  PANLEN            NUMBER(5) not null,
  CRDTYPE           CHAR(1) not null,
  CRDUSE            CHAR(1) not null,
  PROCBIN           VARCHAR2(6) not null,
  DOMAIN            CHAR(1) not null,
  REGION            NUMBER(5) not null,
  COUNTRYCODE       CHAR(2) not null,
  LARGETKT          CHAR(1) not null,
  TECHIND           CHAR(1) not null,
  ARDEFREG          NUMBER(5) not null,
  ARDEFCTRY         VARCHAR2(2) not null,
  CCL2DI            CHAR(1) not null,
  CCPPI             CHAR(1) not null,
  CCL3EDI           CHAR(1) not null,
  CCEVEI            CHAR(1) not null,
  TESTIND           CHAR(1) not null,
  PRODID            CHAR(2) not null,
  ORGCREDIT         CHAR(1) not null,
  ALPI              CHAR(1) not null,
  ORGCREDIT_XFR     CHAR(1) not null,
  ORGCREDIT_ONLGAM  CHAR(1) not null,
  COMBO             CHAR(1) not null,
  FASTFUNDS         CHAR(1) not null,
  TRAVEL            CHAR(1) not null,
  NNSSID            CHAR(1) default ' ' not null,
  PRODSUBT          CHAR(2) default '  ' not null,
  ACCFUNDSRC        CHAR(1) default ' ' not null,
  STLMTMATCH        CHAR(1) default ' ' not null,
  TRAVELACC_DATA    CHAR(1) default ' ' not null,
  ACCRESTRICTED_USE CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ARDEF on OPS$YUFU_CHINA_PS_RUN_BAK.ARDEF (BINLOW, BINHIGH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ARDEF_IID on OPS$YUFU_CHINA_PS_RUN_BAK.ARDEF (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AREA
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AREA
(
  ID              NUMBER(10) default 0 not null,
  PROVINCE_CITY   VARCHAR2(50) not null,
  ENPROVINCE_CITY VARCHAR2(50) not null,
  FID             NUMBER(10) default 0 not null,
  PARENTPATH      VARCHAR2(50) not null,
  DEPTH           NUMBER(3) default 0 not null,
  ORDERID         NUMBER(10) default 0 not null,
  CHILD           NUMBER(10) default 0 not null,
  ISUSE           CHAR(1) not null,
  ADDDATE         DATE default to_date('2000-07-01','YYYY-MM-DD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ATMADLOG
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMADLOG
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  DATELOCAL  DATE not null,
  TIMELOCAL  NUMBER(10) not null,
  TSEQ       NUMBER(5) not null,
  PAN        VARCHAR2(19) not null,
  SEQNO      NUMBER(5) not null,
  CTXDATE    DATE not null,
  TLOGID     NUMBER(20) not null,
  ACTIONCODE CHAR(1) not null,
  RSPCODE    CHAR(2) not null,
  RSPSRC     CHAR(2) not null,
  STATUS     CHAR(1) not null,
  NOTEID     NUMBER(5) not null,
  ECBLEVEL   NUMBER(5) not null,
  LOAD       NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMADLOG on OPS$YUFU_CHINA_PS_RUN_BAK.ATMADLOG (TERMATM_ID, DATELOCAL, TSEQ, NOTEID, ECBLEVEL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMADLOG_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMADLOG (PAN, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMADRPLN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMADRPLN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  RPLNDATE   DATE not null,
  RPLNTIME   NUMBER(10) not null,
  BINDRUM    CHAR(1) not null,
  ID         NUMBER(5) not null,
  NOTEID     NUMBER(5) not null,
  ECBLEVEL   NUMBER(5) not null,
  CTXDATE    DATE not null,
  TSEQ       NUMBER(5) not null,
  ORIGLOAD   NUMBER(10) not null,
  NEWLOAD    NUMBER(10) not null,
  VALID      NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMADRPLN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMADRPLN (TERMATM_ID, RPLNDATE, RPLNTIME, BINDRUM, ID, NOTEID, ECBLEVEL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMAID
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMAID
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  AIDSET      NUMBER(5) not null,
  AID         VARCHAR2(32) not null,
  FLAGS       VARCHAR2(12) not null,
  DESCR       VARCHAR2(64) not null,
  MINVER      CHAR(4) not null,
  MAXVER      CHAR(4) not null,
  LABEL       VARCHAR2(16) not null,
  APPLTYPE    VARCHAR2(8) not null,
  NXTSTATE    CHAR(3) not null,
  DATAOBJ     VARCHAR2(255) not null,
  SECAIDS     VARCHAR2(255) not null,
  DATAOBJCOMP VARCHAR2(255) not null,
  TAC_DECLINE CHAR(10) not null,
  EXACT       NUMBER(5) default 0 not null,
  TAC_ONLINE  CHAR(10) default 'FFFFFFFFFF' not null,
  TAC_DEFAULT CHAR(10) default 'FFFFFFFFFF' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMAID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMAID (AIDSET, AID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMBIN
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMBIN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  BIN        NUMBER(5) not null,
  DESCR      VARCHAR2(64) not null,
  STATUS     CHAR(1) not null,
  MAXLOAD    NUMBER(10) not null,
  HIGHLOAD   NUMBER(10) not null,
  LOAD       NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMBIN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMBIN (TERMATM_ID, BIN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMBTCH
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMBTCH
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CTXDATE       DATE not null,
  BTCHID        NUMBER(10) not null,
  TERMNO        NUMBER(5) not null,
  TERMATM_ID    NUMBER(10) default 0 not null,
  TERMSTARTTSEQ NUMBER(5) not null,
  TERMENDTSEQ   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMBTCH on OPS$YUFU_CHINA_PS_RUN_BAK.ATMBTCH (CTXDATE, BTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMBTCH_TERM on OPS$YUFU_CHINA_PS_RUN_BAK.ATMBTCH (CTXDATE, TERMATM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMCNF
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMCNF
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  TABLENAME    VARCHAR2(12) not null,
  CONFID       NUMBER(5) not null,
  DESCR        VARCHAR2(20) not null,
  DPOSPRN      CHAR(1) not null,
  CTLPIC       CHAR(1) not null,
  READERRLIM   NUMBER(5) not null,
  WRITEERRLIM  NUMBER(5) not null,
  ENTERDP      CHAR(1) not null,
  DPOSST       CHAR(1) not null,
  DECPLACES    NUMBER(5) not null,
  AMTBUF12     CHAR(1) not null,
  NOFAULTPRN   CHAR(1) not null,
  RETINSVC     CHAR(1) not null,
  SEPREADY     CHAR(1) not null,
  REJREAS      CHAR(1) not null,
  MDSSTAT      CHAR(1) not null,
  MAINTLOG     CHAR(1) not null,
  CNFPICK      CHAR(1) not null,
  EXPHWCNF     CHAR(1) not null,
  TOFSTMPRN    CHAR(1) not null,
  CNFDPOSBLEEP CHAR(1) not null,
  LUNO         NUMBER(5) not null,
  TIMER0       NUMBER(5) not null,
  TIMER1       NUMBER(5) not null,
  TIMER2       NUMBER(5) not null,
  TIMER3       NUMBER(5) not null,
  TIMER4       NUMBER(5) not null,
  TIMER5       NUMBER(5) not null,
  TIMER6       NUMBER(5) not null,
  TIMER7       NUMBER(5) not null,
  TIMER8       NUMBER(5) not null,
  TIMER9       NUMBER(5) not null,
  TIMER10      NUMBER(5) not null,
  TIMER11      NUMBER(5) not null,
  TIMER12      NUMBER(5) not null,
  TIMER13      NUMBER(5) not null,
  TIMER77      NUMBER(5) not null,
  TIMER78      NUMBER(5) not null,
  PROTOCOL     NUMBER(5) default 0 not null,
  FEATURES     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.ATMCNF
  add constraint UNQ_ATMCNF_CONFIG unique (CONFID);
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMCNF on OPS$YUFU_CHINA_PS_RUN_BAK.ATMCNF (TABLENAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_ATMCNF_CONFID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMCNF (CONFID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMDEF
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMDEF
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  TYPEID      NUMBER(5) not null,
  TERMTYPE    CHAR(1) not null,
  VENDOR      VARCHAR2(15) not null,
  MODEL       VARCHAR2(15) not null,
  SOFTWAREVER VARCHAR2(15) not null,
  EMV         CHAR(1) default 'N' not null,
  AIDSET      NUMBER(5) default 0 not null,
  FEATURES    NUMBER(10) default 0 not null,
  FATALDVC    VARCHAR2(64) default ' ' not null,
  RSAHOSTKEY  VARCHAR2(64) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMDEF on OPS$YUFU_CHINA_PS_RUN_BAK.ATMDEF (TYPEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMDEF_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMDEF (TYPEID DESC, VENDOR, MODEL, SOFTWAREVER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMDRUM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMDRUM
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  DRUM       NUMBER(5) not null,
  DESCR      VARCHAR2(64) not null,
  STATUS     CHAR(1) not null,
  MAXLOAD    NUMBER(10) not null,
  HIGHLOAD   NUMBER(10) not null,
  LOAD       NUMBER(10) not null,
  ADDED      NUMBER(10) default 0 not null,
  DISP       NUMBER(10) default 0 not null,
  CASSTYPE   CHAR(1) not null,
  NOTEID     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMDRUM on OPS$YUFU_CHINA_PS_RUN_BAK.ATMDRUM (TERMATM_ID, DRUM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMFIT
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMFIT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TABLENAME  VARCHAR2(12) not null,
  CTXENTRY   NUMBER(5) not null,
  DESCR      VARCHAR2(20) not null,
  STIDX      NUMBER(5) not null,
  IIDMASK    VARCHAR2(10) not null,
  IIDTRK     CHAR(1) not null,
  IIDIDX     CHAR(1) not null,
  IIDDIR     CHAR(1) not null,
  IIDOFF     NUMBER(5) not null,
  LOCPINVER  CHAR(1) not null,
  MAXPINLEN  NUMBER(5) not null,
  PEKEY      VARCHAR2(16) not null,
  PINBLKTYP  CHAR(1) not null,
  PINPAD     NUMBER(5) not null,
  ENCTYP     NUMBER(5) not null,
  LOCPINTYP  CHAR(1) not null,
  PANTRK     CHAR(1) not null,
  PANIDX     CHAR(1) not null,
  PANDIR     CHAR(1) not null,
  PANOFF     NUMBER(5) not null,
  PANLEN     NUMBER(5) not null,
  PINOFFTRK  CHAR(1) not null,
  PINOFFIDX  CHAR(1) not null,
  PINOFFDIR  CHAR(1) not null,
  PINOFFOFF  NUMBER(5) not null,
  PINTRYTRK  CHAR(1) not null,
  PINTRYIDX  CHAR(1) not null,
  PINTRYDIR  CHAR(1) not null,
  PINTRYOFF  NUMBER(5) not null,
  PINTRYISO  CHAR(1) not null,
  PINCHKLEN  NUMBER(5) not null,
  PINALGTRK  CHAR(1) not null,
  PINALGIDX  CHAR(1) not null,
  PINALGDIR  CHAR(1) not null,
  PINALGOFF  NUMBER(5) not null,
  PINALGLEN  NUMBER(5) not null,
  PINALGNO   NUMBER(5) not null,
  PANPAD     NUMBER(5) not null,
  USEPEKEY   CHAR(1) not null,
  DECTAB     VARCHAR2(16) not null,
  ATACODE    CHAR(1) not null,
  ATAFIIDTYP NUMBER(5) not null,
  PLNDX      NUMBER(5) default 0 not null,
  EMV        NUMBER(1) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMFIT on OPS$YUFU_CHINA_PS_RUN_BAK.ATMFIT (TABLENAME, CTXENTRY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMKEY
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMKEY
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TABLENAME  VARCHAR2(12) not null,
  FLAGS      VARCHAR2(12) not null,
  ENTRYTYPE  NUMBER(5) not null,
  CTXENTRY   NUMBER(5) not null,
  KEYEXP     VARCHAR2(8) not null,
  FLDVAL     VARCHAR2(8) not null,
  CTXCOMMENT VARCHAR2(20) not null,
  REFNO      VARCHAR2(32) default '00' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMKEY on OPS$YUFU_CHINA_PS_RUN_BAK.ATMKEY (TABLENAME, ENTRYTYPE, CTXENTRY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMNOTEBIN
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBIN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  BIN        NUMBER(5) not null,
  NOTEID     NUMBER(5) not null,
  ECBLEVEL   NUMBER(5) not null,
  LOAD       NUMBER(10) not null,
  VALID      NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMNOTEBIN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBIN (TERMATM_ID, BIN, NOTEID, ECBLEVEL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMNOTEBINRP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBINRP
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  CTXDATE    DATE not null,
  ADDDATE    DATE not null,
  ADDTIME    NUMBER(10) not null,
  BIN        NUMBER(5) not null,
  NOTEID     NUMBER(5) not null,
  ECBLEVEL   NUMBER(5) not null,
  LOAD       NUMBER(10) not null,
  VALID      NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMNOTEBINRP on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBINRP (TERMATM_ID, BIN, NOTEID, ECBLEVEL, ADDDATE, ADDTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMNOTEBINRP_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBINRP (TERMATM_ID, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMNOTEBINRP_TERMATM_ID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEBINRP (TERMATM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMNOTECFG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTECFG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  NOTECFG   NUMBER(5) not null,
  NOTEID    NUMBER(5) not null,
  ECBLEVEL  NUMBER(5) not null,
  ACTION    CHAR(1) not null,
  PRIORITY  NUMBER(5) not null,
  BIN       NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMNOTECFG on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTECFG (NOTECFG, NOTEID, ECBLEVEL, ACTION, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMNOTEID
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEID
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  INST_ID     NUMBER(10) default 0 not null,
  NOTEID      NUMBER(5) not null,
  CURRCODE    CHAR(3) not null,
  DENOM       NUMBER(10) not null,
  REQSTATE    CHAR(1) not null,
  RELEASE_NUM NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMNOTEID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMNOTEID (INST_ID, NOTEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMRPLN
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  CTXDATE    DATE not null,
  REPLENDATE DATE not null,
  REPLENTIME NUMBER(10) not null,
  REPLENTYPE CHAR(1) not null,
  TSEQ       NUMBER(5) not null,
  CASS1DNOM  NUMBER(10) not null,
  CASS2DNOM  NUMBER(10) not null,
  CASS3DNOM  NUMBER(10) not null,
  CASS4DNOM  NUMBER(10) not null,
  CASS1DISP  NUMBER(5) not null,
  CASS2DISP  NUMBER(5) not null,
  CASS3DISP  NUMBER(5) not null,
  CASS4DISP  NUMBER(5) not null,
  CASS1REM   NUMBER(5) not null,
  CASS2REM   NUMBER(5) not null,
  CASS3REM   NUMBER(5) not null,
  CASS4REM   NUMBER(5) not null,
  CASS1LOAD  NUMBER(5) not null,
  CASS2LOAD  NUMBER(5) not null,
  CASS3LOAD  NUMBER(5) not null,
  CASS4LOAD  NUMBER(5) not null,
  BTCHID     NUMBER(10) not null,
  CASS1DVRT  NUMBER(5) not null,
  CASS2DVRT  NUMBER(5) not null,
  CASS3DVRT  NUMBER(5) not null,
  CASS4DVRT  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMRPLN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLN (TERMATM_ID, REPLENDATE, REPLENTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMRPLN_BTCH on OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLN (CTXDATE, BTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMRPLN_TERMATM_ID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLN (TERMATM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMRPLNCNT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLNCNT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  TERMATM_ID   NUMBER(10) default 0 not null,
  CTXDATE      DATE not null,
  REPLENDATE   DATE not null,
  REPLENTIME   NUMBER(10) not null,
  RECTYPE      CHAR(1) not null,
  CURRCODE     CHAR(3) not null,
  TXNCOUNT     NUMBER(10) not null,
  TOT_DEB_DAY  FLOAT not null,
  TOT_CRED_DAY FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMRPLNCNT on OPS$YUFU_CHINA_PS_RUN_BAK.ATMRPLNCNT (TERMATM_ID, REPLENDATE, REPLENTIME, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMSCREEN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMSCREEN
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TABLENAME VARCHAR2(12) not null,
  FLAGS     VARCHAR2(12) not null,
  LANG      NUMBER(5) not null,
  SCREEN    VARCHAR2(3) not null,
  DESCR     VARCHAR2(20) not null,
  SDATA     CLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMSCREEN on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSCREEN (TABLENAME, FLAGS, LANG, SCREEN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMSCREEN_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSCREEN (TABLENAME, LANG, SCREEN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMSTAFMT
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAFMT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  PROTOCOL  NUMBER(5) not null,
  STYPE     VARCHAR2(3) not null,
  ENTRYNUM  NUMBER(5) not null,
  FIRSTCHAR NUMBER(5) not null,
  FIELDLEN  NUMBER(5) not null,
  DESCRID   NUMBER(10) not null,
  FLDTYPE   NUMBER(5) not null,
  DISPLAY   NUMBER(5) not null,
  DEF_VAL   VARCHAR2(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMSTAFMT on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAFMT (PROTOCOL, STYPE, ENTRYNUM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ATMSTAT
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  TERMSEQ    NUMBER(5) not null,
  DATELOCAL  DATE not null,
  TIMELOCAL  NUMBER(10) not null,
  MSGCLS     CHAR(1) not null,
  DEDUP      CHAR(1) not null,
  SOLICITED  CHAR(1) not null,
  DVCCODE    CHAR(1) not null,
  SEVERITY   CHAR(1) not null,
  STATDATA   VARCHAR2(255) not null,
  LST_TLGID  NUMBER(20) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMSTAT on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAT (TERMATM_ID, TERMSEQ, DATELOCAL, TIMELOCAL, MSGCLS, DEDUP)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMSTAT_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAT (TERMATM_ID, DATELOCAL, TIMELOCAL, TERMSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMSTAT_DATELOCAL on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTAT (DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMSTATE
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTATE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TABLENAME VARCHAR2(12) not null,
  FLAGS     VARCHAR2(12) not null,
  STATE     VARCHAR2(3) not null,
  STYPE     VARCHAR2(3) not null,
  DESCR     VARCHAR2(20) not null,
  ENTRY2    VARCHAR2(3) not null,
  ENTRY3    VARCHAR2(3) not null,
  ENTRY4    VARCHAR2(3) not null,
  ENTRY5    VARCHAR2(3) not null,
  ENTRY6    VARCHAR2(3) not null,
  ENTRY7    VARCHAR2(3) not null,
  ENTRY8    VARCHAR2(3) not null,
  ENTRY9    VARCHAR2(3) not null,
  EXTRADATA VARCHAR2(192) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMSTATE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTATE (TABLENAME, FLAGS, STATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMSTATE_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSTATE (TABLENAME, STATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMSVCHST
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMSVCHST
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  INDATE     DATE not null,
  INTIME     NUMBER(10) not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  STATUS     CHAR(1) not null,
  REASON     NUMBER(5),
  DVCINFO    CHAR(1),
  ADDINFO    VARCHAR2(255)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMSVCHST on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSVCHST (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_ATMSVCHST_T_I on OPS$YUFU_CHINA_PS_RUN_BAK.ATMSVCHST (TERMATM_ID, INDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table ATMTNID
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ATMTNID
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMATM_ID NUMBER(10) default 0 not null,
  NOTEID     NUMBER(5) not null,
  ACTSTATE   CHAR(1) not null,
  REQSTATE   CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ATMTNID on OPS$YUFU_CHINA_PS_RUN_BAK.ATMTNID (TERMATM_ID, NOTEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AUDIT_ITEM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUDIT_ITEM
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) not null,
  OBJECT_ID      NUMBER(10) not null,
  ACTIVITY_ID    NUMBER(10) not null,
  AUDITDATETIME  TIMESTAMP(6) not null,
  PREACTIONDATA  CLOB not null,
  POSTACTIONDATA CLOB not null,
  OBJECTTYPE     NUMBER(5) not null,
  IDENTIFIER1    NUMBER(10) not null,
  IDENTIFIER2    NUMBER(10) not null,
  IDENTIFIER3    NUMBER(10) not null,
  IDENTIFIER4    NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AUDIT_TYPEDEF
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUDIT_TYPEDEF
(
  ID               NUMBER(10) not null,
  OBJECTTYPE_ID    NUMBER(10) not null,
  IDENTIFIER1KEY   VARCHAR2(255),
  IDENTIFIER2KEY   VARCHAR2(255),
  IDENTIFIER3KEY   VARCHAR2(255),
  IDENTIFIER4KEY   VARCHAR2(255),
  IDENTIFIER1LABEL VARCHAR2(255),
  IDENTIFIER2LABEL VARCHAR2(255),
  IDENTIFIER3LABEL VARCHAR2(255),
  IDENTIFIER4LABEL VARCHAR2(255),
  IDLABEL          VARCHAR2(255)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AUTHCHECK
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECK
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  SID          NUMBER(5) not null,
  PRIORITY     NUMBER(5) not null,
  CONDLIST     VARCHAR2(255) not null,
  ACTIONCODE   CHAR(1) default '1' not null,
  RSPCODE      CHAR(2) default '00' not null,
  FLAGS        NUMBER(10) default 0 not null,
  DESCR        VARCHAR2(200) not null,
  INVERSELOGIC NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHCHECK on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECK (SID, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AUTHCHECKREF
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECKREF
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  REFCODE     VARCHAR2(32) not null,
  AUTHCHK_SID NUMBER(5) not null,
  CHECK_TYPE  NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHCHECKREF on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECKREF (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_AUTHCHECKREF_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECKREF (INST_ID, CHECK_TYPE, REFCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AUTHCOND
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCOND
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(5) not null,
  LOGIC     VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHCOND on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCOND (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AUTHDET
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHDET
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  AUTHNAME     VARCHAR2(4) not null,
  HOSTNAME     VARCHAR2(4) not null,
  HOSTSVC      VARCHAR2(15) not null,
  NO_HOST_BALS CHAR(1) not null,
  USE_CARDBAL  CHAR(1) not null,
  USE_VELOCITY CHAR(1) not null,
  ON_PRO       VARCHAR2(100) not null,
  OFF_PRO      VARCHAR2(100) not null,
  USE_TLIMITS  VARCHAR2(100) not null,
  AUTH_PARAMS  VARCHAR2(255) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHDET on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHDET (AUTHNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table AUTHFINRECON
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CTXDATE    DATE not null,
  FINTLOGID  NUMBER(20) default 0 not null,
  AUTHTLOGID NUMBER(20) default 0 not null,
  RECTYPE    NUMBER(5) default 0 not null,
  MATCHTYPE  NUMBER(5) default 0 not null,
  MCSEQCTR   NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHFINRECON on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AUTHFINRECON_AUTH on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON (AUTHTLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AUTHFINRECON_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AUTHFINRECON_FIN on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON (FINTLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AUTHOVER
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHOVER
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INDATE    DATE not null,
  INTIME    NUMBER(10) not null,
  USR       VARCHAR2(15) not null,
  AMT       FLOAT not null,
  EFFDATE   DATE not null,
  PURGEDATE DATE not null,
  ACCDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_AUTHOVER on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHOVER (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table AUTHOVERLOG
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.AUTHOVERLOG
(
  ID            NUMBER(10) not null,
  INDATE        DATE not null,
  INTIME        NUMBER(10) not null,
  USR           VARCHAR2(15) not null,
  TYPECODE      CHAR(2) not null,
  AMT_OLD       FLOAT not null,
  EFFDATE_OLD   DATE not null,
  PURGEDATE_OLD DATE not null,
  AMT_NEW       FLOAT not null,
  EFFDATE_NEW   DATE not null,
  PURGEDATE_NEW DATE not null,
  ACTION        CHAR(1) not null,
  CTXDATE       DATE not null,
  ACCDET_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_AUTHOVERLOG_TYPECODE on OPS$YUFU_CHINA_PS_RUN_BAK.AUTHOVERLOG (CTXDATE, ACCDET_ID, TYPECODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BALIMP
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BALIMP
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  INSTCODE     VARCHAR2(4),
  BRNCODE      VARCHAR2(8),
  ACCNO        VARCHAR2(28),
  CURRCODE     CHAR(3),
  STATCODE     CHAR(2),
  BLKAMT       FLOAT,
  AVLBAL       FLOAT,
  CLRBAL       FLOAT,
  UNCLRBAL     FLOAT,
  CREDIT_LIMIT FLOAT default 0.0,
  PRV_BLKAMT   FLOAT,
  PRV_AVLBAL   FLOAT,
  PRV_CLRBAL   FLOAT,
  PRV_UNCLRBAL FLOAT,
  APPLY        CHAR(1),
  HOST         VARCHAR2(8),
  SHDWAUTHOV   FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BALIMP on OPS$YUFU_CHINA_PS_RUN_BAK.BALIMP (INSTCODE, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALIMP_INSTAPPLY on OPS$YUFU_CHINA_PS_RUN_BAK.BALIMP (INSTCODE, APPLY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BALUPDERR
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) default 0 not null,
  INST_ID           NUMBER(10) default 0 not null,
  ACCNO             VARCHAR2(28) default ' ' not null,
  CURRCODE          VARCHAR2(3) default ' ' not null,
  USR_ID            NUMBER(10) default 0 not null,
  WHEN_CREATED      CHAR(17) default '22630831000000000' not null,
  UPDATED_BY        VARCHAR2(16) default ' ' not null,
  DATELOCAL         DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  TIMELOCAL         NUMBER(10) default 0 not null,
  OP_CODE           NUMBER(5) default 0 not null,
  HOSTNAME          VARCHAR2(4) default ' ' not null,
  SRC_CODE          VARCHAR2(11) default ' ' not null,
  TRN               VARCHAR2(64) default ' ' not null,
  DATEREC           DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  CTXSYSDATE        DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  PROC_TIME         NUMBER(10) default 0 not null,
  ACC_STATUS        CHAR(2) default ' ' not null,
  BLKAMT            FLOAT default 0.0 not null,
  AVLBAL            FLOAT default 0.0 not null,
  CLRBAL            FLOAT default 0.0 not null,
  UNCLRBAL          FLOAT default 0.0 not null,
  CREDITLIMIT       FLOAT default 0.0 not null,
  CYCLELIMIT        FLOAT default 0.0 not null,
  PREAUTH_BLK       FLOAT default 0.0 not null,
  PREAUTH_UNCLR     FLOAT default 0.0 not null,
  PREAUTH_EXP_BLK   FLOAT default 0.0 not null,
  PREAUTH_EXP_UNCLR FLOAT default 0.0 not null,
  ACTIONCODE        CHAR(1) default ' ' not null,
  RSPCODE           CHAR(2) default ' ' not null,
  REJECT_CODE       NUMBER(10) default 0 not null,
  ERR_MSG           VARCHAR2(255) default ' ' not null,
  HOSTTIMESTAMP     TIMESTAMP(3) default to_timestamp('2001/01/01 00:00:00','YYYY/MM/DD HH24:MI:SS') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BALUPDERR on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDERR_ACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR (INST_ID, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDERR_SRC_CODE on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR (SRC_CODE, DATEREC, TRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDERR_TMSTAMP on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR (INST_ID, ACCNO, CURRCODE, HOSTTIMESTAMP)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDERR_WHEN_CREATED on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR (INST_ID, WHEN_CREATED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BALUPDLOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDLOG
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  INST_ID           NUMBER(10) default 0 not null,
  ACCNO             VARCHAR2(28) default ' ' not null,
  CURRCODE          CHAR(3) default ' ' not null,
  USR_ID            NUMBER(10) default 0 not null,
  WHEN_CREATED      CHAR(17) not null,
  DATELOCAL         DATE not null,
  TIMELOCAL         NUMBER(10) not null,
  UPDATED_BY        VARCHAR2(16) not null,
  OP_CODE           NUMBER(5) not null,
  HOSTNAME          VARCHAR2(4) not null,
  SRC_CODE          VARCHAR2(11) not null,
  TRN               VARCHAR2(64) not null,
  DATEREC           DATE not null,
  CTXSYSDATE        DATE not null,
  PROC_TIME         NUMBER(10) default 0 not null,
  ACC_STATUS        CHAR(2) not null,
  BLKAMT            FLOAT default 0.0 not null,
  AVLBAL            FLOAT default 0.0 not null,
  CLRBAL            FLOAT default 0.0 not null,
  UNCLRBAL          FLOAT default 0.0 not null,
  CREDITLIMIT       FLOAT default 0.0 not null,
  CYCLELIMIT        FLOAT default 0.0 not null,
  PREAUTH_BLK       FLOAT default 0.0 not null,
  PREAUTH_UNCLR     FLOAT default 0.0 not null,
  PREAUTH_EXP_BLK   FLOAT default 0.0 not null,
  PREAUTH_EXP_UNCLR FLOAT default 0.0 not null,
  HOSTTIMESTAMP     TIMESTAMP(3) default to_timestamp('2001/01/01 00:00:00','YYYY/MM/DD HH24:MI:SS') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BALUPDLOG on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDLOG (SRC_CODE, DATEREC, TRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDLOG_DATELOCAL on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDLOG (WHEN_CREATED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BALUPDLOG_TMSTAMP on OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDLOG (INST_ID, ACCNO, CURRCODE, HOSTTIMESTAMP)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BARCODE
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  INST_ID            NUMBER(10) not null,
  IDX                NUMBER(5) not null,
  COMPANY_NAME       VARCHAR2(40) not null,
  COMPANY_CODE       VARCHAR2(20) not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  OPTIONS            VARCHAR2(32) not null,
  BARCODE_CONTEXT_ID NUMBER(10) not null,
  AMT_POS_FROM       NUMBER(5) not null,
  AMT_POS_TO         NUMBER(5) not null,
  AMT_DP             NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BARCODE on OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE (INST_ID, BARCODE_CONTEXT_ID, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_BARCODE_COMP_CODE on OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE (INST_ID, COMPANY_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BARCODE_CONTEXT
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_CONTEXT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  SHORT_DESCR VARCHAR2(20) not null,
  DESCR       VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BARCODE_CONTEXT on OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_CONTEXT (SHORT_DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BARCODE_REF
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_REF
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  BARCODE_ID   NUMBER(10) not null,
  IDX          NUMBER(5) not null,
  REF_LABEL_ID NUMBER(5) not null,
  REF_POS_FROM NUMBER(5) not null,
  REF_POS_TO   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BARCODE_REF on OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_REF (BARCODE_ID, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table BATCH
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BATCH
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  CTXDATE    DATE not null,
  BTCHID     NUMBER(10) not null,
  BTCHTYP    NUMBER(5) not null,
  USR        VARCHAR2(15) not null,
  INST_ID    NUMBER(10) default 0 not null,
  BRANCH_ID  NUMBER(10) default 0 not null,
  CURRCODE   CHAR(3) not null,
  RECCNT     NUMBER(5) not null,
  DRCNT      NUMBER(5) not null,
  CRCNT      NUMBER(5) not null,
  AMTDR      FLOAT not null,
  AMTCR      FLOAT not null,
  DRCNTDCL   NUMBER(5) not null,
  CRCNTDCL   NUMBER(5) not null,
  AMTDRDCL   FLOAT not null,
  AMTCRDCL   FLOAT not null,
  BTCHSTATUS CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BATCH on OPS$YUFU_CHINA_PS_RUN_BAK.BATCH (CTXDATE, BTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_BATCH_FIND on OPS$YUFU_CHINA_PS_RUN_BAK.BATCH (CTXDATE, BTCHTYP, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BATCHCRDINFO
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BATCHCRDINFO
(
  VERNO_CTX   NUMBER(10) default 0 not null,
  ID          NUMBER(10) default 0 not null,
  TICKET_NO   VARCHAR2(20) default '' not null,
  CRDBTCH_ID  NUMBER(10) default 0 not null,
  CUST_ID     NUMBER(10) default 0 not null,
  ACCDET_ID   NUMBER(10) default 0 not null,
  CRDDET_ID   NUMBER(10) default 0 not null,
  CRDPIN_ID_1 NUMBER(10) default 0 not null,
  CRDPIN_ID_2 NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 3M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BATCHCRDINFO on OPS$YUFU_CHINA_PS_RUN_BAK.BATCHCRDINFO (CUST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 768K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BATCHSUBTASK
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BATCHSUBTASK
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TICKET_NO      VARCHAR2(20) default '' not null,
  CRDBTCH_ID     NUMBER(10) default 0 not null,
  START_PAN      VARCHAR2(20) default '',
  CRDBTCH_COUNT  NUMBER(10) default 0 not null,
  CRDBTCH_STATUS CHAR(2) default '' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BATCHSUBTASK on OPS$YUFU_CHINA_PS_RUN_BAK.BATCHSUBTASK (TICKET_NO, CRDBTCH_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BATCHTASK
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BATCHTASK
(
  VERNO_CTX       NUMBER(10) default 0 not null,
  ID              NUMBER(10) default 0 not null,
  TICKET_NO       VARCHAR2(20) default '' not null,
  IID             VARCHAR2(11) default '' not null,
  CARD_COUNT      NUMBER(10) default 0 not null,
  ACCEPT_DATE     DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  ACCEPT_TIME     NUMBER(10) default 0 not null,
  BTCHTASK_STATUS CHAR(2) default '' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BATCHTASK on OPS$YUFU_CHINA_PS_RUN_BAK.BATCHTASK (TICKET_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BILLINGINFORMATION
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION
(
  ID                  NUMBER(8) not null,
  MERCHANTNUMBER      VARCHAR2(18),
  MERCHANTNAME        VARCHAR2(100),
  SETTLEMENTACCOUNT   VARCHAR2(25),
  DAYSETTLEMENTAMOUNT NUMBER(10,2),
  DAYSETTLEMENTFEE    NUMBER(10,2),
  SYSTEMMERCHANT      VARCHAR2(100),
  MERCHANTFULLNAME    VARCHAR2(100),
  BANKACCOUNTNAME     CHAR(50),
  BANKLINENUMBER      CHAR(30),
  BANKNAME            VARCHAR2(50),
  REMARK              VARCHAR2(50),
  SYSTEMTIME          DATE default to_date(to_char(sysdate,'yyyy-MM-dd hh24:mi:ss'),'yyyy-MM-dd hh24:mi:ss'),
  MERCHANTTYPE        VARCHAR2(2),
  ZSTYPE              VARCHAR2(2),
  ZSHSETTLETYPE       VARCHAR2(2),
  EXPENSEMONEY        NUMBER(10,4),
  FEERATE             VARCHAR2(20),
  JINGE               NUMBER(10,4),
  INDIVIDUAL          CHAR(3),
  TRANSNUMS           NUMBER(10),
  ISURGENT            CHAR(3),
  SETTLEDATE          VARCHAR2(8),
  OPERATOR            VARCHAR2(10),
  TERMINALNUMBER      NUMBER(15),
  TERMINALLOCATION    VARCHAR2(50),
  ACCOUNTDATE         VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION
  is '½áËãÐÅÏ¢±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.MERCHANTNUMBER
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.MERCHANTNAME
  is 'ÉÌ»§Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.SETTLEMENTACCOUNT
  is '½áËãÕË»§-¶ÔÓ¦ÉÌ»§±íµÄ½áËãÕË»§';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.DAYSETTLEMENTAMOUNT
  is 'µ±ÈÕ½áËã×Ü½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.DAYSETTLEMENTFEE
  is 'µ±ÈÕ½áËãÊÖÐø·Ñ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.SYSTEMMERCHANT
  is 'ÏµÍ³ÄÚ²¿µÄÉÌ»§Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.MERCHANTFULLNAME
  is 'ÉÌ»§È«³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.BANKACCOUNTNAME
  is '¿Í»§ÒøÐÐ¿ª»§Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.BANKLINENUMBER
  is 'ÒøÐÐÐÐºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.BANKNAME
  is 'ÕË»§¿ª»§ÐÐ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.REMARK
  is '±¸×¢';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.SYSTEMTIME
  is 'ÏµÍ³Ê±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.MERCHANTTYPE
  is 'ÉÌ»§ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.ZSTYPE
  is '×¨ÊôÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.ZSHSETTLETYPE
  is 'ÖÐÊ¯»¯½áËãÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.EXPENSEMONEY
  is 'Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.FEERATE
  is 'ÊÖÐø·ÑÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.JINGE
  is '¾»¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.INDIVIDUAL
  is 'ÊÖÐø·ÑÊÇ·ñµ¥½á';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.TRANSNUMS
  is '½»Ò×±ÊÊý';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.ISURGENT
  is '±ê¼ÇÊÇ·ñ¼Ó¼±';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.SETTLEDATE
  is '¼ÇÂ¼½áËãÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.OPERATOR
  is '²Ù×÷Ô±';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.TERMINALNUMBER
  is 'ÖÕ¶ËºÅ£¨×ÓÉÌ»§ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.TERMINALLOCATION
  is 'ÖÕ¶ËÎ»ÖÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.BILLINGINFORMATION.ACCOUNTDATE
  is 'ÕËÆÚ';

prompt
prompt Creating table BINDINGINFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BINDINGINFO
(
  VERNO_CTX        NUMBER(10) default 0 not null,
  ID               NUMBER(10) default 0 not null,
  CRDDET_ID        NUMBER(10) default 0 not null,
  PAN              VARCHAR2(21) not null,
  VER_MOBILE_FLAG  VARCHAR2(2) default '0' not null,
  VER_MOBILE_NUM   VARCHAR2(21) default ' ' not null,
  MOBILE_FLAG      VARCHAR2(2) default '0' not null,
  MOBILE_NUM       VARCHAR2(21) default ' ' not null,
  CRD_NUM_FLAG     VARCHAR2(2) default '0' not null,
  CRD_NUM          VARCHAR2(21) default ' ' not null,
  BANK_NAME        VARCHAR2(100) default ' ' not null,
  CARDHOLDER_NAME  VARCHAR2(100) default ' ' not null,
  CARDHOLDER_ID    VARCHAR2(30) default ' ' not null,
  BANK_BRANCH_NAME VARCHAR2(100) default ' ' not null,
  WEB_REDEEM_FLAG  VARCHAR2(2) default '0' not null,
  USER_DATA        VARCHAR2(255) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BINDINGINFO on OPS$YUFU_CHINA_PS_RUN_BAK.BINDINGINFO (PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BIN_RANGE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BIN_RANGE
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  LCG_RANDOM_ID   NUMBER(10) not null,
  RANGE_LOW       VARCHAR2(19) not null,
  RANGE_HIGH      VARCHAR2(19) not null,
  TOTAL_PANS      NUMBER(10) not null,
  MAX_PANS        NUMBER(10) not null,
  VPAN_PROFILE_ID NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BIN_RANGE on OPS$YUFU_CHINA_PS_RUN_BAK.BIN_RANGE (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BRANCH
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BRANCH
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  INST_ID     NUMBER(10) default 0 not null,
  BRNCODE     VARCHAR2(8) not null,
  FECODE      VARCHAR2(8) not null,
  DESCR       VARCHAR2(20) not null,
  ADDRL1      VARCHAR2(35) not null,
  ADDRL2      VARCHAR2(35) not null,
  CITY        VARCHAR2(40) not null,
  CONTACTNAME VARCHAR2(20) not null,
  CONTACTNO   VARCHAR2(20) not null,
  REGION      VARCHAR2(3) not null,
  POSTCODE    VARCHAR2(10) not null,
  COUNTRYCODE CHAR(3) not null,
  SORTCODE    VARCHAR2(6) default '000000' not null,
  ID          NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BRANCH on OPS$YUFU_CHINA_PS_RUN_BAK.BRANCH (INST_ID, BRNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BRNMRCH
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.BRNMRCH
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  BRANCH_ID   NUMBER(10) default 0 not null,
  MERCHANT_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.BRNMRCH
  add constraint UNQ_BRNMRCH_MRCH unique (MERCHANT_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_BRNMRCH on OPS$YUFU_CHINA_PS_RUN_BAK.BRNMRCH (BRANCH_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CACCDET
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CACCDET
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ACCDET_ID      NUMBER(10) not null,
  CUSTDET_ID     NUMBER(10) default 0 not null,
  CRDDET_ID      NUMBER(10) default 0 not null,
  CRDPRODUCT     VARCHAR2(4) not null,
  STATCODE       CHAR(2) not null,
  DATE_OPENED    DATE not null,
  INST_ID        NUMBER(10) default 0 not null,
  OFFICIAL       VARCHAR2(3) not null,
  DEBIT_ACCNO    VARCHAR2(28) not null,
  CYCLE_NO       NUMBER(5) not null,
  DATE_LAST_STMT DATE not null,
  DATEPAY        DATE not null,
  DATEGRACE      DATE not null,
  OVERLIM        CHAR(1) not null,
  NUM_ADDITIONAL NUMBER(5) not null,
  GUARANTOR      VARCHAR2(8) not null,
  REFUSE_CHQ     CHAR(1) not null,
  COLLECTION     CHAR(1) not null,
  MEMO           CLOB,
  VIPFLAG        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CACCDET on OPS$YUFU_CHINA_PS_RUN_BAK.CACCDET (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CACCDET_ACCDET_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CACCDET (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CACENT
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CACENT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  ACCDET_ID  NUMBER(10) default 0 not null,
  CURBILL    CHAR(3) not null,
  CCTXNCODE  NUMBER(5) not null,
  DRCR       CHAR(1) not null,
  BTCHID     NUMBER(10) not null,
  BTCHSEQ    NUMBER(10) not null,
  DATELOCAL  DATE not null,
  CTXDATE    DATE not null,
  AMTBILL    FLOAT not null,
  AMTTXN     FLOAT not null,
  CURTXN     CHAR(3) not null,
  APRVLCODE  VARCHAR2(9) not null,
  SIC        NUMBER(5) not null,
  AIID       VARCHAR2(11) not null,
  RRN        VARCHAR2(12) not null,
  DATESET    DATE not null,
  CTXCOMMENT VARCHAR2(44) not null,
  DATESTMT   DATE not null,
  PAN        VARCHAR2(19) not null,
  SEQNO      INTEGER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CACENT on OPS$YUFU_CHINA_PS_RUN_BAK.CACENT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CACENT_DATESET on OPS$YUFU_CHINA_PS_RUN_BAK.CACENT (DATESET, CCTXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CACENT_STMT1_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.CACENT (DATESTMT, ACCDET_ID, DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CACOPN
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CACOPN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  ACCDET_ID  NUMBER(10) not null,
  CCTXNCODE  NUMBER(5) not null,
  DRCR       CHAR(1) not null,
  BTCHID     NUMBER(10) not null,
  BTCHSEQ    NUMBER(10) not null,
  DATELOCAL  DATE not null,
  CTXDATE    DATE not null,
  AMTBILL    FLOAT not null,
  CURBILL    CHAR(3) not null,
  AMTTXN     FLOAT not null,
  CURTXN     CHAR(3) not null,
  APRVLCODE  VARCHAR2(9) not null,
  SIC        NUMBER(5) not null,
  AIID       VARCHAR2(11) not null,
  RRN        VARCHAR2(12) not null,
  DATESET    DATE not null,
  CTXCOMMENT VARCHAR2(44) not null,
  PAN        VARCHAR2(19) not null,
  SEQNO      NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CACOPN_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.CACOPN (ACCDET_ID, DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CALENDAR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CALENDAR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  CALTYPE   VARCHAR2(8) not null,
  CALNAME   VARCHAR2(20) not null,
  CALYEAR   NUMBER(5) not null,
  M1        VARCHAR2(31) not null,
  M2        VARCHAR2(31) not null,
  M3        VARCHAR2(31) not null,
  M4        VARCHAR2(31) not null,
  M5        VARCHAR2(31) not null,
  M6        VARCHAR2(31) not null,
  M7        VARCHAR2(31) not null,
  M8        VARCHAR2(31) not null,
  M9        VARCHAR2(31) not null,
  M10       VARCHAR2(31) not null,
  M11       VARCHAR2(31) not null,
  M12       VARCHAR2(31) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CALENDAR on OPS$YUFU_CHINA_PS_RUN_BAK.CALENDAR (CALTYPE, CALYEAR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CARDBATCH_LOG
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CARDBATCH_LOG
(
  ID             NUMBER(12) not null,
  USER_CODE      VARCHAR2(20),
  OPERATE        VARCHAR2(20),
  OPERATE_STATUS NUMBER(12),
  OPERATE_DATE   DATE,
  IP             VARCHAR2(20),
  LOG_TYPE       NUMBER(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CARDKINDSOF
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF
(
  CARDNUMBER   VARCHAR2(20) not null,
  CARDKINDNAME VARCHAR2(60),
  REMARK       VARCHAR2(100),
  ISEXCLUSIVE  VARCHAR2(2),
  STLFLAG      VARCHAR2(1) default 1
)
tablespace CORTEXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF
  is '¿¨ÀàÐÍ±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF.CARDNUMBER
  is '¿¨ÀàÐÍ±àºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF.CARDKINDNAME
  is '¿¨ÀàÐÍÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF.REMARK
  is '±¸×¢';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF.ISEXCLUSIVE
  is 'ÊÇ·ñ×¨Êô¿¨';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF.STLFLAG
  is 'ÊÇ·ñ²ÎÓë½áËã 0-²»²ÎÓë 1-²ÎÓë';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF
  add primary key (CARDNUMBER)
  using index 
  tablespace CORTEXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CARDKINDANDCOMESOURCERELATION
prompt ============================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION
(
  CARDNUMBER         VARCHAR2(20) not null,
  DATABASESOURCENAME VARCHAR2(60),
  DATASOURCEID       VARCHAR2(20),
  OLDKINDID          VARCHAR2(20),
  OLDDBCARDNAME      VARCHAR2(20),
  DATABASETYPE       CHAR(1),
  ID                 NUMBER(10)
)
tablespace CORTEXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION
  is '¿¨ÀàÐÍÓëÊý¾ÝÀ´Ô´¶ÔÓ¦¹ØÏµ±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.CARDNUMBER
  is '¿¨ÀàÐÍ±àºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.DATABASESOURCENAME
  is 'Êý¾Ý¿âÀ´Ô´Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.DATASOURCEID
  is 'Êý¾ÝÀ´Ô´ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.OLDKINDID
  is '¾É¿âµÄ¿¨ÀàÐÍ±àºÅID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.OLDDBCARDNAME
  is '¾É¿â¿¨ÀàÐÍÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.DATABASETYPE
  is 'Êý¾Ý¿âÀ´Ô´ÀàÐÍÇø·Ö£º1-yufu¿â,2-¾É¿â2,3-tlog';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION.ID
  is 'IDÖ÷¼ü';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDANDCOMESOURCERELATION
  add foreign key (CARDNUMBER)
  references OPS$YUFU_CHINA_PS_RUN_BAK.CARDKINDSOF (CARDNUMBER);

prompt
prompt Creating table CARDOPENRECORDS
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CARDOPENRECORDS
(
  CARDNUMBER          VARCHAR2(20) not null,
  CARDKINDID          VARCHAR2(20),
  CARDKINDNAME        VARCHAR2(30),
  PROVINCE            VARCHAR2(20),
  CITY                VARCHAR2(20),
  COUNTY              VARCHAR2(20),
  OPENTIME            VARCHAR2(20) default to_char(sysdate,'yyyyMMddhh24miss'),
  AUDITINGTIME        VARCHAR2(20) default to_char(sysdate,'yyyyMMddhh24miss'),
  OPENPERSON          VARCHAR2(20),
  AUDITINGPERSON      VARCHAR2(20),
  ORDERNUMBER         VARCHAR2(20),
  ORDERTIME           VARCHAR2(20) default to_char(sysdate,'yyyyMMddhh24miss'),
  SALENETLOCATION     VARCHAR2(20),
  SALENETLOCATIONNAME VARCHAR2(20),
  OPERATETYPE         VARCHAR2(10),
  OPERATESIGN         VARCHAR2(10),
  OPENCARDMONEY       NUMBER(10,2)
)
tablespace CORTEXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.CARDOPENRECORDS.OPENCARDMONEY
  is '¿ª¿¨½ð¶î';

prompt
prompt Creating table CARDOPERATIONLOG
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CARDOPERATIONLOG
(
  CARDNUMBER    VARCHAR2(20) not null,
  OPERATETYPE   VARCHAR2(10),
  OPERATETIME   VARCHAR2(20) default to_char(sysdate,'yyyyMMddhh24miss'),
  OLDCARDNUMBER VARCHAR2(20),
  OPERATEMONEY  NUMBER(10,2)
)
tablespace CORTEXDB
  pctfree 10
  initrans 1
  maxtrans 255;
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CARDOPERATIONLOG
  add primary key (CARDNUMBER)
  using index 
  tablespace CORTEXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CASHINBATCH
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CASHINBATCH
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TXNSRC         CHAR(1) default '4' not null,
  TXNCODE        NUMBER(5) not null,
  TIME           VARCHAR2(20) default '' not null,
  STAN           NUMBER(7) default 0 not null,
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ORG_F_ORDER    VARCHAR2(40) default '' not null,
  ORG_C_ORDER    VARCHAR2(40) default '' not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  PAY_TYPE       NUMBER(5) default 1 not null,
  PAY_DESC       VARCHAR2(128) default '' not null,
  PAYER_NAME     VARCHAR2(128) default '' not null,
  SALES_POINT    VARCHAR2(128) default '' not null,
  AREA           VARCHAR2(128) default '' not null,
  ID_TYPE        VARCHAR2(2) default '' not null,
  ID_NUMBER      VARCHAR2(22) default '' not null,
  CELL_PHONE     VARCHAR2(22) default '' not null,
  PHONE          VARCHAR2(22) default '' not null,
  ADDRESS        VARCHAR2(22) default '' not null,
  CASHIN_TYPE    NUMBER(5) default 0 not null,
  ISPAID         NUMBER(5) default 0 not null,
  SUMMARY        VARCHAR2(128) default '' not null,
  OPERATOR       VARCHAR2(128) default '' not null,
  MRCHT_ID       VARCHAR2(15) default '' not null,
  BATCH_STAT     CHAR(2) not null,
  RESERVED1      VARCHAR2(255) default '' not null,
  RESERVED2      VARCHAR2(255) default '' not null,
  RESERVED3      VARCHAR2(255) default '' not null,
  DESCR          VARCHAR2(255) default '' not null,
  CURTXN         CHAR(3) default '156',
  AMTTXN         FLOAT default 0,
  RATESET        FLOAT default 0,
  CURRBILL       CHAR(3) default '156',
  CRDPRODUCT     VARCHAR2(4) default ' '
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CASHINBATCH
  add constraint PK_CASHINBATCH primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CASHINBATCH
  add constraint HASH_CASHINBATCH unique (TXNSRC, FATHER_ORDER, CHILDREN_ORDER)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CASHINBATCH_CUSTOM
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CASHINBATCH_CUSTOM
(
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ISPAID         NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CASH_ERROR
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CASH_ERROR
(
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ERRDESC        VARCHAR2(1024) not null,
  ERRCODE        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CATDESCR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CATDESCR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  LANG      VARCHAR2(12) not null,
  MSGSET    NUMBER(5) not null,
  MSGNO     INTEGER not null,
  MSG       VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 256K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ACCTMRKUP
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTMRKUP
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) default 0 not null,
  MRKUPVALUE VARCHAR2(12) not null,
  DESCR      VARCHAR2(48)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ACCTMRKUP on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTMRKUP (MRKUPVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ACCTRISK
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTRISK
(
  VERNO_CTX NUMBER(10) default 0 not null,
  ID        NUMBER(10) not null,
  RISKVALUE VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CAT_ACCTRISK_RISKVALUE on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTRISK (RISKVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ACQRISK
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACQRISK
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ACQRISK on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACQRISK (CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_CRDISS
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CRDISS
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_CRDISS on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CRDISS (INST_ID, CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_CUSTSEG
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CUSTSEG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) not null,
  CATLEVEL  NUMBER(5) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_CUSTSEG on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CUSTSEG (INST_ID, CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ISSCOMM
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCOMM
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ISSCOMM on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCOMM (CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ISSCYCFEE
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCYCFEE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ISSCYCFEE on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCYCFEE (CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ISSFEE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSFEE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ISSFEE on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSFEE (CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ISSRISK
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISK
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CATVALUE  VARCHAR2(12) not null,
  DESCR     VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CAT_ISSRISK on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISK (CATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CAT_ISSRISKCNTRL
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISKCNTRL
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  INST_ID      NUMBER(10) not null,
  RISKCATVALUE VARCHAR2(12) not null,
  DESCR        VARCHAR2(48) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CAT_ISSRISKCNTRL_INST_RISK on OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISKCNTRL (INST_ID, RISKCATVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CCAPPL
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPL
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  APPLNO          NUMBER(10) not null,
  BRANCH_ID       NUMBER(10) default 0 not null,
  CRDPRODUCT_ID   NUMBER(10) default 0 not null,
  CORP            CHAR(1) not null,
  CUSTDET_ID      NUMBER(10) default 0 not null,
  TYPEID          NUMBER(5) not null,
  ID_NUMBER       VARCHAR2(12) not null,
  LASTNAME        VARCHAR2(50) not null,
  FIRSTNAME       VARCHAR2(50) not null,
  TITLE           VARCHAR2(10) not null,
  ADDRL1          VARCHAR2(35) not null,
  ADDRL2          VARCHAR2(35) not null,
  ADDRL3          VARCHAR2(35) not null,
  CITY            VARCHAR2(40) not null,
  POSTCODE        VARCHAR2(10) not null,
  PO_BOX          VARCHAR2(8) not null,
  HOME_TEL        VARCHAR2(20) not null,
  WORK_ADDR1      VARCHAR2(35) not null,
  WORK_ADDR2      VARCHAR2(35) not null,
  WORK_ADDR3      VARCHAR2(35) not null,
  WORK_CITY       VARCHAR2(40) not null,
  WORK_POSTCODE   VARCHAR2(10) not null,
  WORK_TEL        VARCHAR2(20) not null,
  SEX             CHAR(1) not null,
  MARRIED         CHAR(1) not null,
  COLLECTION_ZONE NUMBER(5) not null,
  STMT_DLVY       NUMBER(5) not null,
  PROFESSION      NUMBER(5) not null,
  USRDATA1        VARCHAR2(12) not null,
  USRDATA2        VARCHAR2(12) not null,
  USRDATA3        VARCHAR2(12) not null,
  MAILSHOTS       CHAR(1) not null,
  APPLDATA1       VARCHAR2(20) not null,
  APPLDATA2       VARCHAR2(20) not null,
  APPLDATA3       VARCHAR2(20) not null,
  APPLDATA4       VARCHAR2(20) not null,
  APPLDATA5       VARCHAR2(20) not null,
  APPLDATA6       VARCHAR2(20) not null,
  APPLDATA7       VARCHAR2(20) not null,
  APPLDATA8       VARCHAR2(20) not null,
  TICKBOX1        CHAR(1) not null,
  TICKBOX2        CHAR(1) not null,
  TICKBOX3        CHAR(1) not null,
  TICKBOX4        CHAR(1) not null,
  TICKBOX5        CHAR(1) not null,
  TICKBOX6        CHAR(1) not null,
  TICKBOX7        CHAR(1) not null,
  TICKBOX8        CHAR(1) not null,
  TICKBOX9        CHAR(1) not null,
  TICKBOX10       CHAR(1) not null,
  TICKBOX11       CHAR(1) not null,
  TICKBOX12       CHAR(1) not null,
  TICKBOX13       CHAR(1) not null,
  TICKBOX14       CHAR(1) not null,
  TICKBOX15       CHAR(1) not null,
  TICKBOX16       CHAR(1) not null,
  SCORE           NUMBER(5) not null,
  DATE_APPL       DATE not null,
  APPL_STATUS     CHAR(1) not null,
  DATE_APPROVAL   DATE not null,
  REJECT_REASON   NUMBER(5) not null,
  CREDIT_LIMIT1   FLOAT not null,
  CREDIT_LIMIT2   FLOAT not null,
  VIPFLAG         CHAR(1) not null,
  DEBIT_TYPE      CHAR(1) not null,
  DEBIT_PC        FLOAT not null,
  DEBIT_ACCNO     VARCHAR2(28) not null,
  APPROVED_BY     VARCHAR2(12) not null,
  PRIORITY        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCAPPL on OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPL (APPLNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCAPPL_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPL (ID_NUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCAPPLADD
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPLADD
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  APPLNO        NUMBER(10) not null,
  PAN           VARCHAR2(19) not null,
  SEQNO         NUMBER(5) not null,
  ADDITIONALNO  NUMBER(5) not null,
  LASTNAME      VARCHAR2(20) not null,
  FIRSTNAME     VARCHAR2(20) not null,
  TITLE         VARCHAR2(4) not null,
  EMBOSSNAME    VARCHAR2(51) not null,
  ID_NUMBER     VARCHAR2(12) not null,
  DATE_BIRTH    DATE not null,
  RELATIONSHIP  VARCHAR2(12) not null,
  CREDIT_LIMIT1 FLOAT not null,
  CREDIT_LIMIT2 FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCAPPLADD on OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPLADD (APPLNO, ADDITIONALNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSACCDET
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ACC_ID             NUMBER(10) not null,
  INST_ID            NUMBER(10) default 0 not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  CHRGPRFID          VARCHAR2(10) not null,
  SCHEME             CHAR(4) not null,
  USRDATA1           VARCHAR2(32) default ' ' not null,
  USRDATA2           VARCHAR2(32) default ' ' not null,
  CASHPRCNT          FLOAT default 0.0 not null,
  CREDIT_LIMIT       NUMBER(12,4) not null,
  BALANCE            NUMBER(12,4) default 0.0 not null,
  PAYMENTS           NUMBER(12,4) default 0.0 not null,
  SURPLUS            NUMBER(12,4) default 0.0 not null,
  DLNQLVL            NUMBER(5) default 0 not null,
  BAL_DEBIT_PAY      NUMBER(12,4) default 0.0 not null,
  DEF_INTEREST       FLOAT default 0.0 not null,
  PROV_INTEREST      FLOAT default 0.0 not null,
  PREV_PROV_INTEREST FLOAT default 0.0 not null,
  MIN_PAY            NUMBER(12,4) default 0.0 not null,
  PREV_BALANCE       NUMBER(12,4) default 0.0 not null,
  OVERLIMIT_PEN_DUE  NUMBER(5) default 0 not null,
  CONSEC_LATE_PAY    NUMBER(5) default 0 not null,
  CYCLECODE          VARCHAR2(10) not null,
  NXTCYCLECODE       VARCHAR2(10) default 'NONE' not null,
  CYCLE_PHASE        NUMBER(5) default 0 not null,
  LSTCASHMVDATE      DATE default to_date('01/01/2000', 'DD/MM/YYYY') not null,
  MRKDATE            DATE default to_date('01/01/2000', 'DD/MM/YYYY') not null,
  BALCMP0CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP1CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP2CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP3CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP4CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP5CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP6CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP7CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP8CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP9CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP10CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP11CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP12CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP13CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP14CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP0PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP1PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP2PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP3PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP4PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP5PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP6PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP7PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP8PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP9PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP10PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP11PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP12PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP13PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP14PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP0OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP1OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP2OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP3OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP4OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP5OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP6OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP7OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP8OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP9OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP10OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP11OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP12OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP13OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP14OLD        NUMBER(12,4) default 0.0 not null,
  CCSACCFLAGS        VARCHAR2(16) default 0.0 not null,
  PRJPENINT          FLOAT default 0.0 not null,
  MINPAYNOINT        FLOAT default 0.0 not null,
  CUSTCODE           VARCHAR2(12) default ' ' not null,
  BRNCODE            VARCHAR2(8) default ' ' not null,
  DEBITS             NUMBER(12,4) default 0.0 not null,
  CREDITS            NUMBER(12,4) default 0.0 not null,
  BALDUE             NUMBER(12,4) default 0.0 not null,
  BALND              NUMBER(12,4) default 0.0 not null,
  SURPLUSND          NUMBER(12,4) default 0.0 not null,
  BAL_DEBIT_PAYND    NUMBER(12,4) default 0.0 not null,
  CLASSID            NUMBER(5) default 2 not null,
  LSTPYDATE          DATE default to_date('01/01/2000', 'DD/MM/YYYY') not null,
  CORP               NUMBER(5) default 0 not null,
  INIT_MIN_PAY       NUMBER(12,4) default 0 not null,
  INSTBALANCE        NUMBER(12,4) default 0.0 not null,
  PPLIMIT            NUMBER(12,4) default -1 not null,
  INSTLSTCYCDUE      NUMBER(12,4) default 0.0 not null,
  PREV_INSTBALANCE   NUMBER(12,4) default 0.0 not null,
  LSTSATDDDATE       DATE default to_date('31/08/2263', 'DD/MM/YYYY') not null,
  NUMCYCLES          NUMBER(5) default 0 not null,
  PREV_SURPLUS       NUMBER(12,4) default 0.0 not null,
  APPLSEQ            NUMBER(10) default 0 not null,
  SURPLUSDUE         NUMBER(16,4) default 0.0 not null,
  CREDITLIMITGRANTED NUMBER(16,4) default -1 not null,
  CLEDATE            DATE default to_date('31/08/2263', 'DD/MM/YYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET
  add constraint UNQ_CCSACCDET_ACCNO unique (INST_ID, ACCNO, CURRCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSACCDET on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCDET_DLNQLVL on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET (INST_ID, DLNQLVL, CHRGPRFID, SCHEME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCDET_LSTCASHMVDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET (LSTCASHMVDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCDET_MRKDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET (MRKDATE, CYCLE_PHASE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSACCDETSNP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDETSNP
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  SNAPDATE           DATE default to_date('31082263','DDMMYYYY') not null,
  ACC_ID             NUMBER(10) not null,
  INST_ID            NUMBER(10) default 0 not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  CHRGPRFID          VARCHAR2(10) not null,
  SCHEME             CHAR(4) not null,
  USRDATA1           VARCHAR2(32) not null,
  USRDATA2           VARCHAR2(32) not null,
  CASHPRCNT          FLOAT not null,
  CREDIT_LIMIT       NUMBER(12,4) not null,
  BALANCE            NUMBER(12,4) default 0.0 not null,
  PAYMENTS           NUMBER(12,4) default 0.0 not null,
  SURPLUS            NUMBER(12,4) default 0.0 not null,
  DLNQLVL            NUMBER(5) not null,
  BAL_DEBIT_PAY      NUMBER(12,4) not null,
  DEF_INTEREST       FLOAT not null,
  PROV_INTEREST      FLOAT not null,
  PREV_PROV_INTEREST FLOAT not null,
  MIN_PAY            NUMBER(12,4) default 0.0 not null,
  PREV_BALANCE       NUMBER(12,4) default 0.0 not null,
  OVERLIMIT_PEN_DUE  NUMBER(5) not null,
  CONSEC_LATE_PAY    NUMBER(5) not null,
  CYCLECODE          VARCHAR2(10) not null,
  NXTCYCLECODE       VARCHAR2(10) default 'NOCYCLE' not null,
  CYCLE_PHASE        NUMBER(5) not null,
  LSTCASHMVDATE      DATE not null,
  MRKDATE            DATE not null,
  BALCMP0CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP1CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP2CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP3CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP4CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP5CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP6CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP7CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP8CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP9CRNT        NUMBER(12,4) default 0.0 not null,
  BALCMP10CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP11CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP12CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP13CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP14CRNT       NUMBER(12,4) default 0.0 not null,
  BALCMP0PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP1PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP2PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP3PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP4PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP5PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP6PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP7PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP8PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP9PRV         NUMBER(12,4) default 0.0 not null,
  BALCMP10PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP11PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP12PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP13PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP14PRV        NUMBER(12,4) default 0.0 not null,
  BALCMP0OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP1OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP2OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP3OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP4OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP5OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP6OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP7OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP8OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP9OLD         NUMBER(12,4) default 0.0 not null,
  BALCMP10OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP11OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP12OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP13OLD        NUMBER(12,4) default 0.0 not null,
  BALCMP14OLD        NUMBER(12,4) default 0.0 not null,
  CCSACCFLAGS        VARCHAR2(16) not null,
  PRJPENINT          FLOAT not null,
  MINPAYNOINT        FLOAT not null,
  CUSTCODE           VARCHAR2(12) default '' not null,
  BRNCODE            VARCHAR2(8) default '' not null,
  DEBITS             NUMBER(12,4) default 0.0 not null,
  CREDITS            NUMBER(12,4) default 0.0 not null,
  BALDUE             NUMBER(12,4) default 0.0 not null,
  BALND              NUMBER(12,4) default 0.0 not null,
  SURPLUSND          NUMBER(12,4) default 0.0 not null,
  BAL_DEBIT_PAYND    NUMBER(12,4) default 0.0 not null,
  CLASSID            NUMBER(5) default 2 not null,
  LSTPYDATE          DATE default to_date('01012000','DDMMYYYY') not null,
  CORP               NUMBER(5) default 0 not null,
  INIT_MIN_PAY       NUMBER(12,4) default 0.0 not null,
  INSTBALANCE        NUMBER(12,4) default 0.0 not null,
  PREV_INSTBALANCE   NUMBER(12,4) default 0.0 not null,
  PPLIMIT            NUMBER(12,4) default -1 not null,
  APPLSEQ            NUMBER(10) default 0 not null,
  INSTLSTCYCDUE      NUMBER(12,4) default 0.0 not null,
  LSTSATDDDATE       DATE default to_date('31/08/2263', 'DD/MM/YYYY') not null,
  NUMCYCLES          NUMBER(5) default 0 not null,
  PREV_SURPLUS       NUMBER(12,4) default 0.0 not null,
  SURPLUSDUE         NUMBER(16,4) default 0.0 not null,
  CREDITLIMITGRANTED NUMBER(16,4) default -1 not null,
  CLEDATE            DATE default to_date('31/08/2263', 'DD/MM/YYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSACCDETSNP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDETSNP (ACC_ID, SNAPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSACCDETSNP_S_ACC on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDETSNP (SNAPDATE, INST_ID, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSACCEVENT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  ACC_ID    NUMBER(10) default 0 not null,
  EVTYPE    NUMBER(5) not null,
  PENDING   NUMBER(5) not null,
  AMTFEE    FLOAT not null,
  FEEAPPLY  NUMBER(5) not null,
  DATA      VARCHAR2(128) not null,
  AMT1      FLOAT not null,
  AMT2      FLOAT not null,
  EVDATE    DATE not null,
  CTXDATE   DATE not null,
  LOCALDATE DATE not null,
  GLPOSTED  NUMBER(10) not null,
  EXPORTED  NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSACCEVENT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCEVENT_EXPORTED on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT (CTXDATE, EXPORTED, EVTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCEVENT_FEEAPPLY on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT (CTXDATE, FEEAPPLY, EVTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSACCEVENT_GLPOSTED on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT (GLPOSTED, ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSACCPOSITION
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCPOSITION
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  CTXDATE            DATE not null,
  ACC_ID             NUMBER(10) not null,
  INST_ID            NUMBER(10) default 1 not null,
  ACCNO              VARCHAR2(28) not null,
  CURRCODE           CHAR(3) not null,
  CHRGPRFID          VARCHAR2(10) not null,
  SCHEME             CHAR(4) not null,
  USRDATA1           VARCHAR2(32) not null,
  USRDATA2           VARCHAR2(32) not null,
  CASHPRCNT          FLOAT not null,
  CREDIT_LIMIT       FLOAT not null,
  BALANCE            FLOAT not null,
  PAYMENTS           FLOAT not null,
  SURPLUS            FLOAT not null,
  DLNQLVL            NUMBER(5) not null,
  BAL_DEBIT_PAY      FLOAT not null,
  DEF_INTEREST       FLOAT not null,
  PROV_INTEREST      FLOAT not null,
  PREV_PROV_INTEREST FLOAT not null,
  MIN_PAY            FLOAT not null,
  PREV_BALANCE       FLOAT not null,
  OVERLIMIT_PEN_DUE  NUMBER(5) not null,
  CONSEC_LATE_PAY    NUMBER(5) not null,
  CYCLECODE          VARCHAR2(10) not null,
  NXTCYCLECODE       VARCHAR2(10) default 'NOCYCLE' not null,
  CYCLE_PHASE        NUMBER(5) not null,
  LSTCASHMVDATE      DATE not null,
  MRKDATE            DATE not null,
  BALCMP0CRNT        FLOAT not null,
  BALCMP1CRNT        FLOAT not null,
  BALCMP2CRNT        FLOAT not null,
  BALCMP3CRNT        FLOAT not null,
  BALCMP4CRNT        FLOAT not null,
  BALCMP5CRNT        FLOAT not null,
  BALCMP6CRNT        FLOAT not null,
  BALCMP7CRNT        FLOAT not null,
  BALCMP8CRNT        FLOAT not null,
  BALCMP9CRNT        FLOAT not null,
  BALCMP0PRV         FLOAT not null,
  BALCMP1PRV         FLOAT not null,
  BALCMP2PRV         FLOAT not null,
  BALCMP3PRV         FLOAT not null,
  BALCMP4PRV         FLOAT not null,
  BALCMP5PRV         FLOAT not null,
  BALCMP6PRV         FLOAT not null,
  BALCMP7PRV         FLOAT not null,
  BALCMP8PRV         FLOAT not null,
  BALCMP9PRV         FLOAT not null,
  BALCMP0OLD         FLOAT not null,
  BALCMP1OLD         FLOAT not null,
  BALCMP2OLD         FLOAT not null,
  BALCMP3OLD         FLOAT not null,
  BALCMP4OLD         FLOAT not null,
  BALCMP5OLD         FLOAT not null,
  BALCMP6OLD         FLOAT not null,
  BALCMP7OLD         FLOAT not null,
  BALCMP8OLD         FLOAT not null,
  BALCMP9OLD         FLOAT not null,
  CCSACCFLAGS        VARCHAR2(16) not null,
  PRJPENINT          FLOAT not null,
  MINPAYNOINT        FLOAT not null,
  CUSTCODE           VARCHAR2(8) default ' ' not null,
  BRNCODE            VARCHAR2(8) default ' ' not null,
  DEBITS             FLOAT default 0 not null,
  CREDITS            FLOAT default 0 not null,
  BALDUE             FLOAT default 0.0 not null,
  BALND              FLOAT default 0.0 not null,
  SURPLUSND          FLOAT default 0.0 not null,
  BAL_DEBIT_PAYND    FLOAT default 0.0 not null,
  CLASSID            NUMBER(5) default 2 not null,
  LSTPYDATE          DATE default to_date('01/01/2000', 'DD/MM/YYYY') not null,
  CORP               NUMBER(5) default 0 not null,
  INIT_MIN_PAY       FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSACCPOSITION_ACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCPOSITION (CTXDATE, INST_ID, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSAPPRULE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSAPPRULE
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  TXNCAT             VARCHAR2(16) not null,
  DESCR              VARCHAR2(255) not null,
  ENABLED            NUMBER(5) not null,
  INST_ID            NUMBER(10) not null,
  CHRGPRFID          VARCHAR2(10) not null,
  SCHEME             CHAR(4),
  MAX_DLNQLVL        NUMBER(5) not null,
  EFFDATE            DATE not null,
  PURGEDATE          DATE,
  CCSPPSET_ID        NUMBER(10) not null,
  CCSPPSETNUMINST_ID NUMBER(5),
  PRIORITY           NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSAPPRULE_CHRGPRFIDTXNCAT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSAPPRULE (CHRGPRFID, TXNCAT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSBKITEM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(20) not null,
  CCSDATE     DATE not null,
  BKTYPE      NUMBER(3) not null,
  COMP_CODE   NUMBER(5) not null,
  ACC_ID      NUMBER(10) not null,
  ITEMVALUE   FLOAT not null,
  SRC_PROCESS VARCHAR2(20) not null,
  CCSITEMID   NUMBER(20) not null,
  BKGROUP     NUMBER(20) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSBKITEM on OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEM (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSBKITEM_DATE_BKTYPE_COMP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEM (CCSDATE, BKTYPE, COMP_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSBKITEMCFG
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEMCFG
(
  ID       NUMBER(10) not null,
  ITEMTYPE NUMBER(5) not null,
  ITEMCAT  VARCHAR2(255) default ' ' not null,
  MSGCLS   CHAR(1) default ' ' not null,
  TXNCODE  NUMBER(5) default 0 not null,
  BKTYPE   NUMBER(3) not null,
  DRCR     CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCHRGPROF
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCHRGPROF
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  INST_ID        NUMBER(10) default 0 not null,
  CHRGPRFID      VARCHAR2(10) not null,
  DESCR          VARCHAR2(50) not null,
  CURRCODE       CHAR(3) not null,
  RATE_BASIS     CHAR(1) not null,
  MINPAYMTHD     NUMBER(5) not null,
  DLNQMTHD       NUMBER(5) not null,
  MAXCMP         NUMBER(5) not null,
  INTCMP         NUMBER(5) not null,
  OVRLIMPENCMP   NUMBER(5) not null,
  LATEPENCMP     NUMBER(5) not null,
  PRFFLAGS       VARCHAR2(16) not null,
  PRFDATE        DATE not null,
  USRDATA        VARCHAR2(32) not null,
  NXTPRF         VARCHAR2(10) not null,
  CMPNOINT       CHAR(15) default '000000000000000' not null,
  LATEPAYPENMTHD NUMBER(5) not null,
  EXPFULLCHBAL   NUMBER(1) default 0 not null,
  INTRDATE       NUMBER(5) default 1 not null,
  CCSFEECMP      NUMBER(5) default 10 not null,
  CLASSID        NUMBER(5) default 2 not null,
  CSHPPLANCMP    NUMBER(5) default 8 not null,
  OTHPPLANCMP    NUMBER(5) default 9 not null,
  INSTINTCMP     NUMBER(5) default 7 not null,
  CSHDUEINSTCMP  NUMBER(5) default 10 not null,
  OTHDUEINSTCMP  NUMBER(5) default 11 not null,
  INCLINSTBAL    NUMBER(5) default 1 not null,
  DFLTPPLIMIT    FLOAT default 0.0 not null,
  CLSFLAGS       VARCHAR2(8) default '00      ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCHRGPROF on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCHRGPROF (INST_ID, CHRGPRFID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSCHRGPROF_I_C_C on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCHRGPROF (INST_ID, CHRGPRFID, CLASSID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCMPDESCR
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCMPDESCR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  CHRGPRFID VARCHAR2(10) not null,
  COMP_CODE NUMBER(5) not null,
  LANG      CHAR(2) not null,
  DESCR     VARCHAR2(50) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCMPDESCR on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCMPDESCR (INST_ID, CHRGPRFID, COMP_CODE, LANG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCMPDET
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCMPDET
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  INST_ID       NUMBER(10) default 0 not null,
  CHRGPRFID     VARCHAR2(10) not null,
  SCHEME        CHAR(4) not null,
  COMP_CODE     NUMBER(5) not null,
  CMPRATE0      FLOAT not null,
  CMPRATE1      FLOAT not null,
  CMPRATE2      FLOAT not null,
  CMPINTMTHD    NUMBER(5) not null,
  CMPPERCMINPAY FLOAT not null,
  CMPFLAGS      VARCHAR2(16) not null,
  CMPGRP        CHAR(3) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCMPDET on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCMPDET (INST_ID, CHRGPRFID, SCHEME, COMP_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCORPACCREL
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCORPACCREL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  PRNTACCID NUMBER(10) not null,
  CHLDACCID NUMBER(10) not null,
  FLAGS     VARCHAR2(8) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCORPACCREL on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCORPACCREL (CHLDACCID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCRITEMLOG
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCRITEMLOG
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ITEM_ID         NUMBER(20) not null,
  AMOUNT          FLOAT not null,
  CURRCODE        CHAR(3) not null,
  CMP0BAL         FLOAT not null,
  CMP1BAL         FLOAT not null,
  CMP2BAL         FLOAT not null,
  CMP3BAL         FLOAT not null,
  CMP4BAL         FLOAT not null,
  CMP5BAL         FLOAT not null,
  CMP6BAL         FLOAT not null,
  CMP7BAL         FLOAT not null,
  CMP8BAL         FLOAT not null,
  CMP9BAL         FLOAT not null,
  CMP10BAL        FLOAT default 0 not null,
  CMP11BAL        FLOAT default 0 not null,
  CMP12BAL        FLOAT default 0 not null,
  CMP13BAL        FLOAT default 0 not null,
  CMP14BAL        FLOAT default 0 not null,
  SURPLUS         FLOAT not null,
  BAL_DEBIT_PAY   FLOAT not null,
  MINPAY          FLOAT not null,
  SURPLUSND       FLOAT default 0 not null,
  BAL_DEBIT_PAYND FLOAT default 0 not null,
  SURPLUSDUE      NUMBER(16,4) default 0.0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCRITEMLOG on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCRITEMLOG (ITEM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCRSP
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCRSP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  CHRGPRFID VARCHAR2(10) not null,
  CRSPTYPE  NUMBER(5) not null,
  FIRST     NUMBER(5) not null,
  SBSQNT    NUMBER(5) not null,
  MAXCREATE NUMBER(5) not null,
  CONDITION VARCHAR2(16) not null,
  SBSQNT1   NUMBER(5) default 10 not null,
  SBSQNT2   NUMBER(5) default 10 not null,
  SBSQNT3   NUMBER(5) default 10 not null,
  SBSQNT4   NUMBER(5) default 10 not null,
  SBSQNT5   NUMBER(5) default 10 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSCYCLE
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSCYCLE
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  INST_ID            NUMBER(10) default 0 not null,
  CYCLECODE          VARCHAR2(10) not null,
  DESCR              VARCHAR2(50) not null,
  CYCLES_PER_MONTH   NUMBER(5) not null,
  CYCLE_DAY          NUMBER(5) not null,
  DATE_CYCLE_START   DATE not null,
  DATE_CYCLE_END     DATE not null,
  STATMNT_DAY_OFFSET NUMBER(5) not null,
  PAY_BY_DATE_OFFSET NUMBER(5) not null,
  GRACE_DAYS_OFFSET  NUMBER(5) not null,
  CYCLE_COUNT        NUMBER(10) not null,
  DATE_ORG_START     DATE not null,
  CALID              CHAR(4) not null,
  DATE_PAY           DATE not null,
  DDOFFSET           NUMBER(5) default 0 not null,
  PBDDAYOFMONTH      NUMBER(5) default 1 not null,
  PBDMTHD            NUMBER(5) default 1 not null,
  PBDCOLLOFFSET      NUMBER(5) default 0 not null,
  FROM_CYCLECODE     VARCHAR2(10) default ' ' not null,
  TO_CYCLECODE       VARCHAR2(10) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSCYCLE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSCYCLE (INST_ID, CYCLECODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDBPRIO
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDBPRIO
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  DBPRIOSETID NUMBER(5) not null,
  INST_ID     NUMBER(10) default 0 not null,
  CHRGPRFID   VARCHAR2(10) not null,
  DESCR       VARCHAR2(50) not null,
  CMP0CYC0    NUMBER(5) not null,
  CMP0CYC1    NUMBER(5) not null,
  CMP0CYC2    NUMBER(5) not null,
  CMP1CYC0    NUMBER(5) not null,
  CMP1CYC1    NUMBER(5) not null,
  CMP1CYC2    NUMBER(5) not null,
  CMP2CYC0    NUMBER(5) not null,
  CMP2CYC1    NUMBER(5) not null,
  CMP2CYC2    NUMBER(5) not null,
  CMP3CYC0    NUMBER(5) not null,
  CMP3CYC1    NUMBER(5) not null,
  CMP3CYC2    NUMBER(5) not null,
  CMP4CYC0    NUMBER(5) not null,
  CMP4CYC1    NUMBER(5) not null,
  CMP4CYC2    NUMBER(5) not null,
  CMP5CYC0    NUMBER(5) not null,
  CMP5CYC1    NUMBER(5) not null,
  CMP5CYC2    NUMBER(5) not null,
  CMP6CYC0    NUMBER(5) not null,
  CMP6CYC1    NUMBER(5) not null,
  CMP6CYC2    NUMBER(5) not null,
  CMP7CYC0    NUMBER(5) not null,
  CMP7CYC1    NUMBER(5) not null,
  CMP7CYC2    NUMBER(5) not null,
  CMP8CYC0    NUMBER(5) not null,
  CMP8CYC1    NUMBER(5) not null,
  CMP8CYC2    NUMBER(5) not null,
  CMP9CYC0    NUMBER(5) not null,
  CMP9CYC1    NUMBER(5) not null,
  CMP9CYC2    NUMBER(5) not null,
  CMP10CYC0   NUMBER(5) default 0 not null,
  CMP10CYC1   NUMBER(5) default 0 not null,
  CMP10CYC2   NUMBER(5) default 0 not null,
  CMP11CYC0   NUMBER(5) default 0 not null,
  CMP11CYC1   NUMBER(5) default 0 not null,
  CMP11CYC2   NUMBER(5) default 0 not null,
  CMP12CYC0   NUMBER(5) default 0 not null,
  CMP12CYC1   NUMBER(5) default 0 not null,
  CMP12CYC2   NUMBER(5) default 0 not null,
  CMP13CYC0   NUMBER(5) default 0 not null,
  CMP13CYC1   NUMBER(5) default 0 not null,
  CMP13CYC2   NUMBER(5) default 0 not null,
  CMP14CYC0   NUMBER(5) default 0 not null,
  CMP14CYC1   NUMBER(5) default 0 not null,
  CMP14CYC2   NUMBER(5) default 0 not null,
  PIOFLAGS    VARCHAR2(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDBPRIO on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDBPRIO (INST_ID, CHRGPRFID, DBPRIOSETID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDDREQAMT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDREQAMT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  INST_ID    NUMBER(10) default 0 not null,
  ACC_ID     NUMBER(10) not null,
  DATE_END   DATE not null,
  AMT        FLOAT not null,
  CURRCODE   CHAR(3) not null,
  DDACCNO    VARCHAR2(28) not null,
  DDCURRCODE CHAR(3) not null,
  POSTED     NUMBER(10) not null,
  DATE_VALUE DATE default to_date('31082263','DDMMYYYY') not null,
  EXTRACTED  INTEGER default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDDREQAMT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDREQAMT (ACC_ID, DATE_VALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSDDREQAMT_DATE_END on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDREQAMT (DATE_END)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSDDREQAMT_DATE_VALUE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDREQAMT (INST_ID, DATE_VALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDDRULE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDRULE
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ACC_ID        NUMBER(10) default 0 not null,
  DDVALTYPE     NUMBER(5) not null,
  MINIMUM       FLOAT not null,
  DDACCNO       VARCHAR2(28) not null,
  DDCURRCODE    CHAR(3) not null,
  PURGEDATE     DATE not null,
  DDVDATEOFFSET NUMBER(10) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDDRULE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDRULE (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSDDRULE_DDACCNO_DDCURRCO on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDDRULE (DDACCNO, DDCURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDLNQDATE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDLNQDATE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACC_ID    NUMBER(10) not null,
  INST_ID   NUMBER(10) default 0 not null,
  DLNQDATE  DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDLNQDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDLNQDATE (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSDLNQDATE_DLNQDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDLNQDATE (DLNQDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDLNQPROF
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDLNQPROF
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  INST_ID            NUMBER(10) default 0 not null,
  CHRGPRFID          VARCHAR2(10) not null,
  SCHEME             CHAR(4) not null,
  DLNQLVL            NUMBER(5) not null,
  ACCSTATCODE        CHAR(2) not null,
  PENALTY_OVER_LIMIT FLOAT not null,
  PENALTY_LATE_PAY   FLOAT not null,
  AMT_MIN_PAY_FLOOR  FLOAT not null,
  DBPRIOSETID        NUMBER(5) not null,
  INTEREST           CHAR(10) not null,
  COLLECTION         CHAR(1) not null,
  STATEMENT1         CHAR(1) not null,
  REPORT             CHAR(1) not null,
  DLNQFLAGS          VARCHAR2(16) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDLNQPROF on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDLNQPROF (INST_ID, CHRGPRFID, SCHEME, DLNQLVL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUEAGECMP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGECMP
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ACC_ID     NUMBER(10) not null,
  CYCLE0CMP0 NUMBER(12,4) default 0 not null,
  CYCLE1CMP0 NUMBER(12,4) default 0 not null,
  CYCLE2CMP0 NUMBER(12,4) default 0 not null,
  CYCLE3CMP0 NUMBER(12,4) default 0 not null,
  CYCLE4CMP0 NUMBER(12,4) default 0 not null,
  CYCLE5CMP0 NUMBER(12,4) default 0 not null,
  CYCLE6CMP0 NUMBER(12,4) default 0 not null,
  CYCLE0CMP1 NUMBER(12,4) default 0 not null,
  CYCLE1CMP1 NUMBER(12,4) default 0 not null,
  CYCLE2CMP1 NUMBER(12,4) default 0 not null,
  CYCLE3CMP1 NUMBER(12,4) default 0 not null,
  CYCLE4CMP1 NUMBER(12,4) default 0 not null,
  CYCLE5CMP1 NUMBER(12,4) default 0 not null,
  CYCLE6CMP1 NUMBER(12,4) default 0 not null,
  CYCLE0CMP2 NUMBER(12,4) default 0 not null,
  CYCLE1CMP2 NUMBER(12,4) default 0 not null,
  CYCLE2CMP2 NUMBER(12,4) default 0 not null,
  CYCLE3CMP2 NUMBER(12,4) default 0 not null,
  CYCLE4CMP2 NUMBER(12,4) default 0 not null,
  CYCLE5CMP2 NUMBER(12,4) default 0 not null,
  CYCLE6CMP2 NUMBER(12,4) default 0 not null,
  CYCLE0CMP3 NUMBER(12,4) default 0 not null,
  CYCLE1CMP3 NUMBER(12,4) default 0 not null,
  CYCLE2CMP3 NUMBER(12,4) default 0 not null,
  CYCLE3CMP3 NUMBER(12,4) default 0 not null,
  CYCLE4CMP3 NUMBER(12,4) default 0 not null,
  CYCLE5CMP3 NUMBER(12,4) default 0 not null,
  CYCLE6CMP3 NUMBER(12,4) default 0 not null,
  CYCLE0CMP4 NUMBER(12,4) default 0 not null,
  CYCLE1CMP4 NUMBER(12,4) default 0 not null,
  CYCLE2CMP4 NUMBER(12,4) default 0 not null,
  CYCLE3CMP4 NUMBER(12,4) default 0 not null,
  CYCLE4CMP4 NUMBER(12,4) default 0 not null,
  CYCLE5CMP4 NUMBER(12,4) default 0 not null,
  CYCLE6CMP4 NUMBER(12,4) default 0 not null,
  CYCLE0CMP5 NUMBER(12,4) default 0 not null,
  CYCLE1CMP5 NUMBER(12,4) default 0 not null,
  CYCLE2CMP5 NUMBER(12,4) default 0 not null,
  CYCLE3CMP5 NUMBER(12,4) default 0 not null,
  CYCLE4CMP5 NUMBER(12,4) default 0 not null,
  CYCLE5CMP5 NUMBER(12,4) default 0 not null,
  CYCLE6CMP5 NUMBER(12,4) default 0 not null,
  CYCLE0CMP6 NUMBER(12,4) default 0 not null,
  CYCLE1CMP6 NUMBER(12,4) default 0 not null,
  CYCLE2CMP6 NUMBER(12,4) default 0 not null,
  CYCLE3CMP6 NUMBER(12,4) default 0 not null,
  CYCLE4CMP6 NUMBER(12,4) default 0 not null,
  CYCLE5CMP6 NUMBER(12,4) default 0 not null,
  CYCLE6CMP6 NUMBER(12,4) default 0 not null,
  CYCLE0CMP7 NUMBER(12,4) default 0 not null,
  CYCLE1CMP7 NUMBER(12,4) default 0 not null,
  CYCLE2CMP7 NUMBER(12,4) default 0 not null,
  CYCLE3CMP7 NUMBER(12,4) default 0 not null,
  CYCLE4CMP7 NUMBER(12,4) default 0 not null,
  CYCLE5CMP7 NUMBER(12,4) default 0 not null,
  CYCLE6CMP7 NUMBER(12,4) default 0 not null,
  CYCLE0CMP8 NUMBER(12,4) default 0 not null,
  CYCLE1CMP8 NUMBER(12,4) default 0 not null,
  CYCLE2CMP8 NUMBER(12,4) default 0 not null,
  CYCLE3CMP8 NUMBER(12,4) default 0 not null,
  CYCLE4CMP8 NUMBER(12,4) default 0 not null,
  CYCLE5CMP8 NUMBER(12,4) default 0 not null,
  CYCLE6CMP8 NUMBER(12,4) default 0 not null,
  CYCLE0CMP9 NUMBER(12,4) default 0 not null,
  CYCLE1CMP9 NUMBER(12,4) default 0 not null,
  CYCLE2CMP9 NUMBER(12,4) default 0 not null,
  CYCLE3CMP9 NUMBER(12,4) default 0 not null,
  CYCLE4CMP9 NUMBER(12,4) default 0 not null,
  CYCLE5CMP9 NUMBER(12,4) default 0 not null,
  CYCLE6CMP9 NUMBER(12,4) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUEAGECMP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGECMP (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUEAGECMPSNP
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGECMPSNP
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  SNAPDATE   DATE default to_date('31082263','DDMMYYYY') not null,
  ACC_ID     NUMBER(10) not null,
  CYCLE0CMP0 NUMBER(12,4) default 0 not null,
  CYCLE1CMP0 NUMBER(12,4) default 0 not null,
  CYCLE2CMP0 NUMBER(12,4) default 0 not null,
  CYCLE3CMP0 NUMBER(12,4) default 0 not null,
  CYCLE4CMP0 NUMBER(12,4) default 0 not null,
  CYCLE5CMP0 NUMBER(12,4) default 0 not null,
  CYCLE6CMP0 NUMBER(12,4) default 0 not null,
  CYCLE0CMP1 NUMBER(12,4) default 0 not null,
  CYCLE1CMP1 NUMBER(12,4) default 0 not null,
  CYCLE2CMP1 NUMBER(12,4) default 0 not null,
  CYCLE3CMP1 NUMBER(12,4) default 0 not null,
  CYCLE4CMP1 NUMBER(12,4) default 0 not null,
  CYCLE5CMP1 NUMBER(12,4) default 0 not null,
  CYCLE6CMP1 NUMBER(12,4) default 0 not null,
  CYCLE0CMP2 NUMBER(12,4) default 0 not null,
  CYCLE1CMP2 NUMBER(12,4) default 0 not null,
  CYCLE2CMP2 NUMBER(12,4) default 0 not null,
  CYCLE3CMP2 NUMBER(12,4) default 0 not null,
  CYCLE4CMP2 NUMBER(12,4) default 0 not null,
  CYCLE5CMP2 NUMBER(12,4) default 0 not null,
  CYCLE6CMP2 NUMBER(12,4) default 0 not null,
  CYCLE0CMP3 NUMBER(12,4) default 0 not null,
  CYCLE1CMP3 NUMBER(12,4) default 0 not null,
  CYCLE2CMP3 NUMBER(12,4) default 0 not null,
  CYCLE3CMP3 NUMBER(12,4) default 0 not null,
  CYCLE4CMP3 NUMBER(12,4) default 0 not null,
  CYCLE5CMP3 NUMBER(12,4) default 0 not null,
  CYCLE6CMP3 NUMBER(12,4) default 0 not null,
  CYCLE0CMP4 NUMBER(12,4) default 0 not null,
  CYCLE1CMP4 NUMBER(12,4) default 0 not null,
  CYCLE2CMP4 NUMBER(12,4) default 0 not null,
  CYCLE3CMP4 NUMBER(12,4) default 0 not null,
  CYCLE4CMP4 NUMBER(12,4) default 0 not null,
  CYCLE5CMP4 NUMBER(12,4) default 0 not null,
  CYCLE6CMP4 NUMBER(12,4) default 0 not null,
  CYCLE0CMP5 NUMBER(12,4) default 0 not null,
  CYCLE1CMP5 NUMBER(12,4) default 0 not null,
  CYCLE2CMP5 NUMBER(12,4) default 0 not null,
  CYCLE3CMP5 NUMBER(12,4) default 0 not null,
  CYCLE4CMP5 NUMBER(12,4) default 0 not null,
  CYCLE5CMP5 NUMBER(12,4) default 0 not null,
  CYCLE6CMP5 NUMBER(12,4) default 0 not null,
  CYCLE0CMP6 NUMBER(12,4) default 0 not null,
  CYCLE1CMP6 NUMBER(12,4) default 0 not null,
  CYCLE2CMP6 NUMBER(12,4) default 0 not null,
  CYCLE3CMP6 NUMBER(12,4) default 0 not null,
  CYCLE4CMP6 NUMBER(12,4) default 0 not null,
  CYCLE5CMP6 NUMBER(12,4) default 0 not null,
  CYCLE6CMP6 NUMBER(12,4) default 0 not null,
  CYCLE0CMP7 NUMBER(12,4) default 0 not null,
  CYCLE1CMP7 NUMBER(12,4) default 0 not null,
  CYCLE2CMP7 NUMBER(12,4) default 0 not null,
  CYCLE3CMP7 NUMBER(12,4) default 0 not null,
  CYCLE4CMP7 NUMBER(12,4) default 0 not null,
  CYCLE5CMP7 NUMBER(12,4) default 0 not null,
  CYCLE6CMP7 NUMBER(12,4) default 0 not null,
  CYCLE0CMP8 NUMBER(12,4) default 0 not null,
  CYCLE1CMP8 NUMBER(12,4) default 0 not null,
  CYCLE2CMP8 NUMBER(12,4) default 0 not null,
  CYCLE3CMP8 NUMBER(12,4) default 0 not null,
  CYCLE4CMP8 NUMBER(12,4) default 0 not null,
  CYCLE5CMP8 NUMBER(12,4) default 0 not null,
  CYCLE6CMP8 NUMBER(12,4) default 0 not null,
  CYCLE0CMP9 NUMBER(12,4) default 0 not null,
  CYCLE1CMP9 NUMBER(12,4) default 0 not null,
  CYCLE2CMP9 NUMBER(12,4) default 0 not null,
  CYCLE3CMP9 NUMBER(12,4) default 0 not null,
  CYCLE4CMP9 NUMBER(12,4) default 0 not null,
  CYCLE5CMP9 NUMBER(12,4) default 0 not null,
  CYCLE6CMP9 NUMBER(12,4) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUEAGECMPSNP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGECMPSNP (ACC_ID, SNAPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSDUEAGECMPSNP_SNAPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGECMPSNP (SNAPDATE, ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUEAGEDET
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGEDET
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ACC_ID       NUMBER(10) not null,
  PAYBYDATE0   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE1   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE2   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE3   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE4   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE5   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE6   DATE default to_date('31082263','DDMMYYYY') not null,
  AMTOVLIMCYC0 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC1 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC2 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC3 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC4 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC5 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC6 NUMBER(12,4) default 0 not null,
  AMTTOTAL0    NUMBER(12,4) default 0 not null,
  AMTTOTAL1    NUMBER(12,4) default 0 not null,
  AMTTOTAL2    NUMBER(12,4) default 0 not null,
  AMTTOTAL3    NUMBER(12,4) default 0 not null,
  AMTTOTAL4    NUMBER(12,4) default 0 not null,
  AMTTOTAL5    NUMBER(12,4) default 0 not null,
  AMTTOTAL6    NUMBER(12,4) default 0 not null,
  DUEDATE0     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE1     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE2     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE3     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE4     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE5     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE6     DATE default to_date('31082263','DDMMYYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUEAGEDET on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGEDET (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUEAGEDETSNP
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGEDETSNP
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  SNAPDATE     DATE default to_date('31082263','DDMMYYYY') not null,
  ACC_ID       NUMBER(10) not null,
  PAYBYDATE0   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE1   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE2   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE3   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE4   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE5   DATE default to_date('31082263','DDMMYYYY') not null,
  PAYBYDATE6   DATE default to_date('31082263','DDMMYYYY') not null,
  AMTOVLIMCYC0 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC1 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC2 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC3 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC4 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC5 NUMBER(12,4) default 0 not null,
  AMTOVLIMCYC6 NUMBER(12,4) default 0 not null,
  AMTTOTAL0    NUMBER(12,4) default 0 not null,
  AMTTOTAL1    NUMBER(12,4) default 0 not null,
  AMTTOTAL2    NUMBER(12,4) default 0 not null,
  AMTTOTAL3    NUMBER(12,4) default 0 not null,
  AMTTOTAL4    NUMBER(12,4) default 0 not null,
  AMTTOTAL5    NUMBER(12,4) default 0 not null,
  AMTTOTAL6    NUMBER(12,4) default 0 not null,
  DUEDATE0     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE1     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE2     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE3     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE4     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE5     DATE default to_date('31082263','DDMMYYYY') not null,
  DUEDATE6     DATE default to_date('31082263','DDMMYYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUEAGEDETSNP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGEDETSNP (ACC_ID, SNAPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSDUEAGEDETSNP_SNAPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUEAGEDETSNP (SNAPDATE, ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUECMP
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUECMP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACC_ID    NUMBER(10) not null,
  BANDCUR0  NUMBER(12,4) default 0.0 not null,
  BANDPRV0  NUMBER(12,4) default 0.0 not null,
  BANDOLD0  NUMBER(12,4) default 0.0 not null,
  BANDCUR1  NUMBER(12,4) default 0.0 not null,
  BANDPRV1  NUMBER(12,4) default 0.0 not null,
  BANDOLD1  NUMBER(12,4) default 0.0 not null,
  BANDCUR2  NUMBER(12,4) default 0.0 not null,
  BANDPRV2  NUMBER(12,4) default 0.0 not null,
  BANDOLD2  NUMBER(12,4) default 0.0 not null,
  BANDCUR3  NUMBER(12,4) default 0.0 not null,
  BANDPRV3  NUMBER(12,4) default 0.0 not null,
  BANDOLD3  NUMBER(12,4) default 0.0 not null,
  BANDCUR4  NUMBER(12,4) default 0.0 not null,
  BANDPRV4  NUMBER(12,4) default 0.0 not null,
  BANDOLD4  NUMBER(12,4) default 0.0 not null,
  BANDCUR5  NUMBER(12,4) default 0.0 not null,
  BANDPRV5  NUMBER(12,4) default 0.0 not null,
  BANDOLD5  NUMBER(12,4) default 0.0 not null,
  BANDCUR6  NUMBER(12,4) default 0.0 not null,
  BANDPRV6  NUMBER(12,4) default 0.0 not null,
  BANDOLD6  NUMBER(12,4) default 0.0 not null,
  BANDCUR7  NUMBER(12,4) default 0.0 not null,
  BANDPRV7  NUMBER(12,4) default 0.0 not null,
  BANDOLD7  NUMBER(12,4) default 0.0 not null,
  BANDCUR8  NUMBER(12,4) default 0.0 not null,
  BANDPRV8  NUMBER(12,4) default 0.0 not null,
  BANDOLD8  NUMBER(12,4) default 0.0 not null,
  BANDCUR9  NUMBER(12,4) default 0.0 not null,
  BANDPRV9  NUMBER(12,4) default 0.0 not null,
  BANDOLD9  NUMBER(12,4) default 0.0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUECMP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUECMP (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSDUECMPSNP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUECMPSNP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SNAPDATE  DATE default to_date('31082263','DDMMYYYY') not null,
  ACC_ID    NUMBER(10) not null,
  BANDCUR0  NUMBER(12,4) default 0 not null,
  BANDPRV0  NUMBER(12,4) default 0 not null,
  BANDOLD0  NUMBER(12,4) default 0 not null,
  BANDCUR1  NUMBER(12,4) default 0 not null,
  BANDPRV1  NUMBER(12,4) default 0 not null,
  BANDOLD1  NUMBER(12,4) default 0 not null,
  BANDCUR2  NUMBER(12,4) default 0 not null,
  BANDPRV2  NUMBER(12,4) default 0 not null,
  BANDOLD2  NUMBER(12,4) default 0 not null,
  BANDCUR3  NUMBER(12,4) default 0 not null,
  BANDPRV3  NUMBER(12,4) default 0 not null,
  BANDOLD3  NUMBER(12,4) default 0 not null,
  BANDCUR4  NUMBER(12,4) default 0 not null,
  BANDPRV4  NUMBER(12,4) default 0 not null,
  BANDOLD4  NUMBER(12,4) default 0 not null,
  BANDCUR5  NUMBER(12,4) default 0 not null,
  BANDPRV5  NUMBER(12,4) default 0 not null,
  BANDOLD5  NUMBER(12,4) default 0 not null,
  BANDCUR6  NUMBER(12,4) default 0 not null,
  BANDPRV6  NUMBER(12,4) default 0 not null,
  BANDOLD6  NUMBER(12,4) default 0 not null,
  BANDCUR7  NUMBER(12,4) default 0 not null,
  BANDPRV7  NUMBER(12,4) default 0 not null,
  BANDOLD7  NUMBER(12,4) default 0 not null,
  BANDCUR8  NUMBER(12,4) default 0 not null,
  BANDPRV8  NUMBER(12,4) default 0 not null,
  BANDOLD8  NUMBER(12,4) default 0 not null,
  BANDCUR9  NUMBER(12,4) default 0 not null,
  BANDPRV9  NUMBER(12,4) default 0 not null,
  BANDOLD9  NUMBER(12,4) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSDUECMPSNP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUECMPSNP (ACC_ID, SNAPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSDUECMPSNP_SNAPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSDUECMPSNP (SNAPDATE, ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSEVENTTYPE
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSEVENTTYPE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  EVTYPE    NUMBER(5) not null,
  EVCLASS   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSEVENTTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSEVENTTYPE (EVTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CCSFEE
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSFEE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  FEESET    NUMBER(5) not null,
  FEETYPE   NUMBER(5) not null,
  FLAT_AMT  FLOAT not null,
  PERCENT   FLOAT not null,
  MIN_AMT   FLOAT not null,
  MAX_AMT   FLOAT not null,
  COND1     NUMBER(5) not null,
  COND2     VARCHAR2(32) not null,
  DESCR     VARCHAR2(64) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSFEE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSFEE (INST_ID, FEESET, FEETYPE, COND1, COND2)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSFEESET
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSFEESET
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  FEESET    NUMBER(5) not null,
  CURRCODE  CHAR(3) not null,
  DESCR     VARCHAR2(64) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSFEESET on OPS$YUFU_CHINA_PS_RUN_BAK.CCSFEESET (INST_ID, FEESET)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSITEM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ITEM_ID      NUMBER(20) not null,
  TXN_ID       NUMBER(20) not null,
  ACC_ID       NUMBER(10) not null,
  ACCNO        VARCHAR2(28) not null,
  INST_ID      NUMBER(10) default 0 not null,
  CURRCODE     CHAR(3) not null,
  CURTXN       CHAR(3) not null,
  DATELOCAL    DATE not null,
  DATEXMIT     DATE not null,
  TIMEXMIT     NUMBER(10) not null,
  CTXDATE      DATE not null,
  DATETXN      DATE not null,
  AMTBILL      FLOAT not null,
  AMTTXN       FLOAT not null,
  AMTUNSET     FLOAT not null,
  DESCRIPTION  VARCHAR2(255) not null,
  TXNCODE      NUMBER(5) not null,
  TXNSTATUS    NUMBER(5) not null,
  FNCODE       NUMBER(5) not null,
  MSGCLS       CHAR(1) not null,
  MSGFN        CHAR(1) not null,
  TXNSRC       CHAR(1) not null,
  PAN          VARCHAR2(19) not null,
  CRDSEQNO     NUMBER(5) not null,
  CRDACPTBUS   NUMBER(5) not null,
  CRDACPTID    VARCHAR2(15) not null,
  AIID         VARCHAR2(11) not null,
  ACQCOUNTRY   CHAR(3) not null,
  COMP_CODE    NUMBER(5) not null,
  CYCLECODE    VARCHAR2(10) not null,
  CYCLE_COUNT  NUMBER(10) not null,
  POSTED       NUMBER(5) not null,
  STAN         NUMBER(10) not null,
  RRN          CHAR(12) not null,
  CRDACPTLOC   VARCHAR2(64) not null,
  CHRG_SESSION NUMBER(5) not null,
  CHRG_SEQNO   NUMBER(10) not null,
  ITEMTYPE     NUMBER(5) not null,
  SURPDEBIT    FLOAT default 0 not null,
  AFE          VARCHAR2(8) default ' ' not null,
  IFE          VARCHAR2(8) default ' ' not null,
  REFTYPE      NUMBER(10) default 0 not null,
  GLPOSTED     NUMBER(5) not null,
  TERMCODE     VARCHAR2(16) default ' ' not null,
  APPLRULE     NUMBER(5) default 0 not null,
  STMTITEM     NUMBER(5) default 1 not null,
  USRDATA      VARCHAR2(16) default ' ' not null,
  ITEMFLAGS    VARCHAR2(8) default ' ' not null,
  AUTHACCNO    VARCHAR2(28) default ' ' not null,
  ACCNO2       VARCHAR2(28) default ' ' not null,
  AMTSET       FLOAT default 0 not null,
  CURSET       CHAR(3) default ' ' not null,
  APPLSEQ      NUMBER(10) default 0 not null,
  INTRDATE     DATE default to_date('31082263','DDMMYYYY') not null,
  BTCHTYPE     NUMBER(5) default 99 not null,
  DESCRIPTION2 VARCHAR2(255) default ' ' not null,
  DESCRIPTION3 VARCHAR2(255) default ' ' not null,
  PAN_DISPLAY  VARCHAR2(19) default ' ' not null,
  INDATEREC    DATE default to_date('31082263','DDMMYYYY') not null,
  DATESET      DATE default to_date('31082263','DDMMYYYY') not null,
  INBTCHTYPE   NUMBER(5) default 0 not null,
  ITEMCAT      VARCHAR2(255) default ' ' not null,
  TXNAUTH_ID   NUMBER(20) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSITEM on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (ITEM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_ACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (INST_ID, ACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_ACC_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (ACC_ID, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_AUTHACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (INST_ID, AUTHACCNO, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (PAN, CRDSEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_SYSDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (CTXDATE, TXNSTATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSITEM_TXNSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (CTXDATE, TXNSTATUS, ACC_ID, DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSITEM_DATEXMIT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM (DATEXMIT, ITEM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSITEMREF
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEMREF
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CCSDATE    DATE not null,
  ITEM_ID    NUMBER(20) not null,
  ITEMTYPE   NUMBER(5) not null,
  REFCODE    VARCHAR2(64) not null,
  ITEMSOURCE VARCHAR2(8) not null,
  VERSION    NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSITEMREF on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEMREF (ITEMSOURCE, REFCODE, ITEMTYPE, VERSION)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSITEMREVHIST
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEMREVHIST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ORGITEMID NUMBER(10) not null,
  CTXDATE   DATE not null,
  REVITEMID NUMBER(10) not null,
  REVDESCR  VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSITEMREV_HIST_REVITEMID on OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEMREVHIST (REVITEMID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSMINPYHIST
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSMINPYHIST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACC_ID    NUMBER(10) not null,
  DLNQFLG0  NUMBER(5) not null,
  MINPAY0   FLOAT not null,
  CMP1CYC0  FLOAT not null,
  CMP3CYC0  FLOAT not null,
  DLNQFLG1  NUMBER(5) not null,
  MINPAY1   FLOAT not null,
  CMP1CYC1  FLOAT not null,
  CMP3CYC1  FLOAT not null,
  DLNQFLG2  NUMBER(5) not null,
  MINPAY2   FLOAT not null,
  CMP1CYC2  FLOAT not null,
  CMP3CYC2  FLOAT not null,
  DLNQFLG3  NUMBER(5) not null,
  MINPAY3   FLOAT not null,
  CMP1CYC3  FLOAT not null,
  CMP3CYC3  FLOAT not null,
  DLNQFLG4  NUMBER(5) not null,
  MINPAY4   FLOAT not null,
  CMP1CYC4  FLOAT not null,
  CMP3CYC4  FLOAT not null,
  DLNQFLG5  NUMBER(5) not null,
  MINPAY5   FLOAT not null,
  CMP1CYC5  FLOAT not null,
  CMP3CYC5  FLOAT not null,
  DLNQFLG6  NUMBER(5) not null,
  MINPAY6   FLOAT not null,
  CMP1CYC6  FLOAT not null,
  CMP3CYC6  FLOAT not null,
  PHSTFLGS  CHAR(8) not null,
  DATE_PAY0 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY1 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY2 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY3 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY4 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY5 DATE default to_date('31082263','DDMMYYYY') not null,
  DATE_PAY6 DATE default to_date('31082263','DDMMYYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSMINPYHIST on OPS$YUFU_CHINA_PS_RUN_BAK.CCSMINPYHIST (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSMSC
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSC
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TAG       NVARCHAR2(25) not null,
  IDX       NUMBER(5) not null,
  MSCMODULE NCHAR(2) not null,
  DESCR     NVARCHAR2(64) not null,
  MASK      NUMBER(5) not null,
  STRING_T  NVARCHAR2(100) not null,
  LONG_T    NUMBER(10) not null,
  SHORT_T   NUMBER(5) not null,
  DOUBLE_T  NUMBER(12,4) not null,
  DATE_T    DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSMSC on OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSC (TAG, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSMSG
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  MSGID     NUMBER(5) not null,
  LANG      VARCHAR2(3) not null,
  MSGTXT    VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSMSG on OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSG (INST_ID, MSGID, LANG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSMSGTYPE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSGTYPE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  MSGID     NUMBER(5) not null,
  MSGCLASS  NUMBER(5) not null,
  MSGDESCR  VARCHAR2(64) not null,
  MSGPOS    NUMBER(5) not null,
  MSGPRIO   NUMBER(5) not null,
  EFFDATE   DATE not null,
  PURGEDATE DATE not null,
  CHRGPRFID VARCHAR2(10) not null,
  SCHEME    CHAR(4) not null,
  CNDTYPE   NUMBER(5) not null,
  CND1      NUMBER(5) not null,
  CND2      VARCHAR2(36) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSMSGTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSGTYPE (INST_ID, MSGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSMSGTYPE_DUPKEY on OPS$YUFU_CHINA_PS_RUN_BAK.CCSMSGTYPE (INST_ID, MSGCLASS, MSGPRIO, MSGPOS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSMVLOG
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSMVLOG
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  ACC_ID           NUMBER(10) default 0 not null,
  MVDATE           DATE not null,
  CUR_CREDIT_LIMIT FLOAT not null,
  CUR_BALANCE      FLOAT not null,
  CUR_AUTHOVR      FLOAT not null,
  CUR_DLNQLVL      NUMBER(5) not null,
  PRV_CREDIT_LIMIT FLOAT not null,
  PRV_BALANCE      FLOAT not null,
  PRV_AUTHOVR      FLOAT not null,
  PRV_DLNQLVL      NUMBER(5) not null,
  POSTED           NUMBER(5) not null,
  CUR_BALACTUAL    FLOAT default 0 not null,
  PRV_BALACTUAL    FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSNOTDUECMP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSNOTDUECMP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACC_ID    NUMBER(10) not null,
  BANDCUR0  NUMBER(12,4) default 0 not null,
  BANDPRV0  NUMBER(12,4) default 0 not null,
  BANDOLD0  NUMBER(12,4) default 0 not null,
  BANDCUR1  NUMBER(12,4) default 0 not null,
  BANDPRV1  NUMBER(12,4) default 0 not null,
  BANDOLD1  NUMBER(12,4) default 0 not null,
  BANDCUR2  NUMBER(12,4) default 0 not null,
  BANDPRV2  NUMBER(12,4) default 0 not null,
  BANDOLD2  NUMBER(12,4) default 0 not null,
  BANDCUR3  NUMBER(12,4) default 0 not null,
  BANDPRV3  NUMBER(12,4) default 0 not null,
  BANDOLD3  NUMBER(12,4) default 0 not null,
  BANDCUR4  NUMBER(12,4) default 0 not null,
  BANDPRV4  NUMBER(12,4) default 0 not null,
  BANDOLD4  NUMBER(12,4) default 0 not null,
  BANDCUR5  NUMBER(12,4) default 0 not null,
  BANDPRV5  NUMBER(12,4) default 0 not null,
  BANDOLD5  NUMBER(12,4) default 0 not null,
  BANDCUR6  NUMBER(12,4) default 0 not null,
  BANDPRV6  NUMBER(12,4) default 0 not null,
  BANDOLD6  NUMBER(12,4) default 0 not null,
  BANDCUR7  NUMBER(12,4) default 0 not null,
  BANDPRV7  NUMBER(12,4) default 0 not null,
  BANDOLD7  NUMBER(12,4) default 0 not null,
  BANDCUR8  NUMBER(12,4) default 0 not null,
  BANDPRV8  NUMBER(12,4) default 0 not null,
  BANDOLD8  NUMBER(12,4) default 0 not null,
  BANDCUR9  NUMBER(12,4) default 0 not null,
  BANDPRV9  NUMBER(12,4) default 0 not null,
  BANDOLD9  NUMBER(12,4) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSNOTDUECMP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSNOTDUECMP (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSNOTDUECMPSNP
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSNOTDUECMPSNP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SNAPDATE  DATE default to_date('31082263','DDMMYYYY') not null,
  ACC_ID    NUMBER(10) not null,
  BANDCUR0  NUMBER(12,4) default 0 not null,
  BANDPRV0  NUMBER(12,4) default 0 not null,
  BANDOLD0  NUMBER(12,4) default 0 not null,
  BANDCUR1  NUMBER(12,4) default 0 not null,
  BANDPRV1  NUMBER(12,4) default 0 not null,
  BANDOLD1  NUMBER(12,4) default 0 not null,
  BANDCUR2  NUMBER(12,4) default 0 not null,
  BANDPRV2  NUMBER(12,4) default 0 not null,
  BANDOLD2  NUMBER(12,4) default 0 not null,
  BANDCUR3  NUMBER(12,4) default 0 not null,
  BANDPRV3  NUMBER(12,4) default 0 not null,
  BANDOLD3  NUMBER(12,4) default 0 not null,
  BANDCUR4  NUMBER(12,4) default 0 not null,
  BANDPRV4  NUMBER(12,4) default 0 not null,
  BANDOLD4  NUMBER(12,4) default 0 not null,
  BANDCUR5  NUMBER(12,4) default 0 not null,
  BANDPRV5  NUMBER(12,4) default 0 not null,
  BANDOLD5  NUMBER(12,4) default 0 not null,
  BANDCUR6  NUMBER(12,4) default 0 not null,
  BANDPRV6  NUMBER(12,4) default 0 not null,
  BANDOLD6  NUMBER(12,4) default 0 not null,
  BANDCUR7  NUMBER(12,4) default 0 not null,
  BANDPRV7  NUMBER(12,4) default 0 not null,
  BANDOLD7  NUMBER(12,4) default 0 not null,
  BANDCUR8  NUMBER(12,4) default 0 not null,
  BANDPRV8  NUMBER(12,4) default 0 not null,
  BANDOLD8  NUMBER(12,4) default 0 not null,
  BANDCUR9  NUMBER(12,4) default 0 not null,
  BANDPRV9  NUMBER(12,4) default 0 not null,
  BANDOLD9  NUMBER(12,4) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSNOTDUECMPSNP on OPS$YUFU_CHINA_PS_RUN_BAK.CCSNOTDUECMPSNP (ACC_ID, SNAPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSNOTDUECMPSNP_SNAPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSNOTDUECMPSNP (SNAPDATE, ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSNXTSCHEME
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSNXTSCHEME
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  ACC_ID    NUMBER(10) not null,
  CHRGPRFID VARCHAR2(10) not null,
  SCHEME    CHAR(4) not null,
  TRANSDATE DATE not null,
  PENDING   NUMBER(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSNXTSCHEME on OPS$YUFU_CHINA_PS_RUN_BAK.CCSNXTSCHEME (ACC_ID, TRANSDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPAYPLAN
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPAYPLAN
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  INST_ID          NUMBER(10) default 0 not null,
  PPID             NUMBER(10) not null,
  PPSETID          NUMBER(10) not null,
  ACC_ID           NUMBER(10) not null,
  NUMINST          NUMBER(5) not null,
  STATUS           NUMBER(5) not null,
  EXPDATE          DATE not null,
  RATEBASIS        CHAR(1) not null,
  INTRATE          FLOAT default 0 not null,
  ITEM_ID          NUMBER(10) default 0 not null,
  INSTCOMPCODE     NUMBER(5) not null,
  DATELSTINST      DATE default to_date('31082263','DDMMYYYY') not null,
  PPSRC            NUMBER(5) default 0 not null,
  USR              VARCHAR2(15) default '' not null,
  CREATIONDATE     DATE not null,
  DESCR            VARCHAR2(128) not null,
  TXN_ID           NUMBER(10),
  AIID             VARCHAR2(11),
  RRN              CHAR(12),
  TXNCODE          NUMBER(5),
  AMTBILL          FLOAT,
  PAN              VARCHAR2(19) default '',
  SEQNO            NUMBER(5) default 0,
  NXTINSTALMENT    FLOAT default 0.0 not null,
  LSTINSTALMENT    FLOAT default 0.0 not null,
  INSTINTEREST     FLOAT default 0.0 not null,
  LSTINSTINTEREST  FLOAT default 0.0 not null,
  REMNUMINST       NUMBER(5) default 0 not null,
  INITDATE         DATE default to_date('31082263','DDMMYYYY') not null,
  AMTPLAN          FLOAT default 0.0 not null,
  DATELOCAL        DATE default to_date('31082263','DDMMYYYY') not null,
  CRDACPTLOC       VARCHAR2(64) default '' not null,
  CRDACPTBUS       NUMBER(5) default 0 not null,
  AMTTXN           FLOAT default 0 not null,
  CURTXN           CHAR(3) default '' not null,
  LSTINSTDATE      DATE default to_date('31082263','DDMMYYYY') not null,
  CNCLDATE         DATE default to_date('31082263','DDMMYYYY') not null,
  ITMCMPCODE       NUMBER(5) default -1 not null,
  PRGID            NUMBER(10) default -1 not null,
  PAN_DISPLAY      VARCHAR2(19) default ' ' not null,
  INSTCHRGCALCMTHD NUMBER(5) default 1 not null,
  CCSAPPRULE_ID    NUMBER(10)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPAYPLAN on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPAYPLAN (PPID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSPAYPLAN_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPAYPLAN (INST_ID, PAN, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSPAYPLAN_ST_SRC on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPAYPLAN (INST_ID, STATUS, PPSRC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPITEM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPITEM
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  PPID      NUMBER(10) not null,
  ITEM_ID   NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPITEM
  add constraint UNQ_CCSPPITEM_I_ITEM unique (INST_ID, ITEM_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPITEM on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPITEM (INST_ID, PPID, ITEM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPPROG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPPROG
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  PRGID      NUMBER(10) not null,
  INST_ID    NUMBER(10) default 0 not null,
  CHRGPRFID  VARCHAR2(10) not null,
  PRIORITY   NUMBER(5) not null,
  EFFDATE    DATE not null,
  PURGEDATE  DATE not null,
  PPSETID    NUMBER(10) not null,
  NUMINST    NUMBER(5) not null,
  AFE        VARCHAR2(8) not null,
  TXNCODE    NUMBER(5) not null,
  CRDACPTID  VARCHAR2(15) not null,
  MAXDLNQLVL NUMBER(5) not null,
  CNCLOFFSET NUMBER(5) not null,
  DESCR      VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPPROG on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPPROG (PRGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPSET
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSET
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  PPSETID          NUMBER(10) not null,
  INST_ID          NUMBER(10) default 0 not null,
  PPSETNAME        CHAR(4) not null,
  DESCRIPTION      VARCHAR2(64),
  STATUS           NUMBER(5) not null,
  RATE_BASIS       CHAR(1) not null,
  CURRCODE         CHAR(3) not null,
  LOWTHRESAMT      FLOAT default 0.0 not null,
  INSTCHRGCALCMTHD NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSET
  add constraint UNQ_CCSPPSET_PPSETID unique (INST_ID, PPSETNAME, CURRCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPSET on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSET (PPSETID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPSETAMT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETAMT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PPSETID   NUMBER(10) not null,
  AMTID     NUMBER(5) not null,
  THRESAMT  FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPSETAMT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETAMT (PPSETID, AMTID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPSETNUMINST
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETNUMINST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PPSETID   NUMBER(10) not null,
  NUMINSTID NUMBER(5) not null,
  NUMINST   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPSETNUMINST on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETNUMINST (PPSETID, NUMINSTID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSPPSETRATE
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETRATE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PPSETID   NUMBER(10) not null,
  NUMINSTID NUMBER(5) not null,
  AMTID     NUMBER(5) not null,
  INTRATE   FLOAT default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSPPSETRATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETRATE (PPSETID, NUMINSTID, AMTID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSRECONSTATS
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSRECONSTATS
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(5) not null,
  INST_ID   NUMBER(10) default 0 not null,
  CTXDATE   DATE not null,
  CHRGPRFID VARCHAR2(10) not null,
  SCHEME    CHAR(4) not null,
  CURRCODE  CHAR(3) not null,
  ITEMTYPE  NUMBER(5) not null,
  RECSTAT   NUMBER(5) not null,
  SUBTYPE2  VARCHAR2(3) not null,
  CREDITS   FLOAT not null,
  DEBITS    FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSRECONSTATS on OPS$YUFU_CHINA_PS_RUN_BAK.CCSRECONSTATS (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSRECONSTATS_DUPKEY on OPS$YUFU_CHINA_PS_RUN_BAK.CCSRECONSTATS (CTXDATE, INST_ID, CHRGPRFID, SCHEME, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSSCHEME
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSSCHEME
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  INST_ID           NUMBER(10) default 0 not null,
  CHRGPRFID         VARCHAR2(10) not null,
  SCHEME            CHAR(4) not null,
  DESCR             VARCHAR2(50) not null,
  OVRLIMBLKPRCNT    FLOAT not null,
  OVRLIMBLKSTAT     CHAR(2) not null,
  OVRLIMTOL         FLOAT not null,
  MINPAYTOL         FLOAT not null,
  CASHPRCNT         FLOAT not null,
  DLNQPONR          NUMBER(5) not null,
  SCHFLAGS          VARCHAR2(16) not null,
  USRDATA           VARCHAR2(32) not null,
  LATEPAYPENINT     FLOAT not null,
  PRJPENINTMIN      FLOAT not null,
  FEESET            NUMBER(5) default 0 not null,
  DLNQINCR          NUMBER(5) default 0 not null,
  LIMITCTRL         NUMBER(5) default 0 not null,
  SURPCNTRL         NUMBER(5) default 1 not null,
  DUECNTRL          NUMBER(5) default 1 not null,
  DEBTCNTRL         NUMBER(5) default 1 not null,
  OVLIMTYPE         NUMBER(5) default 1 not null,
  DFLTPPSET_ID      NUMBER(10) default 0 not null,
  PPCASHCNTRL       VARCHAR2(1) default '0' not null,
  DFLTPPLIMIT       FLOAT default -1 not null,
  SHDWLIMPRCNT      FLOAT default 0 not null,
  SHDWLIMAMT        NUMBER(16,4) default 0 not null,
  CREDITLIMITMAX    NUMBER(16,4) default -1 not null,
  MAXLIMITINCRPRCNT FLOAT default -1 not null,
  CLEDATESTAT       CHAR(2) default '00' not null,
  CLEDATEEXT        NUMBER(2) default 0 not null,
  CYCLE_CHANGE      NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSSCHEME on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSCHEME (INST_ID, CHRGPRFID, SCHEME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSSCHEMEMIG
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSSCHEMEMIG
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  INST_ID    NUMBER(10) default 0 not null,
  CHRGPRFID  VARCHAR2(10) not null,
  SCHEMEFROM CHAR(4) not null,
  SCHEMETO   CHAR(4) not null,
  EFFDATE    DATE not null,
  PURGEDATE  DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSSCHEMEMIG on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSCHEMEMIG (INST_ID, CHRGPRFID, SCHEMEFROM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSSTATEMENT
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTATEMENT
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  STMT_ID         NUMBER(10) not null,
  ACC_ID          NUMBER(10) not null,
  SEQUENCE_NO     NUMBER(5) not null,
  CYCLE_COUNT     NUMBER(10) not null,
  CREDIT_LIMIT    FLOAT not null,
  CREDITS         FLOAT not null,
  DEBITS          FLOAT not null,
  PAYMENTS        FLOAT not null,
  BAL_CLOSE       FLOAT not null,
  BAL_PREVIOUS    FLOAT not null,
  DATE_BEGIN      DATE not null,
  DATE_END        DATE not null,
  DATE_PAY        DATE not null,
  DATE_STMT       DATE not null,
  MIN_PAY         FLOAT not null,
  MINPAYCMP1      FLOAT not null,
  MINPAYCMP2      FLOAT not null,
  MINPAYCMP3      FLOAT not null,
  DLNQLVL         NUMBER(5) not null,
  OVERDUE_COUNT   NUMBER(5) not null,
  CMP0BAL         FLOAT not null,
  CMP1BAL         FLOAT not null,
  CMP2BAL         FLOAT not null,
  CMP3BAL         FLOAT not null,
  CMP4BAL         FLOAT not null,
  CMP5BAL         FLOAT not null,
  CMP6BAL         FLOAT not null,
  CMP7BAL         FLOAT not null,
  CMP8BAL         FLOAT not null,
  CMP9BAL         FLOAT not null,
  CMP10BAL        FLOAT default 0 not null,
  CMP11BAL        FLOAT default 0 not null,
  CMP12BAL        FLOAT default 0 not null,
  CMP13BAL        FLOAT default 0 not null,
  CMP14BAL        FLOAT default 0 not null,
  ADJDEBITS       FLOAT default 0 not null,
  ADJCREDITS      FLOAT default 0 not null,
  SURPLUS         FLOAT default 0 not null,
  BAL_DEBIT_PAY   FLOAT default 0 not null,
  BALDUE          FLOAT default 0 not null,
  BALND           FLOAT default 0 not null,
  SURPLUSND       FLOAT default 0 not null,
  BAL_DEBIT_PAYND FLOAT default 0 not null,
  PREV_SURPLUS    NUMBER(12,4) default 0.0 not null,
  SURPLUSDUE      NUMBER(16,4) default 0.0 not null,
  CLEDATE         DATE default to_date('31/08/2263', 'DD/MM/YYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSSTATEMENT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTATEMENT (STMT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSSTATEMENT_ACCIDSEQ on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTATEMENT (ACC_ID, SEQUENCE_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSSTATEMENT_DATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTATEMENT (ACC_ID, DATE_STMT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSSTMTPRNT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTMTPRNT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  STMT_ID   NUMBER(10) not null,
  STMT_DATE DATE not null,
  STMT_DATA BLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSSTMTPRNT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTMTPRNT (STMT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSSTMTPRNT_DATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTMTPRNT (STMT_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSSYSBAL
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSSYSBAL
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  INST_ID    NUMBER(10) default 0 not null,
  CTXDATE    DATE not null,
  NXTSYSDATE DATE not null,
  CHRGPRFID  VARCHAR2(10) not null,
  SCHEME     CHAR(4) not null,
  CURRCODE   CHAR(3) not null,
  BALANCE    FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CCSSYSBAL_NXTSYSDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSSYSBAL (NXTSYSDATE, INST_ID, CHRGPRFID, SCHEME, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSTMPLIMEXT
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSTMPLIMEXT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACC_ID    NUMBER(10) not null,
  INDATE    DATE not null,
  INTIME    NUMBER(10) not null,
  USR       NVARCHAR2(15) not null,
  AMT       FLOAT not null,
  EFFDATE   DATE not null,
  PURGEDATE DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSTMPLIMEXT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSTMPLIMEXT (ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSTMT
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSTMT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ACCDET_ID     NUMBER(10) default 0 not null,
  DATESTMT      DATE not null,
  DATEPAY       DATE not null,
  PREVBAL       FLOAT not null,
  CURRBAL       FLOAT not null,
  REDEEM        FLOAT not null,
  MINPAY        FLOAT not null,
  OVERDUEAMT    FLOAT not null,
  OVERDUECNT    NUMBER(5) not null,
  DEBITS        FLOAT not null,
  CREDITS       FLOAT not null,
  INTEREST      FLOAT not null,
  CREDIT_LIMIT  FLOAT not null,
  STATCODE      CHAR(2) not null,
  NEWINTEREST   FLOAT not null,
  OLDINTEREST   FLOAT not null,
  POINTS_BF     NUMBER(10) not null,
  POINTS_EARNED NUMBER(10) not null,
  POINTS_USED   NUMBER(10) not null,
  POINTS_CF     NUMBER(10) not null,
  CYCLE_BEGIN   DATE,
  CYCLE_END     DATE
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSTMT on OPS$YUFU_CHINA_PS_RUN_BAK.CCSTMT (ACCDET_ID, DATESTMT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSTMT_STMT_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSTMT (ACCDET_ID, DATESTMT DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCSUPLOAD
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCSUPLOAD
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CCSDATE   DATE not null,
  ACC_ID    NUMBER(10) not null,
  ITEM_ID   NUMBER(20) not null,
  HOSTNM    VARCHAR2(8) not null,
  ITEMTYPE  NUMBER(5) not null,
  ITEMVALUE NUMBER(18,4) not null,
  CURRCODE  CHAR(3) not null,
  DRCR      CHAR(1) not null,
  STATUS    NUMBER(5) not null,
  ATTEMPTS  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CCSUPLOAD
  add constraint UNQ_CCSUPLOAD_ITEM_ID unique (ITEM_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CCSUPLOAD on OPS$YUFU_CHINA_PS_RUN_BAK.CCSUPLOAD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CCSUPLOAD_STATUS_CCSDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CCSUPLOAD (STATUS, CCSDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CCYCLE
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CCYCLE
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  CYCLECODE       NUMBER(5) not null,
  DAY_OF_MONTH    NUMBER(5) not null,
  LAST_CYCLE_DATE DATE not null,
  NEXT_CYCLE_DATE DATE not null,
  ACCS_IN_CYCLE   NUMBER(10) not null,
  DAYPAYOFFSET    NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CDSTHST
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  OLD_STATCODE CHAR(2) not null,
  NEW_STATCODE CHAR(2) not null,
  DATE_SET     DATE not null,
  TIME_SET     NUMBER(10) not null,
  WHY_SET      VARCHAR2(60) not null,
  WHO_SET      VARCHAR2(15) not null,
  CTXDATE      DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  CRDDET_ID    NUMBER(10) default 0 not null,
  EXPDATE      DATE default to_date('2263-08-31','yyyy-mm-dd') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST
  add constraint HASH_CDSTHST primary key (CRDDET_ID, DATE_SET, TIME_SET)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CDSTHST_N_STATCD_CRDSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST (NEW_STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CDSTHST_O_STATCD_CRDSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST (OLD_STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CDSTHST_P_S_CRDDET on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CDSTHST_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CDSTHST_DATE_SET on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST (DATE_SET, NEW_STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CDSTHST1
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST1
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  OLD_STATCODE CHAR(2) not null,
  NEW_STATCODE CHAR(2) not null,
  DATE_SET     DATE not null,
  TIME_SET     NUMBER(10) not null,
  WHY_SET      VARCHAR2(60) not null,
  WHO_SET      VARCHAR2(15) not null,
  CRDDET_ID    NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST1
  add constraint UNQ_CDSTHST1_ID unique (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CDSTHST1 on OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST1 (CRDDET_ID, DATE_SET, TIME_SET)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CERTIFICATE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CERTIFICATE
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  INST_ID           NUMBER(10) default 0 not null,
  KEYSRC            VARCHAR2(5) not null,
  REFCODE           VARCHAR2(255) not null,
  KEYINDEX          NUMBER(5) not null,
  KEYTYPE           VARCHAR2(2) not null,
  CERTINDEX         NUMBER(5) not null,
  CERTISSUER        VARCHAR2(255) not null,
  SIGKEYINDEX       NUMBER(5) not null,
  SERIALNO          VARCHAR2(64) not null,
  EFFDATE           DATE not null,
  EFFTIME           NUMBER(10) not null,
  EXPDATE           DATE not null,
  EXPTIME           NUMBER(10) not null,
  BODY              CLOB not null,
  RSAKEY_ID_SUBJECT NUMBER(10) default 0 not null,
  RSAKEY_ID_VER     NUMBER(10) default 0 not null,
  CERTFMT           NUMBER(5) default 7 not null,
  REMAINDER         VARCHAR2(254) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CERTIFICATE on OPS$YUFU_CHINA_PS_RUN_BAK.CERTIFICATE (INST_ID, KEYSRC, REFCODE, KEYINDEX, KEYTYPE, CERTINDEX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CERTIFICATE_ISS_SER on OPS$YUFU_CHINA_PS_RUN_BAK.CERTIFICATE (INST_ID, CERTISSUER, SERIALNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CESHI
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CESHI
(
  NAME VARCHAR2(50),
  AGE  INTEGER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CHARGEDATA
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CHARGEDATA
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CTXDATE    DATE not null,
  CRDDET_ID  NUMBER(10) default 0 not null,
  CHARGETYPE NUMBER(5) not null,
  CHARGEDATA VARCHAR2(80) not null,
  CHARGECUR  CHAR(3) not null,
  CUSTTYPE   NUMBER(5) not null,
  OPDATA     VARCHAR2(128),
  PROCESSED  CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CHARGEDATA on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGEDATA (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CHARGELOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  RECID           NUMBER(10) not null,
  CTXDATE         DATE not null,
  CTXSESSION      NUMBER(5) not null,
  SEQNO           NUMBER(10) not null,
  ID              NUMBER(10) not null,
  TLGID           NUMBER(20) not null,
  CHARGE          FLOAT not null,
  CHARGECUR       CHAR(3) not null,
  BRANCH_ID       NUMBER(10) default 0 not null,
  ACCDET_ID       NUMBER(10) not null,
  CHARGESTATUS    NUMBER(5) not null,
  APPLY_DATE      DATE not null,
  CREDIT          CHAR(1) not null,
  DESCR           VARCHAR2(127) not null,
  CRDDET_ID       NUMBER(10) default 0 not null,
  CHARGETAG       VARCHAR2(32) default ' ' not null,
  CHARGETYPE      NUMBER(5) default 0 not null,
  SCOPEDET_ID     NUMBER(10) default 1 not null,
  CHARGESET_ID    NUMBER(10) default 1 not null,
  CHARGECLASS_ID  NUMBER(10) default 1 not null,
  CHGPERCENT      FLOAT default 0.0 not null,
  CHGMINVAL       FLOAT default 0.0 not null,
  CHGMAXVAL       FLOAT default 0.0 not null,
  CHGFLATVAL      FLOAT default 0.0 not null,
  CHGAMTTYPE      NUMBER(5) default 0 not null,
  CHGCURRCODE     CHAR(3) default ' ' not null,
  APPLIC_AMOUNT   FLOAT default 0.0 not null,
  FC_CHARGEDET_ID NUMBER(10) default 1 not null,
  CHGTXNTYPE      NUMBER(5) default 0 not null,
  APPLRULE        NUMBER(5) default 1 not null,
  APPLPRIORITY    NUMBER(5) default 100 not null,
  APPLEXPDATE     DATE default to_date('22630831', 'YYYYMMDD') not null,
  APPLSTATUS      NUMBER(5) default 1 not null,
  APPLDATE        DATE default to_date('22630831', 'YYYYMMDD') not null,
  ORGCHARGE       FLOAT default 0.0 not null,
  CNV_RATE        FLOAT default 1.0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CHARGELOG on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (RECID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_ACBALREF on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (ACCDET_ID, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_APPL on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (APPLPRIORITY, APPLEXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_APPLY_DATE on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (ACCDET_ID, APPLY_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_SD_TLGID on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (CTXDATE, TLGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_SYSDATE_SESSION on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (CTXDATE, CTXSESSION)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CHARGELOG_TLGID on OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG (TLGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CHGCRD
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CHGCRD
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TXNCODE        NUMBER(5) default '' not null,
  TXTIME         VARCHAR2(20) default '' not null,
  STAN           NUMBER(7) default 0 not null,
  PAN_START      VARCHAR2(19) default '0' not null,
  PAN_END        VARCHAR2(19) default '0' not null,
  PAN_COUNT      NUMBER(10) default 0 not null,
  AMT_EACH_CRD   FLOAT default 0 not null,
  PAR_VALUE      FLOAT default 0 not null,
  COSTOFPROD     FLOAT default 0 not null,
  CHANGE_TYPE    NUMBER(5) default 0 not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) default '0' not null,
  SALES_POINT    VARCHAR2(128) default '' not null,
  AREA           VARCHAR2(128) default '' not null,
  OPERATOR       VARCHAR2(128) default '' not null,
  MRCHT_ID       VARCHAR2(15) default '0' not null,
  SUMMARY        VARCHAR2(128) default '' not null,
  BATCH_STAT     VARCHAR2(2) default '00' not null,
  CURRTXN        CHAR(3) default '156',
  AMTTXN         FLOAT default 0,
  RATESET        FLOAT default 0,
  CURRBILL       CHAR(3) default '156'
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CHGCRD
  add constraint PK_CHGCRD primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CHGCRD
  add constraint HASH_CHGCRD unique (FATHER_ORDER, CHILDREN_ORDER)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CHGCRD_CUSTOM
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CHGCRD_CUSTOM
(
  PAN_START      VARCHAR2(19) default '0' not null,
  PAN_END        VARCHAR2(19) default '0' not null,
  PAN_COUNT      NUMBER(10) default 0 not null,
  AMT_EACH_CRD   FLOAT default 0 not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) default '0' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CLMAGFMT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CLMAGFMT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PANLEN    NUMBER(5) not null,
  SCHEME    VARCHAR2(12) not null,
  DESCR     VARCHAR2(64) not null,
  T1FMTCL   VARCHAR2(78) not null,
  T2FMTCL   VARCHAR2(39) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CLMAGFMT on OPS$YUFU_CHINA_PS_RUN_BAK.CLMAGFMT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CLMAGFMT_P_S_D on OPS$YUFU_CHINA_PS_RUN_BAK.CLMAGFMT (PANLEN, SCHEME, DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CLNDRDATE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CLNDRDATE
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  CALID      CHAR(4) not null,
  CALDATE    DATE not null,
  DESCR      VARCHAR2(64) not null,
  CALTIME    NUMBER(10) not null,
  DATECLASS  NUMBER(5) not null,
  DATEACTION VARCHAR2(128) not null,
  REPEAT     NUMBER(10) not null,
  DATEFLAGS  VARCHAR2(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CLNDRDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CLNDRDATE (CALID, CALDATE, CALTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CLNDRTYPE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CLNDRTYPE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  CALID     CHAR(4) not null,
  INST_ID   NUMBER(10) default 0 not null,
  CALTYPE   NUMBER(5) not null,
  DESCR     VARCHAR2(64) not null,
  CALFLAGS  CHAR(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CLNDRTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CLNDRTYPE (CALID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CLNDRTYPE_TYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CLNDRTYPE (INST_ID, CALTYPE, CALID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CORPCRDLNK
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CORPCRDLNK
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CRDDET_ID     NUMBER(10) default 0 not null,
  PRI_CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CORPCRDLNK on OPS$YUFU_CHINA_PS_RUN_BAK.CORPCRDLNK (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table COUNTRY
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.COUNTRY
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ALPHA2    CHAR(2) not null,
  ALPHA3    CHAR(3) not null,
  ISOCODE   CHAR(3) not null,
  DFLT_CURR CHAR(3) not null,
  DESCRTAG  INTEGER not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_COUNTRY on OPS$YUFU_CHINA_PS_RUN_BAK.COUNTRY (ISOCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_COUNTRY_ALPHA2 on OPS$YUFU_CHINA_PS_RUN_BAK.COUNTRY (ALPHA2)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_COUNTRY_ALPHA3 on OPS$YUFU_CHINA_PS_RUN_BAK.COUNTRY (ALPHA3)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CO_BIN_IN_CTXT
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_BIN_IN_CTXT
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  CRDROUTING_IID VARCHAR2(11) not null,
  CO_CONTEXT_ID  NUMBER(10) not null,
  IS_ACTIVE      NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CO_CONTEXT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_CONTEXT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  INST_ID       NUMBER(10) default 0 not null,
  CONTEXT_CODE  VARCHAR2(16) not null,
  EVENT_PENDING NUMBER(5) default 0 not null,
  CO_SERVICE_ID NUMBER(10) not null,
  TIMEOUT       NUMBER(10) default 0 not null,
  DESCR         VARCHAR2(80) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CO_CONTEXT on OPS$YUFU_CHINA_PS_RUN_BAK.CO_CONTEXT (CONTEXT_CODE, INST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CO_EXE_IN_CTXT
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_EXE_IN_CTXT
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  CO_EXE_NAME_ID NUMBER(10) not null,
  CO_CONTEXT_ID  NUMBER(10) not null,
  CONTEXT_ORDER  NUMBER(5) default 0 not null,
  ENTRY_POINT    VARCHAR2(32) default ' ' not null,
  DESCR          VARCHAR2(80) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CO_EXE_IN_CTXT on OPS$YUFU_CHINA_PS_RUN_BAK.CO_EXE_IN_CTXT (ENTRY_POINT, CONTEXT_ORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CO_EXE_NAME
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_EXE_NAME
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  EXECUTABLE_NAME VARCHAR2(32) default ' ' not null,
  DESCR           VARCHAR2(80) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CO_EXE_NAME on OPS$YUFU_CHINA_PS_RUN_BAK.CO_EXE_NAME (EXECUTABLE_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CO_SERVICE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_SERVICE
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  SERVICE_NAME      VARCHAR2(32) not null,
  IS_ACTIVE         NUMBER(5) default 0 not null,
  IS_TUXEDO_SERVICE NUMBER(5) default 1 not null,
  USED_BY           VARCHAR2(32) default ' ' not null,
  CALL_TYPE         NUMBER(5) default 0 not null,
  SERVICE_ASPECT    NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CO_SERVICE on OPS$YUFU_CHINA_PS_RUN_BAK.CO_SERVICE (SERVICE_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CO_SVC_IN_CTXT
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CO_SVC_IN_CTXT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CO_CONTEXT_ID NUMBER(10) not null,
  CO_SERVICE_ID NUMBER(10) not null,
  SERVICE_ORDER NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDACC
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ISOCODE   NUMBER(5) not null,
  TYPECODE  CHAR(2) not null,
  ROLEID    VARCHAR2(4) default ' ' not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  ACCDET_ID NUMBER(10) default 0 not null,
  PRIORITY  NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC
  add constraint HASH_CRDACC primary key (CRDDET_ID, ACCDET_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDACC_I_A_C_ACCDET on OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDACC_P_S_CRDDET on OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDACCROLE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDACCROLE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  ROLEID    VARCHAR2(4) not null,
  DESCR     VARCHAR2(64) not null,
  DENYSVC   VARCHAR2(192) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDACCROLE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDACCROLE (INST_ID, ROLEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDACCUPL
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDACCUPL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  BRANCH_ID NUMBER(10) default 0 not null,
  ISOCODE   NUMBER(5) not null,
  TYPECODE  CHAR(2) not null,
  DATESENT  DATE,
  TIMESENT  NUMBER(10),
  CTXTYPE   CHAR(1) not null,
  SENT      NUMBER(5) not null,
  ATTEMPTS  NUMBER(5) not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  ACCDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDACCUPL on OPS$YUFU_CHINA_PS_RUN_BAK.CRDACCUPL (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDACC_STCS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC_STCS
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ISOCODE   NUMBER(5) not null,
  TYPECODE  CHAR(2) not null,
  ROLEID    VARCHAR2(4) default ' ' not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  ACCDET_ID NUMBER(10) default 0 not null,
  PRIORITY  NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDACC_STCS on OPS$YUFU_CHINA_PS_RUN_BAK.CRDACC_STCS (CRDDET_ID, ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDAUTHOVER
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDAUTHOVER
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INDATE    DATE not null,
  INTIME    NUMBER(10) not null,
  USR       VARCHAR2(15) not null,
  AMT       FLOAT not null,
  EFFDATE   DATE not null,
  EFFTIME   NUMBER(10) not null,
  PURGEDATE DATE not null,
  PURGETIME NUMBER(10) not null,
  WHY_SET   VARCHAR2(60) not null,
  CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDAUTHOVER on OPS$YUFU_CHINA_PS_RUN_BAK.CRDAUTHOVER (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDBTCH
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCH
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  BATCH         NUMBER(10) not null,
  INST_ID       NUMBER(10) default 0 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  STATUS        NUMBER(5) not null,
  CREATEDATE    DATE not null,
  USR           VARCHAR2(15) not null,
  CARDCOUNT     NUMBER(5) not null,
  DATE_CARDPRO  DATE not null,
  DATE_PINPRO   DATE not null,
  PRIORITY      CHAR(1) not null,
  BTCHTYP       NUMBER(5) not null,
  DELVADDR      CHAR(1) not null,
  BATCH_CAT     VARCHAR2(12) default ' ' not null,
  OPTIONS       CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDBTCH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCH (BATCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDBTCH_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCH (INST_ID, PRIORITY, BATCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDBTCH_DATE_CARDPRO on OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCH (DATE_CARDPRO, CRDPRODUCT_ID, BTCHTYP)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDBTCHRECON
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCHRECON
(
  VERNO_CTX    INTEGER default 1 not null,
  INST_ID      NUMBER(10) default 0 not null,
  BATCH        INTEGER default 0 not null,
  CPRORECON_ID INTEGER default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDBTCHRECON on OPS$YUFU_CHINA_PS_RUN_BAK.CRDBTCHRECON (INST_ID, BATCH, CPRORECON_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDDESIGN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDESIGN
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) default 0 not null,
  DESIGNREF VARCHAR2(8) not null,
  DESCR     VARCHAR2(64) not null,
  MAXCARDS  NUMBER(10) not null,
  NUMCARDS  NUMBER(10) not null,
  PINFMTREF VARCHAR2(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDDESIGN on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDESIGN (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDDESIGN_REF on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDESIGN (INST_ID, DESIGNREF)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDDET
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET
(
  VERNO_CTX            NUMBER(10) default 1 not null,
  BRANCH_ID            NUMBER(10) default 0 not null,
  CRDPRODUCT_ID        NUMBER(10) default 0 not null,
  CLASSID              NUMBER(5) not null,
  PAN                  VARCHAR2(19) not null,
  SEQNO                NUMBER(5) not null,
  EXPDATE              DATE not null,
  EFFDATE              DATE not null,
  CYCLEN               NUMBER(5) not null,
  CYCBEGIN             DATE not null,
  AMTAUTH              FLOAT not null,
  AMTREM               FLOAT not null,
  BLKAMT               FLOAT not null,
  STATCODE             CHAR(2) not null,
  BATCH                NUMBER(10) not null,
  CRDSMADE             NUMBER(5) not null,
  PINSMADE             NUMBER(5) not null,
  CVV                  VARCHAR2(3) not null,
  PVKI                 CHAR(1) not null,
  PVV                  VARCHAR2(4) not null,
  LANG                 CHAR(1) not null,
  TITLE                VARCHAR2(10) not null,
  FIRSTNAME            VARCHAR2(50) not null,
  LASTNAME             VARCHAR2(50) not null,
  DISCRET              VARCHAR2(25) not null,
  USRDATA              VARCHAR2(30) not null,
  SVCCODE              VARCHAR2(3) not null,
  ACI                  CHAR(1) not null,
  OFFAUTH              FLOAT not null,
  CUST_ID_NUM          VARCHAR2(12) not null,
  KINSHIP              VARCHAR2(10) not null,
  DATE_STATCHG         DATE not null,
  OLD_CVV              VARCHAR2(3) not null,
  OLD_EXPDATE          DATE not null,
  RENEW                CHAR(1) not null,
  CORP                 CHAR(1) not null,
  DATE_BIRTH           DATE not null,
  OFFLIM               FLOAT not null,
  CVC                  VARCHAR2(4) not null,
  OLDCVC               VARCHAR2(4) not null,
  EMBOSSNAME           VARCHAR2(51) not null,
  ADDITIONALNO         NUMBER(5) not null,
  DATE_CREATED         DATE not null,
  APPLNO               NUMBER(10) not null,
  ATC                  NUMBER(10) default 0 not null,
  OLD_ATC              NUMBER(10) default 0 not null,
  FALLBACKCNT          NUMBER(5) default 0 not null,
  OLD_FALLBACKCNT      NUMBER(5) default 0 not null,
  ADDRIND              NUMBER(5) default 0 not null,
  SCRIPTSTAT           NUMBER(5) default 0 not null,
  OLDSCRSTAT           NUMBER(5) default 0 not null,
  DLV_METHOD           CHAR(1) default '0' not null,
  CSCS                 CHAR(12) default ' ' not null,
  OLDCSCS              CHAR(12) default ' ' not null,
  CRDPROGRAM_ID        NUMBER(10) default 1 not null,
  CRDDESIGN_ID         NUMBER(10) default 1 not null,
  DELIV_BRNCODE        VARCHAR2(8) default ' ' not null,
  OLD_CRDPRODUCT_ID    NUMBER(10) default 0 not null,
  OLD_STATCODE         CHAR(2) default '  ' not null,
  CRDAUTH_PARAMS       VARCHAR2(32) default ' ' not null,
  PREAUTH_BLK          FLOAT default 0.0 not null,
  PREAUTH_BLK_OLD      FLOAT default 0.0 not null,
  PREAUTH_UNCLR        FLOAT default 0.0 not null,
  PREAUTH_UNCLR_OLD    FLOAT default 0.0 not null,
  PREAUTH_BLK_LIM      FLOAT default -1.0 not null,
  PREAUTH_TOT_LIM      FLOAT default -1.0 not null,
  ID                   NUMBER(10) default 0 not null,
  PAN_DISPLAY          VARCHAR2(19) default ' ' not null,
  ISS_HOST_CODE        VARCHAR2(4) default ' ' not null,
  ISS_HOST_CRDREF      VARCHAR2(32) default ' ' not null,
  L10N_TITLE           VARCHAR2(10) default ' ' not null,
  L10N_FIRSTNAME       VARCHAR2(50) default ' ' not null,
  L10N_LASTNAME        VARCHAR2(50) default ' ' not null,
  CAT_PARAMS           VARCHAR2(127) default ' ' not null,
  ACCDET_ID            NUMBER(10) default 0 not null,
  CUSTDET_ID           NUMBER(10) default 0 not null,
  CAT_ISSRISK_ID       NUMBER(10) default 1 not null,
  CAT_ISSCOMM_ID       NUMBER(10) default 1 not null,
  NOTIFY_OPTIONS       CHAR(16) default '0000000000000000' not null,
  LAST_ACTIVITY        VARCHAR2(17) default '20000101000000000' not null,
  CTTA                 FLOAT default 0.0 not null,
  CTTA_OLD             FLOAT default 0.0 not null,
  CSTA                 FLOAT default 0.0 not null,
  CSTA_OLD             FLOAT default 0.0 not null,
  CTTAUL               FLOAT default 0.0 not null,
  CTTAUL_OLD           FLOAT default 0.0 not null,
  PREAUTH_AMTCRPT      FLOAT default 0.0 not null,
  PREAUTH_AMTCRPT_OLD  FLOAT default 0.0 not null,
  PREAUTH_TLOGID       NUMBER(20) default 0 not null,
  PREAUTH_TLOGID_OLD   NUMBER(20) default 0 not null,
  PREAUTH_TXNFLAGS     CHAR(16) default '000N000000000000' not null,
  PREAUTH_TXNFLAGS_OLD CHAR(16) default '000N000000000000' not null,
  CRDACTSTAT           CHAR(2) default '00' not null,
  OLD_CRDACTSTAT       CHAR(2) default '00' not null,
  EXT_CUSTNUM          VARCHAR2(32) default ' ',
  PINSTATUS_ID         NUMBER(5) default 0 not null,
  PINSTATUS_OLD_ID     NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET
  add constraint PK_CRDDET primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET
  add constraint HASH_CRDDET unique (PAN, SEQNO)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_HOST on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (ISS_HOST_CODE, ISS_HOST_CRDREF)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_CRD_CRDPRODUCT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (CRDPRODUCT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_ID_CAT_ISSCOMM on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (CAT_ISSCOMM_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_ID_CAT_ISSRISK on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (CAT_ISSRISK_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_I_A_C_ACCDET on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (ACCDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_I_B_BRANCH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (BRANCH_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_I_C_CUSTDET on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (CUSTDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_P_S_PINSTATUS_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (PINSTATUS_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_P_S_PINSTATUS_OLD_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (PINSTATUS_OLD_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CRDDET_SC_CRDSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_BATCH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (BATCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_CRDPRD_ID_EXPD on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (CRDPRODUCT_ID, EXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_EXT_CUSTNUM on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (EXT_CUSTNUM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_LASTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (LASTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDDET_VPAN on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET (ISS_HOST_CRDREF, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDDETADDINFO
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDETADDINFO
(
  VERNO_CTX NUMBER(10) default 1 not null,
  AMTRTILOC FLOAT default 0.0 not null,
  CURRTILOC CHAR(3) default ' ' not null,
  AMTRTIINT FLOAT default 0.0 not null,
  CURRTIINT CHAR(3) default ' ' not null,
  CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDDETADDINFO on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDETADDINFO (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDDETMISC
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDETMISC
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  EXPORT       NUMBER(5) not null,
  PVVOLD       VARCHAR2(4),
  PVKIOLD      CHAR(1) default ' ' not null,
  CRDDET_ID    NUMBER(10) default 0 not null,
  CVV2CHK_DATE DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  CVV2TRIES    NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDDETMISC on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDETMISC (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDETMISC_EXPORT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDETMISC (EXPORT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 960K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDDET_STCS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS
(
  VERNO_CTX            NUMBER(10) default 1 not null,
  BRANCH_ID            NUMBER(10) default 0 not null,
  CRDPRODUCT_ID        NUMBER(10) default 0 not null,
  CLASSID              NUMBER(5) not null,
  PAN                  VARCHAR2(19) not null,
  SEQNO                NUMBER(5) not null,
  EXPDATE              DATE not null,
  EFFDATE              DATE not null,
  CYCLEN               NUMBER(5) not null,
  CYCBEGIN             DATE not null,
  AMTAUTH              FLOAT not null,
  AMTREM               FLOAT not null,
  BLKAMT               FLOAT not null,
  STATCODE             CHAR(2) not null,
  BATCH                NUMBER(10) not null,
  CRDSMADE             NUMBER(5) not null,
  PINSMADE             NUMBER(5) not null,
  CVV                  VARCHAR2(3) not null,
  PVKI                 CHAR(1) not null,
  PVV                  VARCHAR2(4) not null,
  LANG                 CHAR(1) not null,
  TITLE                VARCHAR2(10) not null,
  FIRSTNAME            VARCHAR2(50) not null,
  LASTNAME             VARCHAR2(50) not null,
  DISCRET              VARCHAR2(25) not null,
  USRDATA              VARCHAR2(30) not null,
  SVCCODE              VARCHAR2(3) not null,
  ACI                  CHAR(1) not null,
  OFFAUTH              FLOAT not null,
  CUST_ID_NUM          VARCHAR2(12) not null,
  KINSHIP              VARCHAR2(10) not null,
  DATE_STATCHG         DATE not null,
  OLD_CVV              VARCHAR2(3) not null,
  OLD_EXPDATE          DATE not null,
  RENEW                CHAR(1) not null,
  CORP                 CHAR(1) not null,
  DATE_BIRTH           DATE not null,
  OFFLIM               FLOAT not null,
  CVC                  VARCHAR2(4) not null,
  OLDCVC               VARCHAR2(4) not null,
  EMBOSSNAME           VARCHAR2(51) not null,
  ADDITIONALNO         NUMBER(5) not null,
  DATE_CREATED         DATE not null,
  APPLNO               NUMBER(10) not null,
  ATC                  NUMBER(10) default 0 not null,
  OLD_ATC              NUMBER(10) default 0 not null,
  FALLBACKCNT          NUMBER(5) default 0 not null,
  OLD_FALLBACKCNT      NUMBER(5) default 0 not null,
  ADDRIND              NUMBER(5) default 0 not null,
  SCRIPTSTAT           NUMBER(5) default 0 not null,
  OLDSCRSTAT           NUMBER(5) default 0 not null,
  DLV_METHOD           CHAR(1) default '0' not null,
  CSCS                 CHAR(12) default ' ' not null,
  OLDCSCS              CHAR(12) default ' ' not null,
  CRDPROGRAM_ID        NUMBER(10) default 1 not null,
  CRDDESIGN_ID         NUMBER(10) default 1 not null,
  DELIV_BRNCODE        VARCHAR2(8) default ' ' not null,
  OLD_CRDPRODUCT_ID    NUMBER(10) default 0 not null,
  OLD_STATCODE         CHAR(2) default '  ' not null,
  CRDAUTH_PARAMS       VARCHAR2(32) default ' ' not null,
  PREAUTH_BLK          FLOAT default 0.0 not null,
  PREAUTH_BLK_OLD      FLOAT default 0.0 not null,
  PREAUTH_UNCLR        FLOAT default 0.0 not null,
  PREAUTH_UNCLR_OLD    FLOAT default 0.0 not null,
  PREAUTH_BLK_LIM      FLOAT default -1.0 not null,
  PREAUTH_TOT_LIM      FLOAT default -1.0 not null,
  ID                   NUMBER(10) default 0 not null,
  PAN_DISPLAY          VARCHAR2(19) default ' ' not null,
  ISS_HOST_CODE        VARCHAR2(4) default ' ' not null,
  ISS_HOST_CRDREF      VARCHAR2(32) default ' ' not null,
  L10N_TITLE           VARCHAR2(10) default ' ' not null,
  L10N_FIRSTNAME       VARCHAR2(50) default ' ' not null,
  L10N_LASTNAME        VARCHAR2(50) default ' ' not null,
  CAT_PARAMS           VARCHAR2(127) default ' ' not null,
  ACCDET_ID            NUMBER(10) default 0 not null,
  CUSTDET_ID           NUMBER(10) default 0 not null,
  CAT_ISSRISK_ID       NUMBER(10) default 1 not null,
  CAT_ISSCOMM_ID       NUMBER(10) default 1 not null,
  NOTIFY_OPTIONS       CHAR(16) default '0000000000000000' not null,
  LAST_ACTIVITY        VARCHAR2(17) default '20000101000000000' not null,
  CTTA                 FLOAT default 0.0 not null,
  CTTA_OLD             FLOAT default 0.0 not null,
  CSTA                 FLOAT default 0.0 not null,
  CSTA_OLD             FLOAT default 0.0 not null,
  CTTAUL               FLOAT default 0.0 not null,
  CTTAUL_OLD           FLOAT default 0.0 not null,
  PREAUTH_AMTCRPT      FLOAT default 0.0 not null,
  PREAUTH_AMTCRPT_OLD  FLOAT default 0.0 not null,
  PREAUTH_TLOGID       NUMBER(20) default 0 not null,
  PREAUTH_TLOGID_OLD   NUMBER(20) default 0 not null,
  PREAUTH_TXNFLAGS     CHAR(16) default '000N000000000000' not null,
  PREAUTH_TXNFLAGS_OLD CHAR(16) default '000N000000000000' not null,
  CRDACTSTAT           CHAR(2) default '00' not null,
  OLD_CRDACTSTAT       CHAR(2) default '00' not null,
  EXT_CUSTNUM          VARCHAR2(32) default ' ',
  PINSTATUS_ID         NUMBER(5) default 0 not null,
  PINSTATUS_OLD_ID     NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDDET_STCS on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (PAN, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_STCS_BATCH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (BATCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_STCS_CRDPRD_ID_EXPD on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (CRDPRODUCT_ID, EXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_STCS_EXT_CUSTNUM on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (EXT_CUSTNUM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDDET_STCS_LASTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (LASTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDDET_STCS_VPAN on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_STCS (ISS_HOST_CRDREF, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDDET_X
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_X
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  NETCHGEXP         NUMBER(5) not null,
  NETCHGKILL        NUMBER(5) not null,
  NETCHGKDATE       DATE not null,
  CRDDET_ID         NUMBER(10) default 0 not null,
  DESIGN_REF        VARCHAR2(12) default ' ' not null,
  USRDATA1          VARCHAR2(32) default ' ' not null,
  USRDATA2          VARCHAR2(32) default ' ' not null,
  USRDATA3          VARCHAR2(32) default ' ' not null,
  USRDATA4          VARCHAR2(32) default ' ' not null,
  USRDATA5          VARCHAR2(255) default ' ' not null,
  CAT_ISSFEE_ID     NUMBER(10) default 1 not null,
  CAT_ISSCYCFEE_ID  NUMBER(10) default 1 not null,
  DATE_CYCFEE_MOVED DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  CYCBEGIN_CNTRL    NUMBER(5) default 0 not null,
  DATELSTISSUED     DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  CAT_CRDISS_ID     NUMBER(10) default 1 not null,
  CRDPLSTCTYP_ID    NUMBER(10) default 0 not null,
  MEMO              VARCHAR2(255) default ' ' not null,
  DATE_ACTIVATION   DATE default to_date('2263-08-31','YYYY-MM-DD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDDET_X on OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_X (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDEVENT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CRDDET_ID  NUMBER(10) not null,
  BATCH      NUMBER(10) not null,
  EVTYPE     NUMBER(5) not null,
  EVSRC      NUMBER(5) not null,
  EVDATETIME TIMESTAMP(3) not null,
  CTXDATE    DATE not null,
  REASON     VARCHAR2(64) not null,
  EVNOTES    VARCHAR2(255) not null,
  STATUS     NUMBER(5) not null,
  FEECTRL    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDEVENT_BATCH_CRDDET on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT (BATCH, CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDEVENT_CTXDATE_EVTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT (CTXDATE, EVTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDEVENT_ACTLNK
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_ACTLNK
(
  ID          NUMBER(10) not null,
  ACT_LOG_ID  NUMBER(10) not null,
  CRDEVENT_ID NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDEVENT_DATALOG
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  CRDEVENT_ID NUMBER(10) not null,
  CTXDATE     DATE not null,
  ENTITY_TYPE NUMBER(5) not null,
  ENTITY_ID   NUMBER(10) not null,
  DATA_LABEL  VARCHAR2(32) not null,
  DATA_OLD    VARCHAR2(64) not null,
  DATA_NEW    VARCHAR2(64) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG_DATALABEL on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG (DATA_LABEL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG_ENTITY_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG (ENTITY_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG_ENTITY_TYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG (ENTITY_TYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDEVENT_EXTAUTH
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_EXTAUTH
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  CRDEVENT_ID  NUMBER(10) not null,
  MAKERID      VARCHAR2(16) not null,
  CHECKERID    VARCHAR2(16) not null,
  DEPTID       VARCHAR2(16) not null,
  EXTREF       VARCHAR2(16) not null,
  CHANNEL      VARCHAR2(16) not null,
  SVCNAME      VARCHAR2(32) not null,
  DATECREATION DATE not null,
  TIMECREATION NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATECRT_CRDEVENT_EXTAUTH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_EXTAUTH (DATECREATION)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MAKERID_CRDEVENT_EXTAUTH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_EXTAUTH (MAKERID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDEVENT_PINTYP
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_PINTYP
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  CRDEVENT_ID NUMBER(10) not null,
  CRDPINTYPE  NUMBER(5) not null,
  STATUS      NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDEVENT_USRLOG
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  CRDEVENT_ID NUMBER(10) not null,
  CTXDATE     DATE not null,
  USR_ID      NUMBER(10) not null,
  IPADDRESS   VARCHAR2(16) not null,
  ACSITEM     VARCHAR2(15) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG_USR_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG (USR_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDEV_STHSTLK
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDEV_STHSTLK
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) default 0 not null,
  CRDEVENT_ID NUMBER(10) not null,
  CRDDET_ID   NUMBER(10) not null,
  DATE_SET    DATE not null,
  TIME_SET    NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDEV_STHSTLK on OPS$YUFU_CHINA_PS_RUN_BAK.CRDEV_STHSTLK (CRDEVENT_ID, CRDDET_ID, DATE_SET, TIME_SET)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDFORMAT
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDFORMAT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  INST_ID      NUMBER(10) default 0 not null,
  CURRCODE     CHAR(3) not null,
  CURRCODE2    CHAR(3) not null,
  CLASSID      NUMBER(5) not null,
  PRODTYPE     CHAR(1) not null,
  T1FMT        VARCHAR2(78) not null,
  T2FMT        VARCHAR2(40) not null,
  T3FMT        VARCHAR2(109) not null,
  EMA1FMT      VARCHAR2(30) not null,
  EMA21FMT     VARCHAR2(30) not null,
  EMA22FMT     VARCHAR2(30) not null,
  EMA23FMT     VARCHAR2(30) not null,
  CYCLEN       NUMBER(5) not null,
  VALIDITY     NUMBER(5) not null,
  CYCAUTH      FLOAT not null,
  OFFAUTH      FLOAT not null,
  DFLTSTATCODE CHAR(2) not null,
  PANLEN       NUMBER(5) not null,
  IID          VARCHAR2(11) not null,
  ISSLEN       NUMBER(5) not null,
  SVCCODE      VARCHAR2(3) not null,
  PVKI         CHAR(1) not null,
  SCHEME       VARCHAR2(12) not null,
  BINSEQ       NUMBER(10) not null,
  PANFMT       VARCHAR2(30) not null,
  PINTYPE      CHAR(1) not null,
  MAX_PINTRIES NUMBER(5) not null,
  LOCALCOUNTRY CHAR(3) not null,
  DOUBLE_ENTER CHAR(1) not null,
  BUREAU_CHECK CHAR(1) not null,
  CREDIT_SCORE CHAR(1) not null,
  AUTHDAYS     NUMBER(5) not null,
  EMA3FMT      VARCHAR2(30) not null,
  T1FMTCL      VARCHAR2(78) default ' ' not null,
  T2FMTCL      VARCHAR2(39) default ' ' not null,
  ID           NUMBER(10) default 0 not null,
  OPTIONS      CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDFORMAT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDFORMAT (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDINFO
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO
(
  VERNO_CTX          NUMBER(10) default 0 not null,
  ID                 NUMBER(10) default 0 not null,
  PAN                VARCHAR2(21) not null,
  CUST_NAME          VARCHAR2(64) default '' not null,
  ID_NUM             VARCHAR2(64) default '' not null,
  MAIL_BOX           VARCHAR2(50) default '' not null,
  CELL_PHONE         VARCHAR2(20) default '' not null,
  IS_CHECK_CELLPHONE VARCHAR2(1) default '0' not null,
  IS_ONLINE_REDEEM   VARCHAR2(1) default '0' not null,
  BANK_NAME          VARCHAR2(128) default '' not null,
  BRANCH_NAME        VARCHAR2(128) default '' not null,
  BANK_PAN           VARCHAR2(21) default '' not null,
  CARD_ACCEPTOR_NAME VARCHAR2(64) default '' not null,
  CARD_ACCEPTOR_ID   VARCHAR2(64) default '' not null,
  RESERVED1          VARCHAR2(128) default '' not null,
  RESERVED2          VARCHAR2(128) default '' not null,
  RESERVED3          VARCHAR2(128) default '' not null,
  USER_NAME          VARCHAR2(64) default '' not null,
  DATE_BIRTH         DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  ID_TYPE            VARCHAR2(2) default '' not null,
  SEX                VARCHAR2(1) default '0' not null,
  ADDRESS            VARCHAR2(128) default '' not null,
  POSTCODE           VARCHAR2(10) default '' not null,
  MARRIED            VARCHAR2(2) default '' not null,
  PROVINCE           VARCHAR2(64) default '' not null,
  CITY               VARCHAR2(64) default '' not null,
  FAX                VARCHAR2(20) default '' not null,
  PHONE              VARCHAR2(20) default '' not null,
  DEGREE             VARCHAR2(10) default '' not null,
  WORK               VARCHAR2(128) default '' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO
  add constraint PK_CRDINFO primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO
  add constraint HASH_CRDINFO unique (PAN)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.NK_CELL_PHONE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO (CELL_PHONE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDINFO_IMCS
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO_IMCS
(
  VERNO_CTX          NUMBER(10) not null,
  ID                 NUMBER(10) not null,
  PAN                VARCHAR2(21) not null,
  CUST_NAME          VARCHAR2(64) not null,
  ID_NUM             VARCHAR2(64) not null,
  MAIL_BOX           VARCHAR2(50) not null,
  CELL_PHONE         VARCHAR2(20) not null,
  IS_CHECK_CELLPHONE VARCHAR2(1) not null,
  IS_ONLINE_REDEEM   VARCHAR2(1) not null,
  BANK_NAME          VARCHAR2(128) not null,
  BRANCH_NAME        VARCHAR2(128) not null,
  BANK_PAN           VARCHAR2(21) not null,
  CARD_ACCEPTOR_NAME VARCHAR2(64) not null,
  CARD_ACCEPTOR_ID   VARCHAR2(64) not null,
  RESERVED1          VARCHAR2(128) not null,
  RESERVED2          VARCHAR2(128) not null,
  RESERVED3          VARCHAR2(128) not null,
  USER_NAME          VARCHAR2(64) not null,
  DATE_BIRTH         DATE not null,
  ID_TYPE            VARCHAR2(2) not null,
  SEX                VARCHAR2(1) not null,
  ADDRESS            VARCHAR2(128) not null,
  POSTCODE           VARCHAR2(10) not null,
  MARRIED            VARCHAR2(2) not null,
  PROVINCE           VARCHAR2(64) not null,
  CITY               VARCHAR2(64) not null,
  FAX                VARCHAR2(20) not null,
  PHONE              VARCHAR2(20) not null,
  DEGREE             VARCHAR2(10) not null,
  WORK               VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDINFO_OLD
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO_OLD
(
  VERNO_CTX          NUMBER(10) not null,
  ID                 NUMBER(10) not null,
  PAN                VARCHAR2(21) not null,
  CUST_NAME          VARCHAR2(64) not null,
  ID_NUM             VARCHAR2(64) not null,
  MAIL_BOX           VARCHAR2(50) not null,
  CELL_PHONE         VARCHAR2(20) not null,
  IS_CHECK_CELLPHONE VARCHAR2(1) not null,
  IS_ONLINE_REDEEM   VARCHAR2(1) not null,
  BANK_NAME          VARCHAR2(128) not null,
  BRANCH_NAME        VARCHAR2(128) not null,
  BANK_PAN           VARCHAR2(21) not null,
  CARD_ACCEPTOR_NAME VARCHAR2(64) not null,
  CARD_ACCEPTOR_ID   VARCHAR2(64) not null,
  RESERVED1          VARCHAR2(128) not null,
  RESERVED2          VARCHAR2(128) not null,
  RESERVED3          VARCHAR2(128) not null,
  USER_NAME          VARCHAR2(64) not null,
  DATE_BIRTH         DATE not null,
  ID_TYPE            VARCHAR2(2) not null,
  SEX                VARCHAR2(1) not null,
  ADDRESS            VARCHAR2(128) not null,
  POSTCODE           VARCHAR2(10) not null,
  MARRIED            VARCHAR2(2) not null,
  PROVINCE           VARCHAR2(64) not null,
  CITY               VARCHAR2(64) not null,
  FAX                VARCHAR2(20) not null,
  PHONE              VARCHAR2(20) not null,
  DEGREE             VARCHAR2(10) not null,
  WORK               VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO_OLD
  add constraint PK_CRDINFO_OLD_CRD primary key (PAN)
  using index 
  tablespace USERS
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDLIMIT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMIT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  CYCLE_LEN    NUMBER(5) not null,
  CYCLE_BEGIN  DATE not null,
  CASHLIM_AMT  FLOAT not null,
  CASHLIM_NUM  NUMBER(5) not null,
  PURCHLIM_AMT FLOAT not null,
  PURCHLIM_NUM NUMBER(5) not null,
  TOTLIM_AMT   FLOAT not null,
  TOTLIM_NUM   NUMBER(5) not null,
  CASH_AMT_TD  FLOAT not null,
  CASH_NUM_TD  NUMBER(5) not null,
  PURCH_AMT_TD FLOAT not null,
  PURCH_NUM_TD NUMBER(5) not null,
  CRDDET_ID    NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDLIMIT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMIT (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDLIMOVER
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMOVER
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INDATE      DATE not null,
  INTIME      NUMBER(10) not null,
  USR         VARCHAR2(15) not null,
  AMT         FLOAT not null,
  EFFDATE     DATE not null,
  PURGEDATE   DATE not null,
  WHY_SET     VARCHAR2(60) default ' ' not null,
  EFFTIME     NUMBER(10) default 0 not null,
  STATUS      NUMBER(5) default 1 not null,
  ORIGINAL_ID NUMBER(10) default 0 not null,
  CRDDET_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDLIMOVER on OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMOVER (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDLIMOVER_ORIGINAL_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMOVER (ORIGINAL_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CLOV_PANSEQNO on OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMOVER (CRDDET_ID, STATUS, EFFDATE, EFFTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDMODLOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDMODLOG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) default 0 not null,
  CRDDET_ID   NUMBER(10) not null,
  CTXDATE     DATE not null,
  MODDATETIME TIMESTAMP(6) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 6M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDMODLOG_CRDDET_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMODLOG (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1920K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDMODLOG_CTX_CRDDET_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMODLOG (CTXDATE, CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 7M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDMODLOG_MOD_CRDDET_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMODLOG (MODDATETIME, CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDMRCHB
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  AFE          VARCHAR2(8) not null,
  AIID         VARCHAR2(11) not null,
  CRDACPTID    VARCHAR2(15) not null,
  NETCRDACPTID VARCHAR2(15) not null,
  CRDACPTLOC   VARCHAR2(64) not null,
  SBDATE       DATE not null,
  EBDATE       DATE not null,
  RSTOP        NUMBER(5) not null,
  RCURTXN      CHAR(3) not null,
  RAMTLOW      FLOAT not null,
  RAMTHIGH     FLOAT not null,
  RSTATUS      NUMBER(5) not null,
  RPOLICY      VARCHAR2(255) not null,
  ESTOP        NUMBER(5) not null,
  NSTOP        NUMBER(5) not null,
  ASTOP        NUMBER(5) not null,
  NETSEND      NUMBER(5) not null,
  DESCR        VARCHAR2(255) not null,
  CRDDET_ID    NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDMRCHB on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDMRCHB_EBDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB (EBDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDMRCHB_SBDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB (SBDATE, AFE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDMRCHB_CRDMRCH on OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB (CRDDET_ID, AFE, AIID, CRDACPTID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDNOTIFY
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDNOTIFY
(
  VERNO_CTX NUMBER(10) default 0 not null,
  ID        NUMBER(10) not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  MOBTEL    VARCHAR2(15) not null,
  EMAIL     VARCHAR2(64) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDNOTIFY on OPS$YUFU_CHINA_PS_RUN_BAK.CRDNOTIFY (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDNUMRAND
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDNUMRAND
(
  VERNO_CTX NUMBER(10) default 1 not null,
  POSITION  NUMBER(10) not null,
  VALUE     NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDNUMRAND on OPS$YUFU_CHINA_PS_RUN_BAK.CRDNUMRAND (POSITION)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDNUMRAND_VALUE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDNUMRAND (VALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDPIN
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPIN
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  PINTRIES     NUMBER(5) not null,
  PINBLK       VARCHAR2(16) not null,
  PINCOUNT     NUMBER(10) default 1 not null,
  ORG_RRN      CHAR(12) default '000000000000' not null,
  ORG_PINCOUNT NUMBER(10) default 0 not null,
  ORG_PINBLK   VARCHAR2(16) default '0' not null,
  CRDDET_ID    NUMBER(10) default 0 not null,
  PINTYPE      NUMBER(5) default 1 not null,
  DATECHANGED  DATE default to_date('31082263','DDMMYYYY') not null,
  DATECREATED  DATE default to_date('31082263','DDMMYYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 7M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPIN on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPIN (CRDDET_ID, PINTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDPRODCURR
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODCURR
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  INST_ID       NUMBER(10) default 0 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  CURRCODE      CHAR(3) not null,
  CURRCODE2     CHAR(3) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPRODCURR on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODCURR (CRDPRODUCT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDPRODLIM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODLIM
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  INST_ID       NUMBER(10) default 0 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  LIMIT_TXNS    VARCHAR2(192) not null,
  CYCLE_LEN     NUMBER(5) not null,
  CASHLIM_AMT   FLOAT not null,
  CASHLIM_NUM   NUMBER(5) not null,
  PURCHLIM_AMT  FLOAT not null,
  PURCHLIM_NUM  NUMBER(5) not null,
  TOTLIM_AMT    FLOAT not null,
  TOTLIM_NUM    NUMBER(5) not null,
  VIP_MUL       FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPRODLIM on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODLIM (CRDPRODUCT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDPRODMIG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODMIG
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  FROM_CRDPRODUCT_ID NUMBER(10) default 0 not null,
  TO_CRDPRODUCT_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPRODMIG on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODMIG (FROM_CRDPRODUCT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDPRODPINTYP
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODPINTYP
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  CRDPRODUCT_ID NUMBER(10) not null,
  CRDPINTYPE    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPRODPINTYP on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODPINTYP (CRDPRODUCT_ID, CRDPINTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDPRODUCT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODUCT
(
  VERNO_CTX            NUMBER(10) default 1 not null,
  INST_ID              NUMBER(10) default 0 not null,
  CRDPRODUCT           VARCHAR2(4) not null,
  DESCR                VARCHAR2(30) not null,
  CRDFORMAT_ID         NUMBER(10) default 0 not null,
  AFFINITY             CHAR(1) not null,
  ACI                  VARCHAR2(2) not null,
  DEF_TYPEACC          CHAR(2) not null,
  PRODNUM              NUMBER(5) not null,
  PRODSEQ              NUMBER(10) not null,
  POINTS1              NUMBER(5) not null,
  POINTS2              NUMBER(5) not null,
  STMT_LINE1           VARCHAR2(80) not null,
  STMT_LINE2           VARCHAR2(80) not null,
  STMT_LINE3           VARCHAR2(80) not null,
  POINTS_LINE1         VARCHAR2(80) not null,
  POINTS_LINE2         VARCHAR2(80) not null,
  OVERLIM_LINE1        VARCHAR2(80) not null,
  OVERLIM_LINE2        VARCHAR2(80) not null,
  LATEPAY_LINE1        VARCHAR2(80) not null,
  LATEPAY_LINE2        VARCHAR2(80) not null,
  OVERDUE1_LINE1       VARCHAR2(80) not null,
  OVERDUE1_LINE2       VARCHAR2(80) not null,
  OVERDUE2_LINE1       VARCHAR2(80) not null,
  OVERDUE2_LINE2       VARCHAR2(80) not null,
  OVERDUE3_LINE1       VARCHAR2(80) not null,
  OVERDUE3_LINE2       VARCHAR2(80) not null,
  DENYSVC              VARCHAR2(192) not null,
  EMVCRPTGID           NUMBER(5) default 0 not null,
  AUTHCHKSID           NUMBER(5) default 0 not null,
  ATCLIMIT             NUMBER(10) default 0 not null,
  ARQCFAILACT          CHAR(1) default '1' not null,
  ARQCFAILRSP          CHAR(2) default '00' not null,
  EMVSCRIPTSVC         VARCHAR2(15) default ' ' not null,
  FALLBACKLIMIT        NUMBER(5) default 32767 not null,
  FALLBACKACT          CHAR(1) default '0' not null,
  FALLBACKRSP          CHAR(2) default '00' not null,
  EMVENCSCH            NUMBER(5) default 0 not null,
  EMVICCVER            NUMBER(5) default 0 not null,
  EMVODA               NUMBER(5) default 0 not null,
  AMTRTILOC            FLOAT default 0 not null,
  CURRTILOC            CHAR(3) default ' ' not null,
  AMTRTIINT            FLOAT default 0 not null,
  CURRTIINT            CHAR(3) default ' ' not null,
  ICCPINFMT            NUMBER(5) default 0 not null,
  SCRIPTSET            NUMBER(5) default 0 not null,
  DENYMCC              VARCHAR2(192) default ' ' not null,
  MAXLOAD              FLOAT default 0 not null,
  MAXBAL               FLOAT default 0 not null,
  RISK_PROF_CODE       VARCHAR2(8) default ' ' not null,
  AUTH_PARAMS          VARCHAR2(255) default ' ' not null,
  FEATURES             CHAR(32) default '00000000000001110000000000000000' not null,
  ICCKEYDEV            CHAR(1) default 'A' not null,
  PREAUTH_BLK_LIM      FLOAT default 0.0 not null,
  PREAUTH_TOT_LIM      FLOAT default 0.0 not null,
  CAT_PARAMS           VARCHAR2(127) default ' ' not null,
  OPTIONS              CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null,
  PREAUTH_EXPIRY       NUMBER(5) default 32767 not null,
  ID                   NUMBER(10) default 0 not null,
  CRDSTATUSTRANSSET_ID NUMBER(10) default 0 not null,
  VALIDITY             NUMBER(5) default -1 not null,
  MINVALDURISS         NUMBER(5) default 9999 not null,
  MINVALDURDMG         NUMBER(5) default 60 not null,
  RNWPSTEXPPERIOD      NUMBER(5) default -30 not null,
  RNWPREEXPPERIOD      NUMBER(5) default 50 not null,
  RNWEARLYPERIOD       NUMBER(5) default 0 not null,
  USRDATA1             VARCHAR2(32) default ' ' not null,
  USRDATA2             VARCHAR2(32) default ' ' not null,
  CRDPLSTCTYP_ID       NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODUCT
  add constraint UNQ_CRDPRODUCT_I_P unique (CRDFORMAT_ID, PRODNUM)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPRODUCT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODUCT (CRDPRODUCT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDPRODUCTD
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODUCTD
(
  CRDPRODUCT_ID NUMBER(10) not null,
  VERNO_CTX     NUMBER(10) default 1 not null,
  LOCALEDEF_ID  NUMBER(10),
  DESCR         VARCHAR2(128),
  SHORT_DESCR   VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDPROGRAM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDPROGRAM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  PROGREF     VARCHAR2(6) not null,
  DESCR       VARCHAR2(64) not null,
  ADDRL1      VARCHAR2(35) not null,
  ADDRL2      VARCHAR2(35) not null,
  CITY        VARCHAR2(40) not null,
  CONTACTNAME VARCHAR2(30) not null,
  CONTACTNO   VARCHAR2(20) not null,
  POSTCODE    VARCHAR2(10) not null,
  COUNTRYCODE CHAR(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDPROGRAM on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPROGRAM (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDPROGRAM_REF on OPS$YUFU_CHINA_PS_RUN_BAK.CRDPROGRAM (INST_ID, PROGREF)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDROUTING
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDROUTING
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  IID            VARCHAR2(11) not null,
  DESCR          VARCHAR2(25) not null,
  EXCLUDE        CHAR(1) not null,
  AUTHSVC        VARCHAR2(15) not null,
  FINSVC         VARCHAR2(15) not null,
  ICHGSVC        VARCHAR2(15) not null,
  FECODE         VARCHAR2(8) not null,
  SCHEME         VARCHAR2(12) not null,
  ALLOWSVC       VARCHAR2(192) not null,
  LOCAL_USE      CHAR(1) not null,
  SETTLETYPE     CHAR(1) not null,
  PANLENS        VARCHAR2(12) not null,
  SVCCODES       VARCHAR2(20) not null,
  LUHNLEN        NUMBER(5) not null,
  STARTFMT       VARCHAR2(4) not null,
  ENDFMT         VARCHAR2(4) not null,
  ISSLEN         NUMBER(5) not null,
  POSNISS        NUMBER(5) not null,
  POSNEXP        NUMBER(5) not null,
  POSNSTART      NUMBER(5) not null,
  POSNSVC        NUMBER(5) not null,
  POSNCVV        NUMBER(5) not null,
  POSNPVV        NUMBER(5) not null,
  OUTBTCHTYPE    NUMBER(5) not null,
  OUTATMBTCHTYPE NUMBER(5) not null,
  SUBADDRESS     VARCHAR2(16) not null,
  CURBILL        CHAR(3) default ' ' not null,
  CURSET         CHAR(3) default ' ' not null,
  RATEINST_ID    NUMBER(10) default 0 not null,
  RATEPROD_ID    NUMBER(10) default 0 not null,
  EMVADVSVC      VARCHAR2(15) default ' ' not null,
  OPTIONS        CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDROUTING on OPS$YUFU_CHINA_PS_RUN_BAK.CRDROUTING (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDRPLACE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDRPLACE
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  DATERPLC      DATE not null,
  USR           VARCHAR2(15) not null,
  REASON        VARCHAR2(30) not null,
  NEW_CRDDET_ID NUMBER(10) default 0 not null,
  OLD_CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDRPLACE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDRPLACE (OLD_CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDSTATUS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUS
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  STATCODE   CHAR(2) not null,
  SYSDEF     CHAR(1) not null,
  DESCR      VARCHAR2(20) not null,
  ACTIONCODE CHAR(1) not null,
  RSPCODE    CHAR(2) not null,
  CANCELED   CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUS (STATCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CRDSTATUSD
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSD
(
  STATCODE     CHAR(2),
  VERNO_CTX    NUMBER(10) default 1 not null,
  LOCALEDEF_ID NUMBER(10),
  DESCR        VARCHAR2(128),
  SHORT_DESCR  VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDSTATUSTRANS
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANS
(
  ID                   NUMBER(10) not null,
  VERNO_CTX            NUMBER(10) default 1 not null,
  CRDSTATUSTRANSSET_ID NUMBER(10) not null,
  STATCODE_FROM        CHAR(2) not null,
  STATCODE_TO          CHAR(2) not null,
  DESCR                VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDSTATUSTRANS_STATCODE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANS (CRDSTATUSTRANSSET_ID, STATCODE_FROM, STATCODE_TO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDSTATUSTRANSSET
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANSSET
(
  ID        NUMBER(10) not null,
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) not null,
  SETNAME   VARCHAR2(12) not null,
  DESCR     VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CRDSTATUSTRANSSET_SETNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANSSET (INST_ID, SETNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDSTMT
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTMT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  STMTCYCLE   NUMBER(5) not null,
  STMTPRNDATE DATE not null,
  PRVSTMTDATE DATE not null,
  NXTSTMTDATE DATE not null,
  CRDDET_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDSTMT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTMT (CRDDET_ID, STMTPRNDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CRDSTMT_NXTSTMTDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTMT (NXTSTMTDATE, PRVSTMTDATE, CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDSUPDOC
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSUPDOC
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CRDDET_ID  NUMBER(10) not null,
  SUPDOCTYPE NUMBER(5) not null,
  DOCREF1    VARCHAR2(32) not null,
  DOCREF2    VARCHAR2(32) not null,
  CRDEFFDATE DATE not null,
  CRDEXPDATE DATE not null,
  DOCEFFDATE DATE not null,
  DOCEXPDATE DATE not null,
  USRDATA1   VARCHAR2(32) not null,
  USRDATA2   VARCHAR2(32) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CRDSUPDOC
  add constraint UNQ_CRDSUPDOC_CRD_SUPDOC_REF1 unique (CRDDET_ID, SUPDOCTYPE, DOCREF1)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_SUPDOC_DOCREF1 on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSUPDOC (SUPDOCTYPE, DOCREF1)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_SUPDOC_DOCREF2 on OPS$YUFU_CHINA_PS_RUN_BAK.CRDSUPDOC (SUPDOCTYPE, DOCREF2)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDTELCODE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDTELCODE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  TELECODE  NUMBER(10) not null,
  STATUS    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDTELCODE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDTELCODE (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDTELNOTE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDTELNOTE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CRDDET_ID NUMBER(10) default 0 not null,
  EXPDATE   DATE not null,
  TELECODE  NUMBER(10) not null,
  ACTION    NUMBER(5) not null,
  DATEIN    DATE not null,
  TIMEIN    NUMBER(10) not null,
  DATESENT  DATE,
  TIMESENT  NUMBER(10),
  SENT      NUMBER(5) not null,
  ATTEMPTS  NUMBER(5) not null,
  ERRCODE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDTELNOTE on OPS$YUFU_CHINA_PS_RUN_BAK.CRDTELNOTE (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDTRACKFORMAT
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDTRACKFORMAT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  REFCODE      VARCHAR2(16) not null,
  CRDFORMAT_ID NUMBER(10) not null,
  T1FMT        VARCHAR2(78) not null,
  T2FMT        VARCHAR2(40) not null,
  T3FMT        VARCHAR2(109) not null,
  T1FMTCL      VARCHAR2(78) not null,
  T2FMTCL      VARCHAR2(39) not null,
  SHORT_DESCR  VARCHAR2(20) not null,
  DESCR        VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDTRACKFORMAT on OPS$YUFU_CHINA_PS_RUN_BAK.CRDTRACKFORMAT (CRDFORMAT_ID, REFCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CRDVEL
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CRDVEL
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  CURRCODE   CHAR(3) not null,
  DATE1      DATE not null,
  NUM_PURCH1 NUMBER(5) not null,
  VAL_PURCH1 FLOAT not null,
  NUM_CASH1  NUMBER(5) not null,
  VAL_CASH1  FLOAT not null,
  DATE2      DATE not null,
  NUM_PURCH2 NUMBER(5) not null,
  VAL_PURCH2 FLOAT not null,
  NUM_CASH2  NUMBER(5) not null,
  VAL_CASH2  FLOAT not null,
  DATE3      DATE not null,
  NUM_PURCH3 NUMBER(5) not null,
  VAL_PURCH3 FLOAT not null,
  NUM_CASH3  NUMBER(5) not null,
  VAL_CASH3  FLOAT not null,
  DATE4      DATE not null,
  NUM_PURCH4 NUMBER(5) not null,
  VAL_PURCH4 FLOAT not null,
  NUM_CASH4  NUMBER(5) not null,
  VAL_CASH4  FLOAT not null,
  CRDDET_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CRDVEL on OPS$YUFU_CHINA_PS_RUN_BAK.CRDVEL (CRDDET_ID, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CTXSTATEMENT
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CTXSTATEMENT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  KEYDATA   VARCHAR2(32) not null,
  CTXDATE   DATE not null,
  DATA      CLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CTXSTATEMENT on OPS$YUFU_CHINA_PS_RUN_BAK.CTXSTATEMENT (INST_ID, KEYDATA, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CUPSBIN
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUPSBIN
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  BIN           VARCHAR2(6) not null,
  PROCBIN       VARCHAR2(6) not null,
  REGION        NUMBER(5) not null,
  COUNTRYCODE   CHAR(2) not null,
  BINTYPE       CHAR(1) not null,
  PARTICIPATION CHAR(1) not null,
  TESTIND       CHAR(1) not null,
  OBOIND        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUPSBIN on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSBIN (BIN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CUPSCRDBILL
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUPSCRDBILL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PANLOW    CHAR(19) not null,
  PANHIGH   CHAR(19) not null,
  CURBILL   CHAR(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUPSCRDBILL on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSCRDBILL (PANLOW, PANHIGH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CUPSPVV
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUPSPVV
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PAN       VARCHAR2(19) not null,
  SEQNO     NUMBER(5) not null,
  EXPDATE   DATE not null,
  PVV       VARCHAR2(4) not null,
  PVKI      CHAR(1) not null,
  DATEIN    DATE not null,
  TIMEIN    NUMBER(10) not null,
  CTXNEW    NUMBER(5) not null,
  DATESENT  DATE,
  TIMESENT  NUMBER(10),
  SENT      NUMBER(5) not null,
  ATTEMPTS  NUMBER(5) not null,
  ERRCODE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUPSPVV on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSPVV (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CUPSROUTE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUPSROUTE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACLEN     VARCHAR2(2) not null,
  IIDLEN    VARCHAR2(2) not null,
  IID       VARCHAR2(12) not null,
  FROM_TYPE CHAR(1) not null,
  BIN_FLAG  CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUPSROUTE on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSROUTE (IIDLEN, IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CUPSROUTE_IID on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSROUTE (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CUPSTXTMSG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUPSTXTMSG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  DATECPT     DATE not null,
  TIMECPT     NUMBER(10) not null,
  DATEXMIT    DATE not null,
  TIMEXMIT    NUMBER(10) not null,
  STAN        NUMBER(10) not null,
  RRN         VARCHAR2(12) not null,
  FIID        VARCHAR2(11) not null,
  FIIDCOUNTRY CHAR(3) not null,
  RIID        VARCHAR2(11) not null,
  RIIDCOUNTRY CHAR(3) not null,
  FNCODE      NUMBER(5) not null,
  TXTMSG      VARCHAR2(254) not null,
  RSPCODE     CHAR(2) not null,
  ORIGIN      CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUPSTXTMSG on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSTXTMSG (FIID, DATEXMIT, TIMEXMIT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CUPSTXTMSG_VITXTDATE on OPS$YUFU_CHINA_PS_RUN_BAK.CUPSTXTMSG (DATECPT DESC, TIMECPT DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table CURRATE
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CURRATE
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  INST_ID       NUMBER(10) default 0 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  BASECURCODE   VARCHAR2(3) not null,
  CURCODE       VARCHAR2(3) not null,
  BUYRATE       FLOAT not null,
  SELLRATE      FLOAT not null,
  COMRATE       FLOAT not null,
  FIXEDCOM      FLOAT not null,
  MINCOM        FLOAT not null,
  MAXCOM        FLOAT not null,
  MULTIPLIER    NUMBER(10) not null,
  EFFDATE       DATE not null,
  EFFTIME       NUMBER(10) not null,
  EXPDATE       DATE not null,
  EXPTIME       NUMBER(10) not null,
  QUOTE         CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CURRATE on OPS$YUFU_CHINA_PS_RUN_BAK.CURRATE (INST_ID, CRDPRODUCT_ID, BASECURCODE, CURCODE, EFFDATE, EFFTIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CURRENCY
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CURRENCY
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  CURRCODE   CHAR(3) not null,
  ALPHACODE  CHAR(3) not null,
  DEC_PLACES NUMBER(5) not null,
  DESCRTAG   NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CURRENCY on OPS$YUFU_CHINA_PS_RUN_BAK.CURRENCY (CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CURRENCY_ALPHA on OPS$YUFU_CHINA_PS_RUN_BAK.CURRENCY (ALPHACODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CUSTCRD
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTCRD
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CUSTTYPE   NUMBER(5) not null,
  CRDDET_ID  NUMBER(10) default 0 not null,
  CUSTDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUSTCRD on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTCRD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CUSTCRD_CUSTTYPE on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTCRD (CUSTDET_ID, CRDDET_ID, CUSTTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CUSTDET
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  INST_ID         NUMBER(10) default 0 not null,
  CUSTCODE        VARCHAR2(12) not null,
  TITLE           VARCHAR2(10) default ' ' not null,
  FIRSTNAME       VARCHAR2(50) default ' ' not null,
  LASTNAME        VARCHAR2(50) default ' ' not null,
  TYPEID          NUMBER(5) not null,
  ADDRL0          VARCHAR2(75) default ' ' not null,
  ADDRL1          VARCHAR2(35) default ' ' not null,
  ADDRL2          VARCHAR2(35) default ' ' not null,
  ADDRL3          VARCHAR2(35) default ' ' not null,
  HOME_CITY       VARCHAR2(40) default ' ' not null,
  HOME_TEL        VARCHAR2(20) default ' ' not null,
  WORK_ADDR1      VARCHAR2(30) default ' ' not null,
  WORK_ADDR2      VARCHAR2(30) default ' ' not null,
  WORK_ADDR3      VARCHAR2(30) default ' ' not null,
  WORK_CITY       VARCHAR2(40) default ' ' not null,
  WORK_TEL        VARCHAR2(20) default ' ' not null,
  STMT_CODE       NUMBER(5) default 0 not null,
  WORK_POSTCODE   VARCHAR2(10) default ' ' not null,
  POSTCODE        VARCHAR2(10) default ' ' not null,
  PO_BOX          VARCHAR2(8) default ' ' not null,
  COLLECTION_ZONE NUMBER(5) default 0 not null,
  PROF_CODE       NUMBER(5) default 0 not null,
  MARRIED         CHAR(1) not null,
  SEX             CHAR(1) not null,
  ID_NUMBER       VARCHAR2(25) default ' ' not null,
  DATE_ACCEPTED   DATE not null,
  REFUSE_CHEQUE   CHAR(1) default ' ' not null,
  NUM_BOUNCED1    NUMBER(5) default 0 not null,
  NUM_BOUNCED2    NUMBER(5) default 0 not null,
  MEMO            CLOB,
  USRDATA1        VARCHAR2(12) default ' ' not null,
  USRDATA2        VARCHAR2(12) default ' ' not null,
  USRDATA3        VARCHAR2(12) default ' ' not null,
  MAILSHOTS       CHAR(1) default 0 not null,
  DATE_BIRTH      DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  PRFLANG         CHAR(2) default 'GB' not null,
  ADDRIND         NUMBER(5) default 0 not null,
  EMAIL           VARCHAR2(64) default ' ' not null,
  FAX             VARCHAR2(20) default ' ' not null,
  USRDATA4        VARCHAR2(32) default ' ' not null,
  CAT_PARAMS      VARCHAR2(127) default ' ' not null,
  ID              NUMBER(10) default 0 not null,
  LATIN_TITLE     VARCHAR2(10) default ' ' not null,
  LATIN_FIRSTNAME VARCHAR2(50) default ' ' not null,
  LATIN_LASTNAME  VARCHAR2(50) default ' ' not null,
  UC_FIRSTNAME    VARCHAR2(50) default ' ' not null,
  UC_LASTNAME     VARCHAR2(50) default ' ' not null,
  NATIONAL_ID     VARCHAR2(22) default ' ' not null,
  WORK_COUNTY     VARCHAR2(20) default ' ' not null,
  WORK_CTRY       CHAR(3) default ' ' not null,
  HOME_COUNTY     VARCHAR2(20) default ' ' not null,
  HOME_CTRY       CHAR(3) default ' ' not null,
  MOB_TEL         VARCHAR2(20) default ' ' not null,
  EXT_CUSTCODE    VARCHAR2(20) default ' ' not null,
  CAT_CUSTSEG_ID  NUMBER(10) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET
  add constraint PK_CUSTDET primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET
  add constraint HASH_CUSTDET unique (INST_ID, CUSTCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CUSTDET_CAT_CUSTSEG_ID on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET (CAT_CUSTSEG_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_CUSTDET_ID_INST on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET (INST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_FIRSTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET (FIRSTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_ID_NUMBER on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET (ID_NUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_LASTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET (LASTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CUSTDET_STCS
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_STCS
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  INST_ID         NUMBER(10) default 0 not null,
  CUSTCODE        VARCHAR2(12) not null,
  TITLE           VARCHAR2(10) default ' ' not null,
  FIRSTNAME       VARCHAR2(50) default ' ' not null,
  LASTNAME        VARCHAR2(50) default ' ' not null,
  TYPEID          NUMBER(5) not null,
  ADDRL0          VARCHAR2(75) default ' ' not null,
  ADDRL1          VARCHAR2(35) default ' ' not null,
  ADDRL2          VARCHAR2(35) default ' ' not null,
  ADDRL3          VARCHAR2(35) default ' ' not null,
  HOME_CITY       VARCHAR2(40) default ' ' not null,
  HOME_TEL        VARCHAR2(20) default ' ' not null,
  WORK_ADDR1      VARCHAR2(30) default ' ' not null,
  WORK_ADDR2      VARCHAR2(30) default ' ' not null,
  WORK_ADDR3      VARCHAR2(30) default ' ' not null,
  WORK_CITY       VARCHAR2(40) default ' ' not null,
  WORK_TEL        VARCHAR2(20) default ' ' not null,
  STMT_CODE       NUMBER(5) default 0 not null,
  WORK_POSTCODE   VARCHAR2(10) default ' ' not null,
  POSTCODE        VARCHAR2(10) default ' ' not null,
  PO_BOX          VARCHAR2(8) default ' ' not null,
  COLLECTION_ZONE NUMBER(5) default 0 not null,
  PROF_CODE       NUMBER(5) default 0 not null,
  MARRIED         CHAR(1) not null,
  SEX             CHAR(1) not null,
  ID_NUMBER       VARCHAR2(25) default ' ' not null,
  DATE_ACCEPTED   DATE not null,
  REFUSE_CHEQUE   CHAR(1) default ' ' not null,
  NUM_BOUNCED1    NUMBER(5) default 0 not null,
  NUM_BOUNCED2    NUMBER(5) default 0 not null,
  MEMO            CLOB,
  USRDATA1        VARCHAR2(12) default ' ' not null,
  USRDATA2        VARCHAR2(12) default ' ' not null,
  USRDATA3        VARCHAR2(12) default ' ' not null,
  MAILSHOTS       CHAR(1) default 0 not null,
  DATE_BIRTH      DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  PRFLANG         CHAR(2) default 'GB' not null,
  ADDRIND         NUMBER(5) default 0 not null,
  EMAIL           VARCHAR2(64) default ' ' not null,
  FAX             VARCHAR2(20) default ' ' not null,
  USRDATA4        VARCHAR2(32) default ' ' not null,
  CAT_PARAMS      VARCHAR2(127) default ' ' not null,
  ID              NUMBER(10) default 0 not null,
  LATIN_TITLE     VARCHAR2(10) default ' ' not null,
  LATIN_FIRSTNAME VARCHAR2(50) default ' ' not null,
  LATIN_LASTNAME  VARCHAR2(50) default ' ' not null,
  UC_FIRSTNAME    VARCHAR2(50) default ' ' not null,
  UC_LASTNAME     VARCHAR2(50) default ' ' not null,
  NATIONAL_ID     VARCHAR2(22) default ' ' not null,
  WORK_COUNTY     VARCHAR2(20) default ' ' not null,
  WORK_CTRY       CHAR(3) default ' ' not null,
  HOME_COUNTY     VARCHAR2(20) default ' ' not null,
  HOME_CTRY       CHAR(3) default ' ' not null,
  MOB_TEL         VARCHAR2(20) default ' ' not null,
  EXT_CUSTCODE    VARCHAR2(20) default ' ' not null,
  CAT_CUSTSEG_ID  NUMBER(10) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUSTDET_STCS on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_STCS (INST_ID, CUSTCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_STCS_FIRSTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_STCS (FIRSTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_STCS_ID_NUMBER on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_STCS (ID_NUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CUSTDET_STCS_LASTNAME on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_STCS (LASTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CUSTLOGIN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CUSTLOGIN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  LOGINID    VARCHAR2(64) not null,
  CUSTDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CUSTLOGIN on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTLOGIN (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CUSTLOGIN_I_L on OPS$YUFU_CHINA_PS_RUN_BAK.CUSTLOGIN (CUSTDET_ID, LOGINID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table CYCLEDET
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.CYCLEDET
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  INST_ID         NUMBER(10) default 0 not null,
  CYCLE_LEN       NUMBER(5) not null,
  CYCLE_BEGIN     NUMBER(5) not null,
  DESCR           VARCHAR2(32) not null,
  CURRENTCYCLE_ID INTEGER default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_CYCLEDET on OPS$YUFU_CHINA_PS_RUN_BAK.CYCLEDET (INST_ID, DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DATASYNCHRONIZEREOCRD
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DATASYNCHRONIZEREOCRD
(
  ID           NUMBER(10),
  DATABASENAME VARCHAR2(50),
  CREATEDATE   DATE default sysdate,
  DATADATE     DATE
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.DATASYNCHRONIZEREOCRD.ID
  is 'ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.DATASYNCHRONIZEREOCRD.DATABASENAME
  is 'Êý¾Ý¿âÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.DATASYNCHRONIZEREOCRD.CREATEDATE
  is 'Ìí¼ÓÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.DATASYNCHRONIZEREOCRD.DATADATE
  is '×îºóÍ¬²½Êý¾ÝÈÕÆÚ';

prompt
prompt Creating table DATE_DIM
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  CALENDAR_DATE     DATE not null,
  FULL_DESCR        VARCHAR2(29) not null,
  DAY_IN_EPOCH      NUMBER(10) not null,
  WEEK_IN_EPOCH     NUMBER(10) not null,
  MONTH_IN_EPOCH    NUMBER(10) not null,
  YEAR_IN_EPOCH     NUMBER(10) not null,
  DAY_NAME          VARCHAR2(9) not null,
  DAY_OF_WEEK       NUMBER(5) not null,
  DAY_IN_CAL_MONTH  NUMBER(5) not null,
  DAY_IN_CAL_YEAR   NUMBER(5) not null,
  WEEK_IN_CAL_YEAR  NUMBER(5) not null,
  LAST_DAY_IN_WEEK  NUMBER(5) not null,
  MONTH_NAME        VARCHAR2(9) not null,
  LAST_DAY_IN_MONTH NUMBER(5) not null,
  MONTH_IN_YEAR     NUMBER(5) not null,
  YEAR              NUMBER(5) not null,
  YEAR_MONTH        VARCHAR2(7) not null,
  YEAR_QUARTER      VARCHAR2(7) not null,
  HOLIDAY_IND       NUMBER(5) not null,
  WEEKDAY_IND       NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 3M
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM
  add constraint UNQ_DATE_DIM_DAY_IN_EPOCH unique (DAY_IN_EPOCH)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1664K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DATE_DIM on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (CALENDAR_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1984K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_DAY_IN_CAL_MONTH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (DAY_IN_CAL_MONTH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1472K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_DAY_IN_CAL_YEAR on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (DAY_IN_CAL_YEAR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1472K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_DAY_NAME on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (DAY_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_DAY_OF_WEEK on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (DAY_OF_WEEK)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 960K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_HOLIDAY_IND on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (HOLIDAY_IND)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 832K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_LAST_DAY_IN_MONTH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (LAST_DAY_IN_MONTH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 704K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_LAST_DAY_IN_WEEK on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (LAST_DAY_IN_WEEK)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 640K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_MONTH_IN_EPOCH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (MONTH_IN_EPOCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1600K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_MONTH_IN_YEAR on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (MONTH_IN_YEAR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1216K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_MONTH_NAME on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (MONTH_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1856K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_WEEKDAY_IND on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (WEEKDAY_IND)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_WEEK_IN_CAL_YEAR on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (WEEK_IN_CAL_YEAR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1216K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_WEEK_IN_EPOCH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (WEEK_IN_EPOCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1600K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_YEAR on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (YEAR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1472K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_YEAR_IN_EPOCH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (YEAR_IN_EPOCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1216K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_YEAR_MONTH on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (YEAR_MONTH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1984K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DATE_DIM_YEAR_QUARTER on OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM (YEAR_QUARTER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DBAUDIT
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DBAUDIT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  TBL_NAME   VARCHAR2(18) not null,
  TBL_COLUMN VARCHAR2(18) not null,
  KEY_VALUE  VARCHAR2(50) not null,
  OP_DATE    DATE not null,
  OP_TIME    NUMBER(10) not null,
  CMD        CHAR(1) not null,
  OP_SRC     CHAR(1) not null,
  USR_NAME   VARCHAR2(15) not null,
  OLD_VALUE  VARCHAR2(50) not null,
  NEW_VALUE  VARCHAR2(50) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DBAUDIT on OPS$YUFU_CHINA_PS_RUN_BAK.DBAUDIT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DBAUDIT_TBL_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.DBAUDIT (TBL_NAME, TBL_COLUMN, KEY_VALUE, OP_DATE, OP_TIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DBAUDIT_USR_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.DBAUDIT (USR_NAME, OP_DATE, OP_TIME, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table DCC_CURR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DCC_CURR
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  INST_ID       NUMBER(10) default 0 not null,
  SETREFCODE    VARCHAR2(32) not null,
  CURCODE       VARCHAR2(3) not null,
  IS_ACTIVE     NUMBER(5) default 1 not null,
  RATE_TABLE    VARCHAR2(12) default 'FOREX' not null,
  MARKUP        FLOAT default 0.0 not null,
  INDIRECT      NUMBER(5) default 0 not null,
  CURRATE_CPROD VARCHAR2(4) default 'DFLT' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DCC_CURR on OPS$YUFU_CHINA_PS_RUN_BAK.DCC_CURR (INST_ID, SETREFCODE, CURCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DESCR
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DESCR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  DESCRTAG  NUMBER(10) not null,
  DESCR     VARCHAR2(40) not null,
  LANG      VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 384K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DESCR on OPS$YUFU_CHINA_PS_RUN_BAK.DESCR (LANG, DESCRTAG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 256K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DESCR_110214
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DESCR_110214
(
  VERNO_CTX NUMBER(10) not null,
  DESCRTAG  NUMBER(10) not null,
  DESCR     VARCHAR2(40) not null,
  LANG      VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 256K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DVCEV
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DVCEV
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) default 0 not null,
  DVCTYPE   NUMBER(5) not null,
  DVCREF    VARCHAR2(16) not null,
  DATE_TIME CHAR(16) not null,
  DATELOCAL DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DVCEV on OPS$YUFU_CHINA_PS_RUN_BAK.DVCEV (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DVCEV_ZAP on OPS$YUFU_CHINA_PS_RUN_BAK.DVCEV (DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_DVCEV_EVENT on OPS$YUFU_CHINA_PS_RUN_BAK.DVCEV (INST_ID, DVCTYPE, DVCREF, DATE_TIME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table DVCEVDET
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.DVCEVDET
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  EV_ID     NUMBER(10) not null,
  DVCCODE   VARCHAR2(16) not null,
  DVCSTAT   VARCHAR2(4) not null,
  DATELOCAL DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DVCEVDET on OPS$YUFU_CHINA_PS_RUN_BAK.DVCEVDET (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_DVCEVDET_ZAP on OPS$YUFU_CHINA_PS_RUN_BAK.DVCEVDET (DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table EMVCMDAUTO
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDAUTO
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SCRIPTSET NUMBER(5) not null,
  CMDSEQ    NUMBER(10) not null,
  ACTIVE    CHAR(1) default 'N' not null,
  TAG       NUMBER(5) default 72 not null,
  COMMAND   VARCHAR2(255) not null,
  LOGIC     VARCHAR2(255) not null,
  CMDTYPE   NUMBER(10) not null,
  CRITERIA  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EMVCMDAUTO on OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDAUTO (SCRIPTSET, CMDSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EMVCMDLOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDLOG
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  CRDEXPDATE   CHAR(4) not null,
  CMDID        NUMBER(10) not null,
  PRIORITY     NUMBER(5) not null,
  MAXTRIES     NUMBER(10) not null,
  TRIESLEFT    NUMBER(10) not null,
  CREATEDATE   DATE not null,
  EXPIRYDATE   DATE not null,
  TAG          NUMBER(5) not null,
  CMDTYPE      NUMBER(10) not null,
  COMMAND      VARCHAR2(255) not null,
  REASON       NUMBER(5) not null,
  CRITERIA     NUMBER(5) not null,
  SENTATC      NUMBER(10) not null,
  SENTTLOGID   NUMBER(20) not null,
  SENTDATE     DATE not null,
  SCRIPTID     NUMBER(10) not null,
  SCMDSEQ      NUMBER(5) not null,
  TCMDSEQ      NUMBER(5) not null,
  CONFDATE     DATE not null,
  SRSPCODE     NUMBER(5) not null,
  SSEQNO       NUMBER(5) not null,
  RSPNUMCMD    NUMBER(5) not null,
  RSPSCRFAILED NUMBER(5) not null,
  STATUS       NUMBER(5) not null,
  RESULTS      NUMBER(5) not null,
  CRDDET_ID    NUMBER(10) default 0 not null,
  CMDREF       NUMBER(10)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EMVCMDLOG on OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDLOG (CMDID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_EMVCMDLOG_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDLOG (CRDDET_ID, CRDEXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EMVCMDSRC
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDSRC
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  SCRIPTSET  NUMBER(5) not null,
  CMDTYPE    NUMBER(10) not null,
  PRIORITY   NUMBER(5) not null,
  MAXTRIES   NUMBER(10) not null,
  EXPIREDAYS NUMBER(10) not null,
  TAG        NUMBER(5) not null,
  COMMAND    VARCHAR2(255) not null,
  DEF_REASON NUMBER(5) not null,
  CRITERIA   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EMVCMDSRC on OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDSRC (SCRIPTSET, CMDTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EMVCRPTVER
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EMVCRPTVER
(
  VERNO_CTX NUMBER(10) default 1 not null,
  GID       NUMBER(5) not null,
  VER       NUMBER(5) not null,
  CRPTTYPE  NUMBER(5) not null,
  FIELDLIST VARCHAR2(255) not null,
  APPEND    VARCHAR2(16) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EMVCRPTVER on OPS$YUFU_CHINA_PS_RUN_BAK.EMVCRPTVER (GID, VER, CRPTTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EMVFIELD
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EMVFIELD
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(5) not null,
  FBNAME    VARCHAR2(30) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EMVFIELD on OPS$YUFU_CHINA_PS_RUN_BAK.EMVFIELD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ENCKEY
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ENCKEY
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  KEYTYPE    NUMBER(5) not null,
  KEYSTATUS  NUMBER(5) not null,
  TSTFLAG    NUMBER(5) not null,
  REFCODE    VARCHAR2(16) not null,
  KEYSEQNO   NUMBER(5) not null,
  KEYVALUE   VARCHAR2(32) not null,
  PREVALUE   VARCHAR2(32) not null,
  CHECKVALUE VARCHAR2(32) not null,
  ACTDATE    DATE not null,
  ACTTIME    NUMBER(10) not null,
  EXPIRY     DATE not null,
  LONGKEYVAL VARCHAR2(64) default ' ' not null,
  ID         NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_ENCKEY on OPS$YUFU_CHINA_PS_RUN_BAK.ENCKEY (KEYTYPE, KEYSTATUS, TSTFLAG, REFCODE, KEYSEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ENCPRNFRMT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.ENCPRNFRMT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  FORMAT_TAG   VARCHAR2(15) not null,
  PRINT_FORMAT CLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EPSTATS
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EPSTATS
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10),
  MBRTAG      VARCHAR2(10) not null,
  CTXDATE     DATE default sysdate,
  ONUS        CHAR(1) not null,
  BRAND       VARCHAR2(4) not null,
  CRDPRODUCT  VARCHAR2(4) not null,
  CORP        CHAR(1) not null,
  DIM         CHAR(1) not null,
  ACQMETHOD   CHAR(1) not null,
  TXNTYPE     CHAR(1) not null,
  FORWARDTYPE CHAR(1) not null,
  CURORG      CHAR(3) not null,
  AMTORG      FLOAT not null,
  CURLCL      CHAR(3) not null,
  AMTLCL      FLOAT not null,
  COUNT       NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_EPSTATS_COMPOUND on OPS$YUFU_CHINA_PS_RUN_BAK.EPSTATS (MBRTAG, CTXDATE, BRAND, CRDPRODUCT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table EUROSTR
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EUROSTR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  DATELOCAL DATE not null,
  AIID      VARCHAR2(11) not null,
  STAN      NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EUROSTR on OPS$YUFU_CHINA_PS_RUN_BAK.EUROSTR (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_EUROSTR_STR on OPS$YUFU_CHINA_PS_RUN_BAK.EUROSTR (STAN, AIID, DATELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table EVENTCAT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EVENTCAT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  EVENT     VARCHAR2(12) not null,
  DESCRTAG  NUMBER(10) not null,
  SEVERITY  NUMBER(5) not null,
  FRMTREF   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EVENTCAT on OPS$YUFU_CHINA_PS_RUN_BAK.EVENTCAT (EVENT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table EVLOG
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.EVLOG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  EVENT     VARCHAR2(12) not null,
  FMODULE   VARCHAR2(2) not null,
  FPRG      VARCHAR2(8) not null,
  FDATE     DATE not null,
  FTIME     NUMBER(10) not null,
  EVDATA    VARCHAR2(126) not null,
  ACKDATE   DATE not null,
  ACKTIME   NUMBER(10) not null,
  ACKUSR    VARCHAR2(15) not null,
  ACKDESCR  VARCHAR2(50) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 10M
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_EVLOG on OPS$YUFU_CHINA_PS_RUN_BAK.EVLOG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 2M
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_EVLOG_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.EVLOG (FDATE, FTIME, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 448K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FBRULES
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FBRULES
(
  VERNO_CTX NUMBER(10) default 1 not null,
  RSKPRF_ID NUMBER(10) not null,
  ATM       NUMBER(5) not null,
  POS       NUMBER(5) not null,
  TEL       NUMBER(5) not null,
  MAIL      NUMBER(5) not null,
  INET      NUMBER(5) not null,
  RECRTXNS  NUMBER(5) not null,
  OTHER     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FBRULES on OPS$YUFU_CHINA_PS_RUN_BAK.FBRULES (RSKPRF_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FC_CARDTYPECYCLE
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CARDTYPECYCLE
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  ID               NUMBER(10) not null,
  INST_ID          NUMBER(10) default 0 not null,
  CAT_ISSCYCFEE_ID NUMBER(10) not null,
  CRDPRODUCT_ID    NUMBER(10) default 0 not null,
  TYPE_ID          NUMBER(10) not null,
  CYCLEDET_ID      NUMBER(10) not null,
  NEXTSTART_EPOCH  NUMBER(10) not null,
  LAST_PROC_EPOCH  NUMBER(10) not null,
  IN_PROGRESS      NUMBER(5) not null,
  NO_REPEAT_DAYS   NUMBER(10) not null,
  ACTIVITY_ID      NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FC_CARDTYPECYCLE on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CARDTYPECYCLE (CRDPRODUCT_ID, CAT_ISSCYCFEE_ID, TYPE_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FC_CARDTYPECYCLE_HIST
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CARDTYPECYCLE_HIST
(
  VERNO_CTX           NUMBER(10) default 1 not null,
  FC_CARDTYPECYCLE_ID NUMBER(10) not null,
  TIMECHG             TIMESTAMP(3) not null,
  ACTION              CHAR(1) not null,
  INST_ID             NUMBER(10) default 0 not null,
  CAT_ISSCYCFEE_ID    NUMBER(10) not null,
  CRDPRODUCT_ID       NUMBER(10) default 0 not null,
  TYPE_ID             NUMBER(10) not null,
  CYCLEDET_ID         NUMBER(10) not null,
  NEXTSTART_EPOCH     NUMBER(10) not null,
  LAST_PROC_EPOCH     NUMBER(10) not null,
  IN_PROGRESS         NUMBER(5) not null,
  NO_REPEAT_DAYS      NUMBER(10) not null,
  ACTIVITY_ID         NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_FC_CARDTYPECYCLE_HIST_TC on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CARDTYPECYCLE_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FC_CHARGEDET
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  INST_ID      NUMBER(10) default 0 not null,
  CHARGETAG    VARCHAR2(32) not null,
  CHARGETYPE   NUMBER(5) not null,
  CURCHARGE    CHAR(3) not null,
  THRESHOLD_ID NUMBER(10) not null,
  AMTTYPE      NUMBER(5) not null,
  PERCENT      FLOAT not null,
  MINVAL       FLOAT not null,
  MAXVAL       FLOAT not null,
  FLATVAL      FLOAT not null,
  OFFSET_APPLY NUMBER(5) not null,
  ACTIVITY_ID  NUMBER(10) default 0 not null,
  APPLRULE     NUMBER(5) default 1 not null,
  APPLPRIORITY NUMBER(5) default 100 not null,
  EXPOFFSET    NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET
  add constraint UNQ_FC_CHARGEDET_THRESHOLD_ID unique (THRESHOLD_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FC_CHARGEDET on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET (INST_ID, CHARGETAG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FC_CHARGEDET_HIST
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_HIST
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  FC_CHARGEDET_ID NUMBER(10) not null,
  TIMECHG         TIMESTAMP(3) not null,
  ACTION          CHAR(1) not null,
  INST_ID         NUMBER(10) default 0 not null,
  CHARGETAG       VARCHAR2(32) not null,
  CHARGETYPE      NUMBER(5) not null,
  CURCHARGE       CHAR(3) not null,
  THRESHOLD_ID    NUMBER(10) not null,
  AMTTYPE         NUMBER(5) not null,
  PERCENT         FLOAT not null,
  MINVAL          FLOAT not null,
  MAXVAL          FLOAT not null,
  FLATVAL         FLOAT not null,
  OFFSET_APPLY    NUMBER(5) not null,
  ACTIVITY_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TIMECHG_FC_CHARGEDET_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FC_CHARGEDET_OVRD
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  FC_CHARGEDET_ID NUMBER(10) not null,
  SCOPEDET_ID     NUMBER(10) not null,
  SCOPEKEY        VARCHAR2(60) not null,
  PERCENT         FLOAT not null,
  MINVAL          FLOAT not null,
  MAXVAL          FLOAT not null,
  FLATVAL         FLOAT not null,
  PRIORITY        NUMBER(5) not null,
  EFFDATE         DATE not null,
  PURGEDATE       DATE not null,
  ACTIVITY_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD
  add constraint UNQ_CHARGEDET_OVRD_CID_PRIO unique (FC_CHARGEDET_ID, PRIORITY)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FC_CHARGEDET_OVRD on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_CHARGEDET_OVRD_C_S_P on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD (FC_CHARGEDET_ID, SCOPEDET_ID, SCOPEKEY, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FC_CHARGEDET_OVRD_HIST
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD_HIST
(
  VERNO_CTX            NUMBER(10) default 1 not null,
  FC_CHARGEDET_OVRD_ID NUMBER(10) not null,
  TIMECHG              TIMESTAMP(3) not null,
  ACTION               CHAR(1) not null,
  FC_CHARGEDET_ID      NUMBER(10) not null,
  SCOPEDET_ID          NUMBER(10) not null,
  SCOPEKEY             VARCHAR2(60) not null,
  PERCENT              FLOAT not null,
  MINVAL               FLOAT not null,
  MAXVAL               FLOAT not null,
  FLATVAL              FLOAT not null,
  PRIORITY             NUMBER(5) not null,
  EFFDATE              DATE not null,
  PURGEDATE            DATE not null,
  ACTIVITY_ID          NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TIMECHG_FC_CHARGEDET_OVRD_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FDSHOST
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FDSHOST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  HOSTNAME  VARCHAR2(4) not null,
  WAITTIME  NUMBER(10) not null,
  DEQTRIES  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FDSHOST on OPS$YUFU_CHINA_PS_RUN_BAK.FDSHOST (HOSTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FDSRULES
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FDSRULES
(
  VERNO_CTX NUMBER(10) default 1 not null,
  RULEID    NUMBER(10) not null,
  HOSTNAME  VARCHAR2(4) not null,
  ACTIVE    CHAR(1) default 'N' not null,
  PRIORITY  NUMBER(5) not null,
  RULE      VARCHAR2(255) not null,
  DESCR     VARCHAR2(255) not null,
  EFFDATE   DATE not null,
  EXPDATE   DATE not null,
  SENDFLAG  NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FDSRULES on OPS$YUFU_CHINA_PS_RUN_BAK.FDSRULES (RULEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_FDSRULES_H_S_P on OPS$YUFU_CHINA_PS_RUN_BAK.FDSRULES (HOSTNAME, SENDFLAG, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FDSUPLOAD
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  TLOGID       NUMBER(10) not null,
  HOSTNAME     VARCHAR2(4) not null,
  ATTEMPTS     NUMBER(5) not null,
  TXNSTAT      NUMBER(5) not null,
  MSGCLS       CHAR(1) not null,
  AIID         VARCHAR2(11) not null,
  STAN         NUMBER(10) not null,
  DATELOCAL    DATE not null,
  TIMELOCAL    NUMBER(10) not null,
  CURTXN       CHAR(3) not null,
  AMTTXN       FLOAT not null,
  SRCBRNCODE   VARCHAR2(8) not null,
  DSTBRNCODE   VARCHAR2(8) not null,
  BLKAMT       FLOAT not null,
  AVLBAL       FLOAT not null,
  CRDSTATCODE  CHAR(2) not null,
  ACCSTATCODE  CHAR(2) not null,
  C_ACTIONCODE CHAR(1) not null,
  C_RSPCODE    CHAR(2) not null,
  C_RSPSRC     CHAR(2) not null,
  BEGINTIME    NUMBER(10) not null,
  INST_ID      NUMBER(10) default 0 not null,
  VPAN         VARCHAR2(19) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FDSUPLOAD on OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_FDSUPLOAD_ATTEMPTS on OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD (ATTEMPTS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_FDSUPLOAD_H_T_M_D_T on OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD (HOSTNAME, TXNSTAT, MSGCLS, DATELOCAL, TIMELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_FDSUPLOAD_ID on OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FE
prompt =================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  INST_ID     NUMBER(10) default 0 not null,
  FECODE      VARCHAR2(8) not null,
  DESCR       VARCHAR2(20) not null,
  ADDRL1      VARCHAR2(35) not null,
  ADDRL2      VARCHAR2(35) not null,
  EXTFRMT     VARCHAR2(100) not null,
  EXTCMD      VARCHAR2(79) not null,
  CONTACTNAME VARCHAR2(20) not null,
  CONTACTNO   VARCHAR2(20) not null,
  COUNTRYCODE CHAR(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FE on OPS$YUFU_CHINA_PS_RUN_BAK.FE (FECODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FEECALC
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FEECALC
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  CTXDATE         DATE not null,
  MEM_FEE_ID      NUMBER(10) not null,
  SW_FEE_ID       NUMBER(10) not null,
  FE              VARCHAR2(8) not null,
  ISS_ROLE        NUMBER(5) not null,
  FEECUR          CHAR(3) not null,
  CASH_CNT        INTEGER not null,
  CASH_FEE        FLOAT not null,
  CASH_SWITCH     FLOAT not null,
  BALANCE_CNT     NUMBER(10) not null,
  BALANCE_FEE     FLOAT not null,
  BALANCE_SWITCH  FLOAT not null,
  DECLINED_CNT    NUMBER(10) not null,
  DECLINED_FEE    FLOAT not null,
  DECLINED_SWITCH FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FEECALC on OPS$YUFU_CHINA_PS_RUN_BAK.FEECALC (CTXDATE, FE, ISS_ROLE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FILEIMPHIST
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FILEIMPHIST
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  FILETYPE   NUMBER(5) not null,
  FILENAME   VARCHAR2(512) not null,
  FILESIZE   NUMBER(10) not null,
  CKSUM      NUMBER(10) not null,
  IMPDATE    DATE not null,
  IMPTIME    NUMBER(10) not null,
  CTXDATE    DATE not null,
  LASTRECNUM NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FILEIMPHIST on OPS$YUFU_CHINA_PS_RUN_BAK.FILEIMPHIST (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_FILEIMPHIST_CKSUM on OPS$YUFU_CHINA_PS_RUN_BAK.FILEIMPHIST (FILETYPE, CKSUM, FILESIZE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table FOREX
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FOREX
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  INST_ID       NUMBER(10) default 0 not null,
  REFCODE       VARCHAR2(32) not null,
  BASECURCODE   VARCHAR2(3) not null,
  CURCODE       VARCHAR2(3) not null,
  RATETYPE      NUMBER(5) not null,
  BUYRATE       FLOAT not null,
  SELLRATE      FLOAT not null,
  BUYMARKUP     FLOAT not null,
  SELLMARKUP    FLOAT not null,
  INDIRECT      NUMBER(5) not null,
  INDIRECTROUND NUMBER(5) not null,
  VALID_FROM    VARCHAR2(14) not null,
  VALID_TO      VARCHAR2(14) not null,
  EXT_REFCODE   CHAR(7) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_FOREX on OPS$YUFU_CHINA_PS_RUN_BAK.FOREX (INST_ID, REFCODE, BASECURCODE, CURCODE, VALID_FROM, VALID_TO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CURCODE_FOREX on OPS$YUFU_CHINA_PS_RUN_BAK.FOREX (INST_ID, REFCODE, CURCODE, BASECURCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FUKATRANSSTATISTICS
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FUKATRANSSTATISTICS
(
  ID            NUMBER(10),
  PROVINCE      VARCHAR2(30),
  TRANSCOUNT    NUMBER(10),
  TRANSSUMMONEY NUMBER(15,2),
  YEAR          VARCHAR2(6)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FUKATRANSSTATISTICSMONTHS
prompt ========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.FUKATRANSSTATISTICSMONTHS
(
  ID            NUMBER(10),
  PROVINCE      VARCHAR2(30),
  TRANSCOUNT    NUMBER(10),
  TRANSSUMMONEY NUMBER(15,2),
  YEARMONTHS    VARCHAR2(6)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table GENINFO
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.GENINFO
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  TXNTYPE   NUMBER(5) not null,
  KEYDATA   VARCHAR2(32) not null,
  DATA      CLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_GENINFO on OPS$YUFU_CHINA_PS_RUN_BAK.GENINFO (INST_ID, TXNTYPE, KEYDATA)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table GRPPERM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.GRPPERM
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACSITEM   VARCHAR2(15) not null,
  USRGRP    VARCHAR2(15) not null,
  MASK      CHAR(1) not null,
  EXTPSWD   CHAR(1) not null,
  OPTAG     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCIVRTXN
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCIVRTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  AMT        FLOAT default 0.00 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCIVRTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCIVRTXN (TERMPOS_ID, DATELOCAL, STAN, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCIVRTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.HCIVRTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCNEWPAYTXN
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPAYTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPAYTXN
  add constraint HASH_HCNEWPAYTXN primary key (TERMPOS_ID, DATELOCAL, STAN, MTID, TXNCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCNEWPAYTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPAYTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCNEWPOSLOG
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPOSLOG
(
  MSGHDR             CHAR(26) not null,
  MSGTYPE            CHAR(4) not null,
  BITMAP             VARCHAR2(256) not null,
  PAN_DISPLAY        VARCHAR2(19) not null,
  PROCODE            CHAR(6) not null,
  AMTTXN             INTEGER not null,
  STAN               CHAR(6) not null,
  TIMELOCAL          INTEGER not null,
  DATELOCAL          DATE not null,
  DATEEXP            CHAR(4) not null,
  DATESETTLE         CHAR(4) not null,
  POS_ENTRY_CODE     CHAR(3) not null,
  CARD_SEQ_NO        CHAR(3) not null,
  POS_COND_CODE      CHAR(2) not null,
  POS_PIN_CAPTR_CODE CHAR(2) not null,
  AIID               VARCHAR2(11) not null,
  T2                 VARCHAR2(37) not null,
  T3                 VARCHAR2(104) not null,
  RRN                VARCHAR2(12) not null,
  AIRC               VARCHAR2(6) not null,
  RSPCODE            CHAR(2) not null,
  CATI               VARCHAR2(8) not null,
  CAIC               VARCHAR2(15) not null,
  ADDRSPDATA         VARCHAR2(25) not null,
  FB48               VARCHAR2(322) not null,
  CURCODE            CHAR(3) not null,
  PIN                CHAR(8) not null,
  SRCI               VARCHAR2(16) not null,
  BALANCE            VARCHAR2(20) not null,
  ICCSRD             VARCHAR2(255) not null,
  FB60               VARCHAR2(17) not null,
  ORGMSG             VARCHAR2(29) not null,
  FB62               VARCHAR2(512) not null,
  FB63               VARCHAR2(163) not null,
  MAC                CHAR(8) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCNEWPOSLOG on OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPOSLOG (MSGTYPE, STAN, CATI, CAIC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table HCNEWPOSROUTE
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPOSROUTE
(
  CARDBIN_LEN NUMBER(10) not null,
  CARDBIN     VARCHAR2(20) not null,
  SERVICENM   VARCHAR2(20) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCNEWPOSTXN
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCNEWPOSTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table HCPAYTXN
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCPAYTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCPAYTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCPAYTXN (TERMPOS_ID, DATELOCAL, STAN, MTID, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCPAYTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.HCPAYTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCPOSROUTE
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCPOSROUTE
(
  CARDBIN_LEN NUMBER(10) not null,
  CARDBIN     VARCHAR2(10) not null,
  SERVICENM   VARCHAR2(20) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table HCPOSTXN
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCPOSTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCPOSTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCPOSTXN (TERMPOS_ID, DATELOCAL, STAN, MTID, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCPOSTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.HCPOSTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCSALESCRDTXN
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESCRDTXN
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  TIME            VARCHAR2(14) default ' ' not null,
  TXNCODE         NUMBER(5) not null,
  STAN            NUMBER(7) default 0 not null,
  PAN_START       VARCHAR2(19) not null,
  PAN_END         VARCHAR2(19) not null,
  PAN_COUNT       NUMBER(10) default 0 not null,
  AMT_EACH_CRD    FLOAT not null,
  FARTHER_ORDER   VARCHAR2(20) not null,
  CHILDREN_ORDER  VARCHAR2(20) not null,
  PAY_TYPE        NUMBER(5) default 1 not null,
  PAY_DESC        VARCHAR2(120) default ' ' not null,
  PAYER_NAME      VARCHAR2(128) default ' ' not null,
  SALES_POINT     VARCHAR2(128) default ' ' not null,
  AREA_ID         VARCHAR2(20) default ' ' not null,
  OPERATOR        VARCHAR2(20) default ' ' not null,
  RESERVED1       VARCHAR2(128) default ' ' not null,
  RESERVED2       VARCHAR2(128) default ' ' not null,
  RESERVED3       VARCHAR2(128) default ' ' not null,
  MERCHANT_ID     VARCHAR2(40) default ' ' not null,
  MERCHANT_PASSWD VARCHAR2(16) default ' ' not null,
  ISOPEN_FLAG     CHAR(2) default '0' not null,
  DESCR           VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCSALESCRDTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESCRDTXN (TXNCODE, FARTHER_ORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCSALESCRDTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESCRDTXN (FARTHER_ORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCSALESMRCH
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESMRCH
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  MERCHANT_ID     VARCHAR2(40) not null,
  MERCHANT_PASSWD VARCHAR2(16) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCSALESMRCH on OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESMRCH (MERCHANT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HCSALESTXN
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  AMT        FLOAT default 0.00 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HCSALESTXN on OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESTXN (TERMPOS_ID, DATELOCAL, STAN, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_HCSALESTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.HCSALESTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HOLIDAY
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HOLIDAY
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  HOLIDAY   DATE not null,
  DESCR     VARCHAR2(40) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HOLIDAY on OPS$YUFU_CHINA_PS_RUN_BAK.HOLIDAY (HOLIDAY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table HOSTDET
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HOSTDET
(
  VERNO_CTX             NUMBER(10) default 1 not null,
  HOSTNAME              VARCHAR2(4) not null,
  SIID                  VARCHAR2(11) not null,
  CURSET                CHAR(3) not null,
  REQSTATE              NUMBER(5) not null,
  CURSTATE              NUMBER(5) not null,
  COMSTATE              NUMBER(5) not null,
  CHANSTATE             VARCHAR2(8) not null,
  NROFCHANNELS          NUMBER(5) not null,
  NETSVC                VARCHAR2(15) not null,
  RECSVC                VARCHAR2(15) not null,
  SUBADDRESS            VARCHAR2(16) not null,
  HOSTTYPE              VARCHAR2(4) not null,
  ACCOK                 NUMBER(5) not null,
  STMTOK                NUMBER(5) not null,
  TXNUPLOAD             VARCHAR2(75) not null,
  TXNDOWNLOAD           VARCHAR2(75) not null,
  CUSTACCDOWNLOAD       VARCHAR2(75) not null,
  CTRDATE               DATE,
  ZPKLEN                NUMBER(5) default 16 not null,
  ADVRECSTATE           NUMBER(5) default 0 not null,
  OPTIONS               CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null,
  CONSECUTIVE_TOUTS     NUMBER(10) default 0 not null,
  CONSECUTIVE_TOUTS_LIM NUMBER(10) default 0 not null,
  PRVCTRDATE            DATE default to_date('31082263','DDMMYYYY') not null,
  REQCTRDATE            DATE default to_date('31082263','DDMMYYYY') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HOSTDET on OPS$YUFU_CHINA_PS_RUN_BAK.HOSTDET (HOSTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HOSTMONSTAT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HOSTMONSTAT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  HOSTNAME      VARCHAR2(4) not null,
  TXNTIME       VARCHAR2(12) not null,
  STAT_TYPE     NUMBER(5) not null,
  TOT_TXN_TIME  NUMBER(10) default 0 not null,
  TXN_COUNT     NUMBER(10) default 0 not null,
  TIMEOUT_COUNT NUMBER(5) default 0 not null,
  TXNDATE       DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_HOSTMONSTAT on OPS$YUFU_CHINA_PS_RUN_BAK.HOSTMONSTAT (HOSTNAME, TXNTIME, STAT_TYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table HOUSEKEEP
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.HOUSEKEEP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SEQUENCE  NUMBER(5) not null,
  TABNAME   NVARCHAR2(30) not null,
  COLNAME   NVARCHAR2(30) not null,
  PERIOD    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.HOUSEKEEP
  add constraint UNQ_HOUSEKEEP_TABNAME unique (TABNAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table IMPORT_CTRL
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.IMPORT_CTRL
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  TIMES_PROCESSED    NUMBER(5) not null,
  FILENAME           VARCHAR2(512) not null,
  FILE_SIZE          NUMBER(10) not null,
  FILE_CRC           NUMBER(10) not null,
  ORIGINATOR_BIN     VARCHAR2(11) default '      ' not null,
  ORIGINATOR_LITERAL VARCHAR2(12) default 'VISA BASE 2' not null,
  ORIGINATOR_FILE_ID VARCHAR2(32) not null,
  ORIG_PROCESS_DATE  DATE not null,
  DEST_BIN           VARCHAR2(11) not null,
  RECORDS_COUNT      NUMBER(10) not null,
  BATCHES_COUNT      NUMBER(10) not null,
  TOTAL_DEST_AMOUNT  FLOAT not null,
  TOTAL_SRC_AMOUNT   FLOAT not null,
  TRANSACTIONS_COUNT NUMBER(10) not null,
  IMPORT_SYSDATE     DATE not null,
  IMPORT_DATE        DATE not null,
  IMPORT_TIME        NUMBER(10) not null,
  CURRENT_BATCH      NUMBER(10) not null,
  CURRENT_RECORD     NUMBER(10) not null,
  CURRENT_TRANSXN    NUMBER(10) not null,
  SUBMITTED          NUMBER(10) not null,
  LAST_ERROR_CODE    NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_IMPORT_CTRL on OPS$YUFU_CHINA_PS_RUN_BAK.IMPORT_CTRL (DEST_BIN, ORIG_PROCESS_DATE, TRANSACTIONS_COUNT, RECORDS_COUNT, BATCHES_COUNT, TOTAL_SRC_AMOUNT, TOTAL_DEST_AMOUNT, ORIGINATOR_LITERAL, FILE_CRC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_IMPORT_CTRL_ERR on OPS$YUFU_CHINA_PS_RUN_BAK.IMPORT_CTRL (LAST_ERROR_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table INST
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.INST
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  INSTCODE          VARCHAR2(4) not null,
  DIID              VARCHAR2(11) not null,
  DFE               VARCHAR2(8) not null,
  DESCR             VARCHAR2(20) not null,
  DEFAULT_LOCALE    VARCHAR2(32) default ' ' not null,
  DEFAULT_TIME_ZONE VARCHAR2(64) default ' ' not null,
  ID                NUMBER(10) default 0 not null,
  EXT_INSTCODE      VARCHAR2(11) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_INST on OPS$YUFU_CHINA_PS_RUN_BAK.INST (INSTCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table INSTSCHEME
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.INSTSCHEME
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  SCHEME    VARCHAR2(12) not null,
  AIID      VARCHAR2(11) not null,
  POSAIID   VARCHAR2(11) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_INSTSCHEME on OPS$YUFU_CHINA_PS_RUN_BAK.INSTSCHEME (INST_ID, SCHEME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table LCG_RANDOM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.LCG_RANDOM
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  MODULUS      NUMBER(10) not null,
  MULTIPLIER   NUMBER(10) not null,
  INC_VALUE    NUMBER(10) not null,
  XN_VALUE     NUMBER(10) not null,
  NUMBERS_USED NUMBER(10) not null,
  DESCR        VARCHAR2(80) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_LCG_RANDOM on OPS$YUFU_CHINA_PS_RUN_BAK.LCG_RANDOM (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table LOADBAL
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.LOADBAL
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  LOADBAL_SVC_NAME  VARCHAR2(15) not null,
  SAMPLING_INTERVAL NUMBER(10) not null,
  MONITOR           NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_LOADBAL on OPS$YUFU_CHINA_PS_RUN_BAK.LOADBAL (LOADBAL_SVC_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table LOADBALDET
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.LOADBALDET
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  SVC_NAME          VARCHAR2(15) not null,
  LOADBAL_SVC_NAME  VARCHAR2(15) not null,
  HOSTNAME          VARCHAR2(4) not null,
  WEIGHT            NUMBER(5) not null,
  TIMEOUT_THRESHOLD NUMBER(5) not null,
  PERF_THRESHOLD    NUMBER(5) not null,
  HOST_STATUS       NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_LOADBALDET on OPS$YUFU_CHINA_PS_RUN_BAK.LOADBALDET (SVC_NAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table LOCALDEF
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.LOCALDEF
(
  ID         NUMBER(10) not null,
  VERNO_CTX  NUMBER(10) default 1 not null,
  CTX_LOCALE VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table LoginLog
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.LoginLog
(
  ID          INTEGER not null,
  CardNumber  VARCHAR2(50) not null,
  LoginPwd    VARCHAR2(100) not null,
  LoginDate   DATE not null,
  LoginIP     VARCHAR2(50),
  IsSuccess   INTEGER not null,
  Description NVARCHAR2(1000)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.LoginLog
  add constraint PK_LOGINLOG primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MANMRCHBTCH
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MANMRCHBTCH
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  CTXDATE     DATE not null,
  BTCHID      NUMBER(10) not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  PROCESSED   CHAR(1) not null,
  MANBTCHDATE DATE not null,
  AMTTAX      FLOAT not null,
  AMTTAXDCL   FLOAT not null,
  AMTADJ      FLOAT not null,
  DESCADJ     VARCHAR2(30) not null,
  AMTCOM      FLOAT not null,
  AMTCOMDCL   FLOAT not null,
  EXTPROCID   NUMBER(10) default 0 not null,
  EXT_REFCODE VARCHAR2(64) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MANMRCHBTCH on OPS$YUFU_CHINA_PS_RUN_BAK.MANMRCHBTCH (CTXDATE, BTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MARKUPDEF
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MARKUPDEF
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) default 0 not null,
  INST_ID     NUMBER(10) default 0 not null,
  CURMIN      CHAR(3) not null,
  PERCENT     FLOAT not null,
  MRKDUPMIN   FLOAT not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCC
prompt ==================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCC
(
  MCCID           VARCHAR2(15),
  MCC             VARCHAR2(4),
  MCCNAME         VARCHAR2(200),
  MCCDESC         VARCHAR2(200),
  TRANSFEE        NUMBER(10,2) default 0.00,
  TRANSFEEFIX     NUMBER(10,3) default 0.000,
  TRANSFEEMIN     NUMBER(10,2) default 0.00,
  TRANSFEEMAX     NUMBER(10,2) default 0.00,
  ISSUEFEE        NUMBER(10,2) default 0.00,
  ISSUEFEEFIX     NUMBER(10,3) default 0.000,
  ISSUEFEEMAX     NUMBER(10,2) default 0.00,
  UNPAYFEE        NUMBER(10,2) default 0.00,
  UNPAYFEEFIX     NUMBER(10,3) default 0.000,
  UNPAYFEEMAX     NUMBER(10,2) default 0.00,
  ACQFEE          NUMBER(10,2) default 0.00,
  ACQFEEFIX       NUMBER(10,3) default 0.000,
  ACQFEEMAX       NUMBER(10,2) default 0.00,
  MCCACTIVEDATE   VARCHAR2(8),
  MCCOPTDATE      VARCHAR2(8),
  MCCOPTUSR       VARCHAR2(8),
  ISACTIVE        VARCHAR2(1),
  MCCDEDURATETYPE VARCHAR2(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCCGROUPS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCCGROUPS
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  CRDACPTBUS NUMBER(5) not null,
  CTXTYPE    VARCHAR2(4) not null,
  MCCGROUP   VARCHAR2(30) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MCCGROUPS on OPS$YUFU_CHINA_PS_RUN_BAK.MCCGROUPS (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_MCCGROUPS_2C on OPS$YUFU_CHINA_PS_RUN_BAK.MCCGROUPS (CRDACPTBUS, CTXTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MCCRANGE
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCCRANGE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  RECTYP    VARCHAR2(8),
  SORTORDER NUMBER(5),
  MCC_START NUMBER(5),
  MCC_END   NUMBER(5),
  VAL       FLOAT,
  FIX       FLOAT
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRDBIN
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCRDBIN
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ACCNOLOW      VARCHAR2(19) not null,
  PRODID        VARCHAR2(3) not null,
  ACCNOHIGH     VARCHAR2(19) not null,
  CRDPRGID      VARCHAR2(3) not null,
  CRDPRGIDPRT   NUMBER(5) not null,
  ICANO         VARCHAR2(11) not null,
  PRODTYPE      CHAR(1) not null,
  ENDPOINT      NUMBER(10) not null,
  CTRYCODE      CHAR(3) not null,
  REGION        CHAR(1) not null,
  CURBILL       CHAR(3) not null,
  CURBILLEXP    NUMBER(5) not null,
  CURBILLPTXN1  CHAR(3) not null,
  CURBILLP1     CHAR(3) not null,
  CURBULLPEXP1  NUMBER(5) not null,
  CURBILLPTXN2  CHAR(3) not null,
  CURBILLP2     CHAR(3) not null,
  CURBULLPEXP2  NUMBER(5) not null,
  CURBILLPTXN3  CHAR(3) not null,
  CURBILLP3     CHAR(3) not null,
  CURBULLPEXP3  NUMBER(5) not null,
  CURBILLPTXN4  CHAR(3) not null,
  CURBILLP4     CHAR(3) not null,
  CURBULLPEXP4  NUMBER(5) not null,
  PRODCLS       CHAR(3) not null,
  TXNRTIND      CHAR(1) not null,
  PRDREASSIGN   CHAR(1) default ' ' not null,
  CASHBACK      CHAR(1) default ' ' not null,
  LICPRODID     CHAR(3) default '   ' not null,
  PAYPASS       CHAR(1) default ' ' not null,
  ACCLEVP       CHAR(1) default ' ' not null,
  ACCLEVPDATE   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  FPRESREASSIGN CHAR(1) default ' ' not null,
  ICC2MSRIND    CHAR(1) default ' ' not null,
  FLOOREXPDATE  DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  COBRAND       CHAR(1) default ' ' not null,
  SPENDCNTL     CHAR(1) default ' ' not null,
  MRCHCLSVC     CHAR(3) default ' ' not null,
  MRCHCLDATE    DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  PAYPASSIND    CHAR(1) default ' ' not null,
  REGRTTYPEIND  CHAR(1) default ' ' not null,
  PSNRTIND      CHAR(1) default ' ' not null,
  CBPURCHIND    CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MCRDBIN on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDBIN (ACCNOLOW, ACCNOHIGH, PRODID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MCRDMBR
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCRDMBR
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ICANO         VARCHAR2(11) not null,
  SUPERMARKET   CHAR(1) not null,
  WAREHOUSEC    CHAR(1) not null,
  REGION        CHAR(1) not null,
  ELECTRONIC    CHAR(2) not null,
  INTRNL_ICA    CHAR(1) not null,
  ROLE          CHAR(1) not null,
  ATM           CHAR(1) not null,
  RCLREGION     CHAR(1) not null,
  ENDPOINT      NUMBER(10) not null,
  WICA_SWITCH   CHAR(1) not null,
  WCRD_MCC_CD1  CHAR(1) not null,
  WCRD_MCC_CD2  CHAR(1) not null,
  WCRD_MCC_CD3  CHAR(1) not null,
  WCRD_MCC_CD4  CHAR(1) not null,
  WCRD_MCC_CD5  CHAR(1) not null,
  SERVICE_INDUS CHAR(1) not null,
  ICA_NAME      VARCHAR2(30) not null,
  CTRYALPHA     CHAR(3) not null,
  CTRYCODE      CHAR(3) not null,
  OUTFORMAT     CHAR(1) not null,
  MEC_CRDACPT   CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MCRDMBR on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDMBR (ICANO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MCRDRATE
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCRDRATE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  BASECURCODE CHAR(3) not null,
  CURCODE     CHAR(3) not null,
  CUREXP      NUMBER(5) not null,
  RATECLASS   CHAR(1) not null,
  RATEFORMAT  CHAR(1) not null,
  BUYRATE     FLOAT not null,
  MIDRATE     FLOAT not null,
  SELLRATE    FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MCRDRATE on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDRATE (BASECURCODE, CURCODE, RATECLASS, RATEFORMAT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MCRDREC
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCRDREC
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  INFILEID    CHAR(25) not null,
  INMSGSEQ    NUMBER(10) not null,
  SYSTEMID    NUMBER(5) not null,
  REASON      NUMBER(5) not null,
  FNCODE      NUMBER(5) not null,
  XMITID      CHAR(25) not null,
  FILEID      CHAR(25) not null,
  ACCRANGE    CHAR(38) not null,
  AIID        VARCHAR2(11) not null,
  MEMACT      CHAR(1) not null,
  SETACT      CHAR(67) not null,
  BUSACT      VARCHAR2(29) not null,
  SETIND      VARCHAR2(30) not null,
  CRDPROG     CHAR(3) not null,
  TXNFUNGRP   CHAR(2) not null,
  ACQBIN      CHAR(6) not null,
  MRCHNO      CHAR(15) not null,
  MTIDFUNC    CHAR(7) not null,
  MSGREAS     CHAR(4) not null,
  TXNCODE     CHAR(2) not null,
  MEMREC1     VARCHAR2(50) not null,
  MEMREC2     VARCHAR2(50) not null,
  ORGREVIND   CHAR(1) not null,
  CURTXN      CHAR(3) not null,
  OTHER_IID   VARCHAR2(11) not null,
  CURSET      CHAR(3) not null,
  DTAMT_TCUR  FLOAT not null,
  CTAMT_TCUR  FLOAT not null,
  NTAMT_TCUR  FLOAT not null,
  DT_NUM      FLOAT not null,
  CT_NUM      FLOAT not null,
  TT_NUM      FLOAT not null,
  DTAMT_SCUR  FLOAT not null,
  CTAMT_SCUR  FLOAT not null,
  NTAMT_SCUR  FLOAT not null,
  DFEECODE01  NUMBER(5) not null,
  DFEECODE02  NUMBER(5) not null,
  DFEECODE03  NUMBER(5) not null,
  DFEECODE04  NUMBER(5) not null,
  DFEECODE05  NUMBER(5) not null,
  DFEECODE06  NUMBER(5) not null,
  DFEECODE07  NUMBER(5) not null,
  DFEECODE08  NUMBER(5) not null,
  DFEECODE09  NUMBER(5) not null,
  DFEECODE10  NUMBER(5) not null,
  DFEECODE11  NUMBER(5) not null,
  DFEECODE12  NUMBER(5) not null,
  DFEEAMT01   FLOAT not null,
  DFEEAMT02   FLOAT not null,
  DFEEAMT03   FLOAT not null,
  DFEEAMT04   FLOAT not null,
  DFEEAMT05   FLOAT not null,
  DFEEAMT06   FLOAT not null,
  DFEEAMT07   FLOAT not null,
  DFEEAMT08   FLOAT not null,
  DFEEAMT09   FLOAT not null,
  DFEEAMT10   FLOAT not null,
  DFEEAMT11   FLOAT not null,
  DFEEAMT12   FLOAT not null,
  CFEECODE01  NUMBER(5) not null,
  CFEECODE02  NUMBER(5) not null,
  CFEECODE03  NUMBER(5) not null,
  CFEECODE04  NUMBER(5) not null,
  CFEECODE05  NUMBER(5) not null,
  CFEECODE06  NUMBER(5) not null,
  CFEECODE07  NUMBER(5) not null,
  CFEECODE08  NUMBER(5) not null,
  CFEECODE09  NUMBER(5) not null,
  CFEECODE10  NUMBER(5) not null,
  CFEECODE11  NUMBER(5) not null,
  CFEECODE12  NUMBER(5) not null,
  CFEEAMT01   FLOAT not null,
  CFEEAMT02   FLOAT not null,
  CFEEAMT03   FLOAT not null,
  CFEEAMT04   FLOAT not null,
  CFEEAMT05   FLOAT not null,
  CFEEAMT06   FLOAT not null,
  CFEEAMT07   FLOAT not null,
  CFEEAMT08   FLOAT not null,
  CFEEAMT09   FLOAT not null,
  CFEEAMT10   FLOAT not null,
  CFEEAMT11   FLOAT not null,
  CFEEAMT12   FLOAT not null,
  NFAMT_SCUR  FLOAT not null,
  NETAMT_SCUR FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MCRDREC on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDREC (INFILEID, INMSGSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MCRDREC_FILEID on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDREC (FILEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MCRDREC_MEMREC1 on OPS$YUFU_CHINA_PS_RUN_BAK.MCRDREC (MEMREC1)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MCTACCT_TMP
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCTACCT_TMP
(
  ACCT_ID      NUMBER(10) not null,
  ACCNO        VARCHAR2(28) not null,
  ACCNM        VARCHAR2(30) not null,
  CONACCNO     VARCHAR2(28) not null,
  PHY_ADDRESS2 VARCHAR2(35) not null,
  MRCHNO       VARCHAR2(15) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCTINFO_TMP
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MCTINFO_TMP
(
  MRCHNO    VARCHAR2(15) not null,
  NAME      VARCHAR2(25) not null,
  CONTRDATE DATE not null,
  CITY      VARCHAR2(40) not null,
  MRCHSTAT  NUMBER(5) not null,
  STATE     VARCHAR2(3) not null,
  MRCHTYPE  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MEMBERCARDSALE
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE
(
  MID              NUMBER not null,
  ASALEMON         NUMBER(19,4) not null,
  ASALEINEGRAL     NUMBER(19,4) not null,
  ARESIDUALINEGRAL NUMBER(19,4) not null,
  AREGDATE         CHAR(8) not null,
  AREGTIME         CHAR(8) not null,
  LRUID            CHAR(17) not null,
  SSERIALNUM       CHAR(8) not null,
  BSTATE           NUMBER not null,
  LORDNUM          NUMBER not null,
  LINVNUM          NUMBER not null,
  ID               NUMBER not null,
  TYPE             NUMBER not null,
  ACARDNUM         VARCHAR2(20) not null,
  AGETINEGRAL      NUMBER(19,4),
  LOLDORDNUM       NUMBER,
  LOLDINVNUM       NUMBER,
  LOLDID           NUMBER,
  OLDCARDNUM       VARCHAR2(20),
  FLAG             NUMBER,
  VIRTUALCARDNO    VARCHAR2(30),
  BANKCARDNO       VARCHAR2(30),
  RESCODE          NCHAR(10),
  TERMTYPE         NUMBER,
  WEBRU            NVARCHAR2(20),
  WEBTERMID        VARCHAR2(10),
  BANKRU           VARCHAR2(50),
  FEE              NUMBER(19,4),
  ORDERNUM         VARCHAR2(50),
  SERVERFLOW       VARCHAR2(20),
  CHECKUSER        VARCHAR2(20),
  CHECKTIME        DATE,
  IFCHECK          NUMBER,
  CARDMONEY        NUMBER(19,4),
  MEMBERMONEY      NUMBER(19,4),
  AREMEMBERINEGRAL NUMBER(19,4),
  MAINOPER         VARCHAR2(50),
  OPER             VARCHAR2(50),
  SFLAG            NVARCHAR2(2) not null,
  BLANDATE         VARCHAR2(20),
  NEWINTEGRAL      NUMBER(19,4),
  GETINTEGRAL      NUMBER(18),
  INTERESTMONEY    NUMBER(19,4),
  INTERESTREMONEY  NUMBER(19,4),
  POINTMONEY       NUMBER(18,2),
  POINTREMONEY     NUMBER(18,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.MID
  is '»áÔ±ÐòºÅ
';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.ASALEMON
  is 'Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.AREGDATE
  is 'Ïû·ÑÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.AREGTIME
  is 'Ïû·ÑÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LRUID
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.SSERIALNUM
  is 'ÖÕ¶ËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.BSTATE
  is '×´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LORDNUM
  is 'ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LINVNUM
  is 'ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.ID
  is '·þÎñÆ÷Á÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.TYPE
  is 'ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.ACARDNUM
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.AGETINEGRAL
  is '±¾´Î»ñµÃ»ý·Ö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LOLDORDNUM
  is 'Ô­½»Ò×ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LOLDINVNUM
  is 'Ô­½»Ò×ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.LOLDID
  is '²Î¿¼Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.OLDCARDNUM
  is 'ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.FLAG
  is '1ÊÇ»»¿¨ 0ÆäËü½»Ò×';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.VIRTUALCARDNO
  is 'ÐéÄâ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.BANKCARDNO
  is 'ÒøÐÐ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.RESCODE
  is 'ÏìÓ¦Âë£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.TERMTYPE
  is 'ÖÕ¶ËÀàÐÍ0 POS 1 ATM 2¹ÙÍø 3Ö§¸¶Íø¹Ø';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.SERVERFLOW
  is 'Á÷Ë®£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.CARDMONEY
  is '¿¨Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.MEMBERMONEY
  is 'ÕÊ»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.AREMEMBERINEGRAL
  is 'ÕÊ»§Ê£Óà½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.SFLAG
  is '¼ÓÓÍ»¹ÊÇ¹ºÎï';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.BLANDATE
  is 'ÖÐÊ¯»¯½áËãÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.INTERESTMONEY
  is 'ÀûÏ¢¿Û¿î½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE.INTERESTREMONEY
  is 'ÀûÏ¢Ê£Óà½ð¶î';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE
  add constraint PK_MEMBERCARDSALE primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MEMBERCARDSALE_18_11
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11
(
  MID              NUMBER not null,
  ASALEMON         NUMBER(19,4) not null,
  ASALEINEGRAL     NUMBER(19,4) not null,
  ARESIDUALINEGRAL NUMBER(19,4) not null,
  AREGDATE         CHAR(8) not null,
  AREGTIME         CHAR(8) not null,
  LRUID            CHAR(17) not null,
  SSERIALNUM       CHAR(8) not null,
  BSTATE           NUMBER not null,
  LORDNUM          NUMBER not null,
  LINVNUM          NUMBER not null,
  ID               NUMBER not null,
  TYPE             NUMBER not null,
  ACARDNUM         VARCHAR2(20) not null,
  AGETINEGRAL      NUMBER(19,4),
  LOLDORDNUM       NUMBER,
  LOLDINVNUM       NUMBER,
  LOLDID           NUMBER,
  OLDCARDNUM       VARCHAR2(20),
  FLAG             NUMBER not null,
  VIRTUALCARDNO    VARCHAR2(30),
  RESCODE          NCHAR(10),
  BANKCARDNO       VARCHAR2(30),
  TERMTYPE         NUMBER,
  WEBRU            NVARCHAR2(20),
  WEBTERMID        VARCHAR2(10),
  BANKRU           VARCHAR2(50),
  FEE              NUMBER(19,4),
  ORDERNUM         VARCHAR2(50),
  SERVERFLOW       VARCHAR2(20),
  CHECKUSER        VARCHAR2(20),
  CHECKTIME        DATE,
  IFCHECK          NUMBER,
  CARDMONEY        NUMBER(19,4),
  MEMBERMONEY      NUMBER(19,4),
  AREMEMBERINEGRAL NUMBER(19,4),
  MAINOPER         VARCHAR2(14),
  OPER             VARCHAR2(14),
  SFLAG            NUMBER,
  BLANDATE         VARCHAR2(20),
  NEWINTEGRAL      NUMBER(18),
  GETINTEGRAL      NUMBER(18),
  INTERESTMONEY    NUMBER(19,4),
  INTERESTREMONEY  NUMBER(19,4),
  POINTMONEY       NUMBER(18,2),
  POINTREMONEY     NUMBER(18,2),
  CLIENTIPADDRESS  VARCHAR2(50),
  IMGPATH          VARCHAR2(50)
)
tablespace USERS
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.MID
  is '»áÔ±ÐòºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.ASALEMON
  is 'Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.ASALEINEGRAL
  is '¿¨ÕË»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.ARESIDUALINEGRAL
  is '¿¨ÕË»§Ê£Óà½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.AREGDATE
  is 'Ïû·ÑÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.AREGTIME
  is 'Ïû·ÑÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LRUID
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.SSERIALNUM
  is 'ÖÕ¶ËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.BSTATE
  is '×´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LORDNUM
  is 'ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LINVNUM
  is 'ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.ID
  is '·þÎñÆ÷Á÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.TYPE
  is 'ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.ACARDNUM
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.AGETINEGRAL
  is '±¾´Î»ñµÃ»ý·Ö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LOLDORDNUM
  is 'Ô­½»Ò×ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LOLDINVNUM
  is 'Ô­½»Ò×ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.LOLDID
  is '²Î¿¼Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.OLDCARDNUM
  is '20';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.FLAG
  is '1ÊÇ»»¿¨ 0ÆäËü½»Ò×
2:×ª³ö¿¨
3×ªÈë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.VIRTUALCARDNO
  is 'ÐéÄâ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.RESCODE
  is 'ÏìÓ¦Âë£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.BANKCARDNO
  is 'ÒøÐÐ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.TERMTYPE
  is 'ÖÕ¶ËÀàÐÍ0 POS 1 ATM 2¹ÙÍø 3Ö§¸¶Íø¹Ø';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.SERVERFLOW
  is 'Á÷Ë®£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.CARDMONEY
  is '¿¨Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.MEMBERMONEY
  is 'ÕÊ»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.AREMEMBERINEGRAL
  is 'ÕÊ»§Ê£Óà½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.SFLAG
  is '¼ÓÓÍ»¹ÊÇ¹ºÎï';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.BLANDATE
  is 'ÖÐÊ¯»¯½áËãÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.INTERESTMONEY
  is 'ÀûÏ¢¿Û¿î½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11.INTERESTREMONEY
  is 'ÀûÏ¢Ê£Óà½ð¶î';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11
  add constraint PK_MEMBERCARDSALE_18_11 primary key (ID)
  using index 
  tablespace USERS
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CARDSALE_18_11_MER on OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11 (LRUID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_CARDSALE_18_11_TERM on OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_11 (SSERIALNUM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MEMBERCARDSALE_18_15_2
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2
(
  MID              NUMBER not null,
  ASALEMON         NUMBER(19,4) not null,
  ASALEINEGRAL     NUMBER(19,4) not null,
  ARESIDUALINEGRAL NUMBER(19,4) not null,
  AREGDATE         CHAR(8) not null,
  AREGTIME         CHAR(8) not null,
  LRUID            CHAR(17) not null,
  SSERIALNUM       CHAR(8) not null,
  BSTATE           NUMBER not null,
  LORDNUM          NUMBER not null,
  LINVNUM          NUMBER not null,
  ID               NUMBER not null,
  TYPE             NUMBER not null,
  ACARDNUM         VARCHAR2(20) not null,
  AGETINEGRAL      NUMBER(19,4),
  LOLDORDNUM       NUMBER,
  LOLDINVNUM       NUMBER,
  LOLDID           NUMBER,
  OLDCARDNUM       VARCHAR2(20),
  FLAG             NUMBER not null,
  VIRTUALCARDNO    VARCHAR2(30),
  RESCODE          NCHAR(10),
  BANKCARDNO       VARCHAR2(30),
  TERMTYPE         NUMBER,
  WEBRU            NVARCHAR2(20),
  WEBTERMID        VARCHAR2(10),
  BANKRU           VARCHAR2(50),
  FEE              NUMBER(19,4),
  ORDERNUM         VARCHAR2(50),
  SERVERFLOW       VARCHAR2(20),
  CHECKUSER        VARCHAR2(20),
  CHECKTIME        DATE,
  IFCHECK          NUMBER,
  CARDMONEY        NUMBER(19,4),
  MEMBERMONEY      NUMBER(19,4),
  AREMEMBERINEGRAL NUMBER(19,4),
  MAINOPER         VARCHAR2(14),
  OPER             VARCHAR2(14),
  SFLAG            NUMBER,
  BLANDATE         VARCHAR2(20),
  NEWINTEGRAL      NUMBER(18),
  GETINTEGRAL      NUMBER(18),
  INTERESTMONEY    NUMBER(19,4),
  INTERESTREMONEY  NUMBER(19,4),
  POINTMONEY       NUMBER(18,2),
  POINTREMONEY     NUMBER(18,2),
  CLIENTIPADDRESS  VARCHAR2(50),
  IMGPATH          VARCHAR2(50)
)
tablespace USERS
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.MID
  is '»áÔ±ÐòºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.ASALEMON
  is 'Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.ASALEINEGRAL
  is '¿¨ÕË»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.ARESIDUALINEGRAL
  is '¿¨ÕË»§Ê£Óà½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.AREGDATE
  is 'Ïû·ÑÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.AREGTIME
  is 'Ïû·ÑÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LRUID
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.SSERIALNUM
  is 'ÖÕ¶ËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.BSTATE
  is '×´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LORDNUM
  is 'ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LINVNUM
  is 'ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.ID
  is '·þÎñÆ÷Á÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.TYPE
  is 'ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.ACARDNUM
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.AGETINEGRAL
  is '±¾´Î»ñµÃ»ý·Ö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LOLDORDNUM
  is 'Ô­½»Ò×ÖÕ¶ËÅú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LOLDINVNUM
  is 'Ô­½»Ò×ÖÕ¶ËÁ÷Ë®';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.LOLDID
  is '²Î¿¼Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.OLDCARDNUM
  is '20';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.FLAG
  is '1ÊÇ»»¿¨ 0ÆäËü½»Ò×
2:×ª³ö¿¨
3×ªÈë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.VIRTUALCARDNO
  is 'ÐéÄâ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.RESCODE
  is 'ÏìÓ¦Âë£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.BANKCARDNO
  is 'ÒøÐÐ¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.TERMTYPE
  is 'ÖÕ¶ËÀàÐÍ0 POS 1 ATM 2¹ÙÍø 3Ö§¸¶Íø¹Ø';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.SERVERFLOW
  is 'Á÷Ë®£¨´óÇ°ÖÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.CARDMONEY
  is '¿¨Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.MEMBERMONEY
  is 'ÕÊ»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.AREMEMBERINEGRAL
  is 'ÕÊ»§Ê£Óà½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.SFLAG
  is '¼ÓÓÍ»¹ÊÇ¹ºÎï';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.BLANDATE
  is 'ÖÐÊ¯»¯½áËãÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.INTERESTMONEY
  is 'ÀûÏ¢¿Û¿î½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2.INTERESTREMONEY
  is 'ÀûÏ¢Ê£Óà½ð¶î';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_18_15_2
  add constraint PK_MEMBERCARDSALE_18_15_2 primary key (ID)
  using index 
  tablespace USERS
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MEMBERCARDSALE_CARDTYPE_18_11
prompt ============================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_CARDTYPE_18_11
(
  CARDNUM VARCHAR2(20) not null,
  FLAG    VARCHAR2(2) not null
)
tablespace USERS
  pctfree 10
  initrans 1
  maxtrans 255;
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_CARDTYPE_18_11.CARDNUM
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERCARDSALE_CARDTYPE_18_11.FLAG
  is '¿¨ÀàÐÍID';

prompt
prompt Creating table MEMBERFEE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERFEE
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  IFE           VARCHAR2(8) not null,
  CURRCODE      CHAR(3) not null,
  CASH_FLAT     FLOAT not null,
  BALANCE_FLAT  FLOAT not null,
  DECLINED_FLAT FLOAT not null,
  FEE_DATE      DATE not null,
  FEE_TIME      NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MEMBERFEE on OPS$YUFU_CHINA_PS_RUN_BAK.MEMBERFEE (ID, IFE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MENU
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MENU
(
  VERNO_CTX NUMBER(10) default 1 not null,
  MITEM     VARCHAR2(15) not null,
  ACSITEM   VARCHAR2(15) not null,
  DESCRTAG  NUMBER(10) not null,
  MORDER    NUMBER(5) not null,
  USRGRP    VARCHAR2(15) not null,
  ACSTYPE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MENU_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.MENU (USRGRP, MITEM, MORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MENU_10022014
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MENU_10022014
(
  VERNO_CTX NUMBER(10) not null,
  MITEM     VARCHAR2(15) not null,
  ACSITEM   VARCHAR2(15) not null,
  DESCRTAG  NUMBER(10) not null,
  MORDER    NUMBER(5) not null,
  USRGRP    VARCHAR2(15) not null,
  ACSTYPE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MENU_120214_BOM
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MENU_120214_BOM
(
  VERNO_CTX NUMBER(10) not null,
  MITEM     VARCHAR2(15) not null,
  ACSITEM   VARCHAR2(15) not null,
  DESCRTAG  NUMBER(10) not null,
  MORDER    NUMBER(5) not null,
  USRGRP    VARCHAR2(15) not null,
  ACSTYPE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MENU_TEST
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MENU_TEST
(
  VERNO_CTX NUMBER(10) not null,
  MITEM     VARCHAR2(15) not null,
  ACSITEM   VARCHAR2(15) not null,
  DESCRTAG  NUMBER(10) not null,
  MORDER    NUMBER(5) not null,
  USRGRP    VARCHAR2(15) not null,
  ACSTYPE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT
(
  INST_ID         NUMBER(10) default 0 not null,
  MRCHNO          VARCHAR2(15) not null,
  HEAD_OFFICE     VARCHAR2(15) not null,
  NAME            VARCHAR2(25) not null,
  TRADING_AS      VARCHAR2(25) not null,
  ADDRESS1        VARCHAR2(35) not null,
  ADDRESS2        VARCHAR2(35) not null,
  CITY            VARCHAR2(40) not null,
  STATE           VARCHAR2(3) not null,
  POSTCODE        VARCHAR2(15) not null,
  COUNTRYCODE     VARCHAR2(3) not null,
  PHY_ADDRESS1    VARCHAR2(35) not null,
  PHY_ADDRESS2    VARCHAR2(35) not null,
  PHY_CITY        VARCHAR2(40) not null,
  PHY_STATE       VARCHAR2(3) not null,
  PHY_POSTCODE    VARCHAR2(15) not null,
  PHY_COUNTRYCODE CHAR(3) not null,
  REG_ADDRESS1    VARCHAR2(35) not null,
  REG_ADDRESS2    VARCHAR2(35) not null,
  REG_CITY        VARCHAR2(40) not null,
  REG_STATE       VARCHAR2(3) not null,
  REG_POSTCODE    VARCHAR2(15) not null,
  REG_COUNTRYCODE CHAR(3) not null,
  CURRCODE        CHAR(3) not null,
  MRCHTYPE        NUMBER(5) not null,
  ACPTBUS         NUMBER(5) not null,
  CONTACT1        VARCHAR2(20) not null,
  CONTACT2        VARCHAR2(20) not null,
  CONTACT3        VARCHAR2(20) not null,
  TELNO1          VARCHAR2(20) not null,
  TELNO2          VARCHAR2(20) not null,
  TELNO3          VARCHAR2(20) not null,
  FAXNO           VARCHAR2(20) not null,
  EMAIL           VARCHAR2(30) not null,
  TELEX           VARCHAR2(20) not null,
  SORTCODE        VARCHAR2(9) default ' ' not null,
  BRNCODE         VARCHAR2(8) default ' ' not null,
  ACCNO           VARCHAR2(28) not null,
  ACCNM           VARCHAR2(30) not null,
  TAXCODE         CHAR(1) not null,
  STMTFREQ        CHAR(1) not null,
  STMTTO          NUMBER(5) not null,
  STMTTO_HO       NUMBER(5) default 0 not null,
  PAYMTYPE        CHAR(1) not null,
  PAYMTO          CHAR(1) not null,
  POSFLAG         CHAR(1) not null,
  VIPFLAG         CHAR(1) not null,
  MSC_CHARGE      CHAR(1) not null,
  MSC_CALC        CHAR(1) not null,
  MSC_TABLE       NUMBER(5) not null,
  MSC             FLOAT not null,
  CONTRNO         VARCHAR2(8) not null,
  CONTRDATE       DATE not null,
  CONTRCNX        DATE not null,
  CONTRSIGN       VARCHAR2(3) not null,
  OFFICIAL        VARCHAR2(3) not null,
  MRCHSTAT        NUMBER(5) not null,
  RNC             VARCHAR2(20) not null,
  TAXREG          VARCHAR2(25) not null,
  RETENAMT        FLOAT not null,
  RETENPC         FLOAT not null,
  ZONEGEOG        VARCHAR2(3) not null,
  ZONECOMER       VARCHAR2(3) not null,
  ZONEPOSTAL      VARCHAR2(3) not null,
  USRDATA1        VARCHAR2(12) not null,
  USRDATA2        VARCHAR2(12) not null,
  USRDATA3        VARCHAR2(12) not null,
  MEMO            CLOB,
  CYCBEGIN        DATE default to_date('1999-07-01','YYYY-MM-DD') not null,
  CYCLEN          NUMBER(5) default 7 not null,
  NO_IMPRNTRS     NUMBER(5) default 0 not null,
  CONACCNO        VARCHAR2(28) default 'abc',
  CONCUR          CHAR(3) default ' ',
  PAYOFFSET       NUMBER(5) default 0 not null,
  ALLOWINST       NUMBER(5) default 1 not null,
  PPPYMNTATTR     NUMBER(5) default 1 not null,
  CAT_PARAMS      VARCHAR2(127) default ' ' not null,
  ID              NUMBER(10) default 0 not null,
  VERNO_CTX       NUMBER(10) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MERCHANT on OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT (INST_ID, MRCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MERCHANT_INST_HEAD on OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT (INST_ID, HEAD_OFFICE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT_1226
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_1226
(
  INST_ID         NUMBER(10) not null,
  MRCHNO          VARCHAR2(15) not null,
  HEAD_OFFICE     VARCHAR2(15) not null,
  NAME            VARCHAR2(25) not null,
  TRADING_AS      VARCHAR2(25) not null,
  ADDRESS1        VARCHAR2(35) not null,
  ADDRESS2        VARCHAR2(35) not null,
  CITY            VARCHAR2(40) not null,
  STATE           VARCHAR2(3) not null,
  POSTCODE        VARCHAR2(15) not null,
  COUNTRYCODE     VARCHAR2(3) not null,
  PHY_ADDRESS1    VARCHAR2(35) not null,
  PHY_ADDRESS2    VARCHAR2(35) not null,
  PHY_CITY        VARCHAR2(40) not null,
  PHY_STATE       VARCHAR2(3) not null,
  PHY_POSTCODE    VARCHAR2(15) not null,
  PHY_COUNTRYCODE CHAR(3) not null,
  REG_ADDRESS1    VARCHAR2(35) not null,
  REG_ADDRESS2    VARCHAR2(35) not null,
  REG_CITY        VARCHAR2(40) not null,
  REG_STATE       VARCHAR2(3) not null,
  REG_POSTCODE    VARCHAR2(15) not null,
  REG_COUNTRYCODE CHAR(3) not null,
  CURRCODE        CHAR(3) not null,
  MRCHTYPE        NUMBER(5) not null,
  ACPTBUS         NUMBER(5) not null,
  CONTACT1        VARCHAR2(20) not null,
  CONTACT2        VARCHAR2(20) not null,
  CONTACT3        VARCHAR2(20) not null,
  TELNO1          VARCHAR2(20) not null,
  TELNO2          VARCHAR2(20) not null,
  TELNO3          VARCHAR2(20) not null,
  FAXNO           VARCHAR2(20) not null,
  EMAIL           VARCHAR2(30) not null,
  TELEX           VARCHAR2(20) not null,
  SORTCODE        VARCHAR2(9) not null,
  BRNCODE         VARCHAR2(8) not null,
  ACCNO           VARCHAR2(28) not null,
  ACCNM           VARCHAR2(30) not null,
  TAXCODE         CHAR(1) not null,
  STMTFREQ        CHAR(1) not null,
  STMTTO          NUMBER(5) not null,
  STMTTO_HO       NUMBER(5) not null,
  PAYMTYPE        CHAR(1) not null,
  PAYMTO          CHAR(1) not null,
  POSFLAG         CHAR(1) not null,
  VIPFLAG         CHAR(1) not null,
  MSC_CHARGE      CHAR(1) not null,
  MSC_CALC        CHAR(1) not null,
  MSC_TABLE       NUMBER(5) not null,
  MSC             FLOAT not null,
  CONTRNO         VARCHAR2(8) not null,
  CONTRDATE       DATE not null,
  CONTRCNX        DATE not null,
  CONTRSIGN       VARCHAR2(3) not null,
  OFFICIAL        VARCHAR2(3) not null,
  MRCHSTAT        NUMBER(5) not null,
  RNC             VARCHAR2(20) not null,
  TAXREG          VARCHAR2(25) not null,
  RETENAMT        FLOAT not null,
  RETENPC         FLOAT not null,
  ZONEGEOG        VARCHAR2(3) not null,
  ZONECOMER       VARCHAR2(3) not null,
  ZONEPOSTAL      VARCHAR2(3) not null,
  USRDATA1        VARCHAR2(12) not null,
  USRDATA2        VARCHAR2(12) not null,
  USRDATA3        VARCHAR2(12) not null,
  MEMO            CLOB,
  CYCBEGIN        DATE not null,
  CYCLEN          NUMBER(5) not null,
  NO_IMPRNTRS     NUMBER(5) not null,
  CONACCNO        VARCHAR2(28),
  CONCUR          CHAR(3),
  PAYOFFSET       NUMBER(5) not null,
  ALLOWINST       NUMBER(5) not null,
  PPPYMNTATTR     NUMBER(5) not null,
  CAT_PARAMS      VARCHAR2(127) not null,
  ID              NUMBER(10) not null,
  VERNO_CTX       NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_1226
  add constraint PK_MERCHANT_1226 primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MERCHANT_1226_MERNO on OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_1226 (MRCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT_FENRUN_ORG
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG
(
  ORG_ID          VARCHAR2(64) not null,
  ORG_NAME        VARCHAR2(256) not null,
  ORG_BIN         VARCHAR2(500),
  ORG_PURPOSE_AMT VARCHAR2(256),
  ORG_STAT        CHAR(2) default 0,
  RESERVED_FIELD  VARCHAR2(256),
  RESERVED_FIELD1 VARCHAR2(256),
  RESERVED_FIELD2 VARCHAR2(256),
  CREATE_BY       VARCHAR2(64),
  CREATE_DATE     VARCHAR2(8),
  UPDATE_BY       VARCHAR2(64),
  UPDATE_DATE     VARCHAR2(8)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.ORG_ID
  is '·ÖÈó»ú¹¹ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.ORG_NAME
  is '·ÖÈó»ú¹¹Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.ORG_BIN
  is '¿¨bin';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.ORG_PURPOSE_AMT
  is '·ÖÈó»ú¹¹Áôµ×·ÑÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.ORG_STAT
  is '·ÖÈó»ú¹¹×´Ì¬ 0-Õý³£  1-Ëø¶¨';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.RESERVED_FIELD
  is '±¸ÓÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.RESERVED_FIELD1
  is '±¸ÓÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.RESERVED_FIELD2
  is '±¸ÓÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.CREATE_BY
  is '´´½¨Õß';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.CREATE_DATE
  is '´´½¨Ê±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.UPDATE_BY
  is '¸üÐÂÕß';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG.UPDATE_DATE
  is '¸üÐÂÊ±¼ä';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG
  add constraint PK_MERCHANT_FENRUN_ORG_ID primary key (ORG_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_FENRUN_ORG
  add constraint UK_MERCHANT_FENRUN_ORG_NAME unique (ORG_NAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table MERCHANT_TMP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_TMP
(
  INST_ID         NUMBER(10) not null,
  MRCHNO          VARCHAR2(15) not null,
  HEAD_OFFICE     VARCHAR2(15) not null,
  NAME            VARCHAR2(25) not null,
  TRADING_AS      VARCHAR2(25) not null,
  ADDRESS1        VARCHAR2(35) not null,
  ADDRESS2        VARCHAR2(35) not null,
  CITY            VARCHAR2(40) not null,
  STATE           VARCHAR2(3) not null,
  POSTCODE        VARCHAR2(15) not null,
  COUNTRYCODE     VARCHAR2(3) not null,
  PHY_ADDRESS1    VARCHAR2(35) not null,
  PHY_ADDRESS2    VARCHAR2(35) not null,
  PHY_CITY        VARCHAR2(40) not null,
  PHY_STATE       VARCHAR2(3) not null,
  PHY_POSTCODE    VARCHAR2(15) not null,
  PHY_COUNTRYCODE CHAR(3) not null,
  REG_ADDRESS1    VARCHAR2(35) not null,
  REG_ADDRESS2    VARCHAR2(35) not null,
  REG_CITY        VARCHAR2(40) not null,
  REG_STATE       VARCHAR2(3) not null,
  REG_POSTCODE    VARCHAR2(15) not null,
  REG_COUNTRYCODE CHAR(3) not null,
  CURRCODE        CHAR(3) not null,
  MRCHTYPE        NUMBER(5) not null,
  ACPTBUS         NUMBER(5) not null,
  CONTACT1        VARCHAR2(20) not null,
  CONTACT2        VARCHAR2(20) not null,
  CONTACT3        VARCHAR2(20) not null,
  TELNO1          VARCHAR2(20) not null,
  TELNO2          VARCHAR2(20) not null,
  TELNO3          VARCHAR2(20) not null,
  FAXNO           VARCHAR2(20) not null,
  EMAIL           VARCHAR2(30) not null,
  TELEX           VARCHAR2(20) not null,
  SORTCODE        VARCHAR2(9) not null,
  BRNCODE         VARCHAR2(8) not null,
  ACCNO           VARCHAR2(28) not null,
  ACCNM           VARCHAR2(30) not null,
  TAXCODE         CHAR(1) not null,
  STMTFREQ        CHAR(1) not null,
  STMTTO          NUMBER(5) not null,
  STMTTO_HO       NUMBER(5) not null,
  PAYMTYPE        CHAR(1) not null,
  PAYMTO          CHAR(1) not null,
  POSFLAG         CHAR(1) not null,
  VIPFLAG         CHAR(1) not null,
  MSC_CHARGE      CHAR(1) not null,
  MSC_CALC        CHAR(1) not null,
  MSC_TABLE       NUMBER(5) not null,
  MSC             FLOAT not null,
  CONTRNO         VARCHAR2(8) not null,
  CONTRDATE       DATE not null,
  CONTRCNX        DATE not null,
  CONTRSIGN       VARCHAR2(3) not null,
  OFFICIAL        VARCHAR2(3) not null,
  MRCHSTAT        NUMBER(5) not null,
  RNC             VARCHAR2(20) not null,
  TAXREG          VARCHAR2(25) not null,
  RETENAMT        FLOAT not null,
  RETENPC         FLOAT not null,
  ZONEGEOG        VARCHAR2(3) not null,
  ZONECOMER       VARCHAR2(3) not null,
  ZONEPOSTAL      VARCHAR2(3) not null,
  USRDATA1        VARCHAR2(12) not null,
  USRDATA2        VARCHAR2(12) not null,
  USRDATA3        VARCHAR2(12) not null,
  CYCBEGIN        DATE not null,
  CYCLEN          NUMBER(5) not null,
  NO_IMPRNTRS     NUMBER(5) not null,
  CONACCNO        VARCHAR2(28),
  CONCUR          CHAR(3),
  PAYOFFSET       NUMBER(5) not null,
  ALLOWINST       NUMBER(5) not null,
  PPPYMNTATTR     NUMBER(5) not null,
  CAT_PARAMS      VARCHAR2(127) not null,
  ID              NUMBER(10) not null,
  VERNO_CTX       NUMBER(10) not null,
  MEMO            VARCHAR2(100)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT_X
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X
(
  INST_ID                  NUMBER(10) not null,
  MRCHNO                   VARCHAR2(15) not null,
  MRCHT_NAME               VARCHAR2(200) not null,
  ADDRESS                  VARCHAR2(200) not null,
  ADD_DATE                 NUMBER(14) not null,
  CITY_NO                  NUMBER(10) default 0 not null,
  PROVINCE                 NUMBER(10) default 0 not null,
  ZONE                     NUMBER(10) default 0 not null,
  STATE                    NUMBER(5) not null,
  TYPE_YF                  NUMBER(5) not null,
  AGENT                    VARCHAR2(20) not null,
  ID_TYPE                  NUMBER(5) not null,
  ID_NO                    VARCHAR2(30) not null,
  ID_VALIDITY              DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  BUS_LIC_NO               VARCHAR2(30) not null,
  BUS_LIC_VALIDITY         DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  TAX_ID                   VARCHAR2(30) not null,
  TAX_ID_VALIDITY          DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  ORG_ID                   VARCHAR2(30) not null,
  ORG_VALIDITY             DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  TELNO1                   VARCHAR2(50) not null,
  POSTCODE                 VARCHAR2(15) not null,
  CONTACT3                 VARCHAR2(200) not null,
  ACCNO                    VARCHAR2(30) not null,
  MERCHANT_ID              NUMBER(10) default 0 not null,
  BUS_LIC_PIC              VARCHAR2(256),
  TAX_ID_PIC               VARCHAR2(256),
  ORG_ID_PIC               VARCHAR2(256),
  LEGAL_REP                VARCHAR2(100) default '',
  LR_ID_TYPE               NUMBER(5) default 1,
  LR_ID_NO                 VARCHAR2(50) default '',
  LR_ID_VALIDITY           DATE default TO_DATE('2000-07-01','yyyy-mm-dd'),
  FS_CYCLE                 VARCHAR2(100),
  FS_CYCLE_PARAM           VARCHAR2(100),
  LAST_SETTLE_DATE         DATE default to_date('2000-07-01','yyyy-mm-dd'),
  IS_CONSUMP_CATEGORY      CHAR(1) default '0',
  AMT_CONSUMP_CATEGORY     CHAR(1) default '0',
  IS_FMRCHNO_DECIDE        CHAR(1) default '0',
  FS_KP_CYCLE              VARCHAR2(100),
  FS_KP_CYCLE_PARAM        VARCHAR2(100),
  LAST_KP_DATE             DATE,
  IS_BJ                    CHAR(1) default '1',
  IS_CARD_TYPE_GROUP       CHAR(1) default '0',
  IS_KP                    CHAR(1) default '1',
  DISABLED_DATE            DATE,
  ENABLE_DATE              DATE,
  MERGE_MONEY_FLAG         CHAR(1) default '1',
  MRCH_SNIPPET             VARCHAR2(256),
  CONTRACT_START_DATE      VARCHAR2(8),
  CONTRACT_RENEWAL_DATE    VARCHAR2(8),
  MERCHANT_COMPANY_NAME    VARCHAR2(200),
  RENEWAL_TYPE             VARCHAR2(10) default 'AUTO',
  GUARANTEE_LAST_DATE      VARCHAR2(8),
  GUARANTEE_AMT            NUMBER(15,2),
  MARKET_CONTACT_PERSON    VARCHAR2(200),
  MARKET_CONTACT_MOBILE    VARCHAR2(14),
  FINANCIAL_CONTACT_PERSON VARCHAR2(200),
  FINANCIAL_CONTACT_MOBILE VARCHAR2(14),
  MERCHANT_DEPOSIT         NUMBER(15,2),
  MERCHANT_AREA            VARCHAR2(20),
  STORE_MANAGER            VARCHAR2(64),
  MERCHANT_ADVISOR         VARCHAR2(64),
  MERCHANT_ORG             VARCHAR2(64),
  MAN_NAME                 VARCHAR2(100) default '',
  ID_TYPE1                 NUMBER(5) default 1,
  ID_NO1                   VARCHAR2(50) default '',
  ID_DEADLINE1             DATE default TO_DATE('2000-07-01','yyyy-mm-dd'),
  ACC_X_NAME               VARCHAR2(80) default '',
  UPDATE_X_DATE            DATE default sysdate,
  IS_SEND_BILLDETAIL       CHAR(1) default '1',
  MERCHANT_EMAIL           VARCHAR2(2000),
  SETTLEMENT_PERSON        VARCHAR2(200),
  MERCHANT_X_OPERATE       VARCHAR2(500),
  MERCHANT_X_TYPE          VARCHAR2(2) default '12',
  MERCHANT_X_REG_AMT       NUMBER(18,2),
  MERCHANT_X_CODE          VARCHAR2(3) default 'RMB',
  MERCHANT_FENRUNORG       VARCHAR2(64) default '',
  COMBINE_FLAG             CHAR(1) default '1'
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FS_CYCLE
  is '½áËãÖÜÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FS_CYCLE_PARAM
  is '½áËãÖÜÆÚ²ÎÊý';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.LAST_SETTLE_DATE
  is 'ÉÏ´Î½áËãÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_CONSUMP_CATEGORY
  is 'ÊÇ·ñ°´ÕÕ²»Í¬Ïû·Ñ³¡¾°½áËã:0.·ñ£»1.ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.AMT_CONSUMP_CATEGORY
  is 'ÊÇ·ñºÏ²¢´ò¿î:0.·ñ£»1.ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_FMRCHNO_DECIDE
  is 'ÊÇ·ñ°´¸¸ÉÌ»§½áËã:0.·ñ£»1.ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FS_KP_CYCLE
  is '¿ªÆ±ÖÜÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FS_KP_CYCLE_PARAM
  is '¿ªÆ±ÖÜÆÚ²ÎÊý';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.LAST_KP_DATE
  is 'ÉÏ´Î¿ªÆ±ÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_BJ
  is 'ÊÇ·ñÊôÓÚ±±¾©£¬0·ñ£¬1ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_CARD_TYPE_GROUP
  is 'ÊÇ·ñ°´ÕÕ¿¨Àà±ð·Ö×é£¬0·ñ£¬1ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_KP
  is 'ÊÇ·ñ¿ªÆ±£¬0·ñ£¬1ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.DISABLED_DATE
  is 'Í£ÓÃÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.ENABLE_DATE
  is 'ÆôÓÃÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERGE_MONEY_FLAG
  is 'ÆÕ¿¨/×¨Êô¿¨ÊÇ·ñºÏ²¢´ò¿î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MRCH_SNIPPET
  is 'ÉÌ»§ÕªÒªÐÅÏ¢';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.CONTRACT_START_DATE
  is 'ºÏÍ¬Ç©¶©ÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.CONTRACT_RENEWAL_DATE
  is 'ºÏÍ¬ÐøÔ¼ÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_COMPANY_NAME
  is 'ÉÌ»§¹«Ë¾Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.RENEWAL_TYPE
  is 'ÐøÔ¼·½Ê½';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.GUARANTEE_LAST_DATE
  is '±£º¯µ½ÆÚÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.GUARANTEE_AMT
  is '±£º¯½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MARKET_CONTACT_PERSON
  is 'ÊÐ³¡ÁªÏµÈË';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MARKET_CONTACT_MOBILE
  is 'ÊÐ³¡ÁªÏµÈËµç»°';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FINANCIAL_CONTACT_PERSON
  is '²ÆÎñÁªÏµÈË';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.FINANCIAL_CONTACT_MOBILE
  is '²ÆÎñÁªÏµÈËµç»°';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_DEPOSIT
  is 'Ñº½ð';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_AREA
  is 'ÇøÓò';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.STORE_MANAGER
  is 'ÃÅµê¸ºÔðÈË';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_ADVISOR
  is 'ÉÌ»§¹ËÎÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_ORG
  is 'ÉÌ»§»ú¹¹';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MAN_NAME
  is '¿Ø¹É¹É¶«»òÊµ¼Ê¿ØÖÆÈËÐÕÃû';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.ID_TYPE1
  is '¿Ø¹É¹É¶«»òÊµ¼Ê¿ØÖÆÈËÖ¤¼þÖÖÀà';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.ID_NO1
  is '¿Ø¹É¹É¶«»òÊµ¼Ê¿ØÖÆÈËÖ¤¼þºÅÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.ID_DEADLINE1
  is '¿Ø¹É¹É¶«»òÊµ¼Ê¿ØÖÆÈËÖ¤¼þÓÐÐ§ÆÚ½ØÖ¹ÈÕ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.ACC_X_NAME
  is 'ÉÌ»§ÓªÒµÖ´ÕÕµÄÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.UPDATE_X_DATE
  is '¸üÐÂÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.IS_SEND_BILLDETAIL
  is 'ÊÇ·ñ·¢ËÍ¶ÔÕËÃ÷Ï¸£¬0·ñ£¬1ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_EMAIL
  is 'ÓÊÏä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.SETTLEMENT_PERSON
  is '½áËãÔ±';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_X_OPERATE
  is 'ÆóÒµ¾­Óª·¶Î§';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_X_TYPE
  is 'ÉÌ»§·ÖÀà:11£º×ÔÈ»ÈË£¬12£ºµ¥Î»';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_X_REG_AMT
  is '×¢²á×Ê±¾½ð';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_X_CODE
  is '×¢²á×Ê±¾½ð±ÒÖÖ:ÈËÃñ±Ò-RMB£¬ÃÀÔª-USD£¬ÈÕÔª-JPY£¬Å·Ôª-EUR£¬Ó¢°÷-GBP£¬µÂ¹úÂí¿Ë-DEM£¬ÈðÊ¿·¨ÀÉ-CHF£¬·¨¹ú·¨ÀÉ-FRF';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.MERCHANT_FENRUNORG
  is '·ÖÈó»ú¹¹';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X.COMBINE_FLAG
  is '½Ú¼ÙÈÕ½áËãÈÕÆÚÊÇ·ñºÏ²¢£¨0-²»ºÏ²¢,1-ºÏ²¢£»Ä¬ÈÏ£º1-ºÏ²¢£©';
create index OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_MRCHNO on OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X (MRCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT_X_1226
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X_1226
(
  INST_ID              NUMBER(10) not null,
  MRCHNO               VARCHAR2(15) not null,
  MRCHT_NAME           VARCHAR2(200) not null,
  ADDRESS              VARCHAR2(200) not null,
  ADD_DATE             NUMBER(14) not null,
  CITY_NO              NUMBER(10) not null,
  PROVINCE             NUMBER(10) not null,
  ZONE                 NUMBER(10) not null,
  STATE                NUMBER(5) not null,
  TYPE_YF              NUMBER(5) not null,
  AGENT                VARCHAR2(20) not null,
  ID_TYPE              NUMBER(5) not null,
  ID_NO                VARCHAR2(30) not null,
  ID_VALIDITY          DATE not null,
  BUS_LIC_NO           VARCHAR2(30) not null,
  BUS_LIC_VALIDITY     DATE not null,
  TAX_ID               VARCHAR2(30) not null,
  TAX_ID_VALIDITY      DATE not null,
  ORG_ID               VARCHAR2(30) not null,
  ORG_VALIDITY         DATE not null,
  TELNO1               VARCHAR2(50) not null,
  POSTCODE             VARCHAR2(15) not null,
  CONTACT3             VARCHAR2(200) not null,
  ACCNO                VARCHAR2(30) not null,
  MERCHANT_ID          NUMBER(10) not null,
  BUS_LIC_PIC          VARCHAR2(256),
  TAX_ID_PIC           VARCHAR2(256),
  ORG_ID_PIC           VARCHAR2(256),
  LEGAL_REP            VARCHAR2(100),
  LR_ID_TYPE           NUMBER(5),
  LR_ID_NO             VARCHAR2(50),
  LR_ID_VALIDITY       DATE,
  FS_CYCLE             VARCHAR2(100),
  FS_CYCLE_PARAM       VARCHAR2(100),
  LAST_SETTLE_DATE     DATE,
  IS_CONSUMP_CATEGORY  CHAR(1),
  AMT_CONSUMP_CATEGORY CHAR(1),
  IS_FMRCHNO_DECIDE    CHAR(1),
  FS_KP_CYCLE          VARCHAR2(100),
  FS_KP_CYCLE_PARAM    VARCHAR2(100),
  LAST_KP_DATE         DATE,
  IS_BJ                CHAR(1),
  IS_CARD_TYPE_GROUP   CHAR(1),
  IS_KP                CHAR(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MERCHANT_X_1226_MERID on OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X_1226 (MERCHANT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MERCHANT_X_TEM
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_X_TEM
(
  MERCHANT_ID VARCHAR2(15),
  CREATE_DATE VARCHAR2(8),
  MRCHT_NAME  VARCHAR2(200)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MINISTMT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MINISTMT
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  ACCNO     VARCHAR2(28) not null,
  OPDATE1   DATE not null,
  OPTIME1   NUMBER(10) not null,
  OP1       NUMBER(5) not null,
  CUR1      CHAR(3) not null,
  AMT1      FLOAT not null,
  OPDATE2   DATE not null,
  OPTIME2   NUMBER(10) not null,
  OP2       NUMBER(5) not null,
  CUR2      CHAR(3) not null,
  AMT2      FLOAT not null,
  OPDATE3   DATE not null,
  OPTIME3   NUMBER(10) not null,
  OP3       NUMBER(5) not null,
  CUR3      CHAR(3) not null,
  AMT3      FLOAT not null,
  OPDATE4   DATE not null,
  OPTIME4   NUMBER(10) not null,
  OP4       NUMBER(5) not null,
  CUR4      CHAR(3) not null,
  AMT4      FLOAT not null,
  OPDATE5   DATE not null,
  OPTIME5   NUMBER(10) not null,
  OP5       NUMBER(5) not null,
  CUR5      CHAR(3) not null,
  AMT5      FLOAT not null,
  OPDATE6   DATE not null,
  OPTIME6   NUMBER(10) not null,
  OP6       NUMBER(5) not null,
  CUR6      CHAR(3) not null,
  AMT6      FLOAT not null,
  OPDATE7   DATE not null,
  OPTIME7   NUMBER(10) not null,
  OP7       NUMBER(5) not null,
  CUR7      CHAR(3) not null,
  AMT7      FLOAT not null,
  OPDATE8   DATE not null,
  OPTIME8   NUMBER(10) not null,
  OP8       NUMBER(5) not null,
  CUR8      CHAR(3) not null,
  AMT8      FLOAT not null,
  OPDATE9   DATE not null,
  OPTIME9   NUMBER(10) not null,
  OP9       NUMBER(5) not null,
  CUR9      CHAR(3) not null,
  AMT9      FLOAT not null,
  OPDATE10  DATE not null,
  OPTIME10  NUMBER(10) not null,
  OP10      NUMBER(5) not null,
  CUR10     CHAR(3) not null,
  AMT10     FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MINISTMT on OPS$YUFU_CHINA_PS_RUN_BAK.MINISTMT (INST_ID, ACCNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MONAREACODE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONAREACODE
(
  AREA_CODE VARCHAR2(6) not null,
  AREA_NAME VARCHAR2(40),
  PROV_ID   VARCHAR2(2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table MONDEPTINFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTINFO
(
  DEPT_NO      VARCHAR2(12) not null,
  DEPT_NAME    VARCHAR2(60),
  DEPT_DESC    VARCHAR2(200),
  DEPT_UPPERNO VARCHAR2(9),
  DEPT_LEVEL   VARCHAR2(2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTINFO (DEPT_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONDEPTOPER
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTOPER
(
  DEPT_NO      VARCHAR2(12) not null,
  DEPT_NAME    VARCHAR2(60),
  DEPT_DESC    VARCHAR2(200),
  DEPT_UPPERNO VARCHAR2(9),
  AREA_CODE    VARCHAR2(6),
  DEPT_LEVEL   VARCHAR2(2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTOPER_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONDEPTOPER (DEPT_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table MONEMPLOYEE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONEMPLOYEE
(
  ID      NUMBER(12) not null,
  NAME    VARCHAR2(50),
  AGE     NUMBER(3),
  PICTURE BLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONEMPLOYEE_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONEMPLOYEE (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONHSTST
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONHSTST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  HOSTNAME  VARCHAR2(4) not null,
  LASTTIME  VARCHAR2(12) not null,
  TXNCOUNT  NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MONHSTST on OPS$YUFU_CHINA_PS_RUN_BAK.MONHSTST (HOSTNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONLOGINFO
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONLOGINFO
(
  ID             NUMBER(12) not null,
  USER_CODE      VARCHAR2(20),
  OPERATE        VARCHAR2(20),
  OPERATE_STATUS NUMBER(12),
  OPERATE_DATE   DATE,
  IP             VARCHAR2(20),
  LOG_TYPE       NUMBER(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONLOGINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONLOGINFO (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONMARKETINFO
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONMARKETINFO
(
  ID         NUMBER(12) not null,
  POINT_NAME VARCHAR2(50),
  ADDRESS    VARCHAR2(150)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONMARKETINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONMARKETINFO (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONMENUINFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONMENUINFO
(
  MENU_NO       VARCHAR2(6) not null,
  MENU_NAME     VARCHAR2(60),
  MENU_LEVEL    VARCHAR2(6),
  MENU_PARENTNO VARCHAR2(3),
  MENU_PATH     VARCHAR2(200),
  MENU_DESC     VARCHAR2(200)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONMENUINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONMENUINFO (MENU_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONPROVINCE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONPROVINCE
(
  PROV_ID   VARCHAR2(12),
  PROV_NAME VARCHAR2(50)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONROLEINFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEINFO
(
  ROLE_NO   VARCHAR2(3) not null,
  ROLE_NAME VARCHAR2(20),
  ROLE_DESC VARCHAR2(200)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEINFO (ROLE_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONROLEMENU
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEMENU
(
  ROLE_NO    VARCHAR2(3) not null,
  MENU_NO    VARCHAR2(3) not null,
  MENU_LEVEL VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEMENU_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONROLEMENU (ROLE_NO, MENU_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONRSPST
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONRSPST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  IFE       VARCHAR2(8) not null,
  TXNTIME   VARCHAR2(12) not null,
  STATUS    NUMBER(5) not null,
  TXNCOUNT  NUMBER(10) not null,
  TXNDATE   DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MONRSPST on OPS$YUFU_CHINA_PS_RUN_BAK.MONRSPST (IFE, TXNTIME, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MONRSPST_TXNDATE on OPS$YUFU_CHINA_PS_RUN_BAK.MONRSPST (TXNDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONTRSFR_CUST
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONTRSFR_CUST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) default 0 not null,
  PAN       VARCHAR2(19) not null,
  SEQNO     NUMBER(5) not null,
  NAME      VARCHAR2(30) default ' ' not null,
  STREET    VARCHAR2(35) default ' ' not null,
  CITY      VARCHAR2(25) default ' ' not null,
  REGION    VARCHAR2(2) default ' ' not null,
  COUNTRY   VARCHAR2(3) default ' ' not null,
  POSTCODE  VARCHAR2(10) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MONTRSFR_CUST on OPS$YUFU_CHINA_PS_RUN_BAK.MONTRSFR_CUST (INST_ID, PAN, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MONTXNST
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONTXNST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  IFE       VARCHAR2(8) not null,
  TXNTIME   VARCHAR2(12) not null,
  STATUS    NUMBER(5) not null,
  TXNCOUNT  NUMBER(10) not null,
  TXNDATE   DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MONTXNST on OPS$YUFU_CHINA_PS_RUN_BAK.MONTXNST (IFE, TXNTIME, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MONTXNST_TXNDATE on OPS$YUFU_CHINA_PS_RUN_BAK.MONTXNST (TXNDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONUSERINFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERINFO
(
  USER_CODE        VARCHAR2(20) not null,
  USER_NAME        VARCHAR2(40),
  USER_PASSWD      VARCHAR2(40) not null,
  DEPT_NO          VARCHAR2(12) not null,
  ROLE_NO          VARCHAR2(3) not null,
  USER_ADDRESS     VARCHAR2(80),
  USER_POSTALCODE  VARCHAR2(6),
  USER_MAIL        VARCHAR2(40),
  USER_FAX         VARCHAR2(16),
  USER_PHONE       VARCHAR2(22),
  USER_LOGINFLAG   VARCHAR2(1),
  USER_LASTINTIME  VARCHAR2(19),
  USER_PWDINVLDDAY VARCHAR2(10),
  USER_VALIDDAYS   VARCHAR2(10),
  USER_ISACTIVE    VARCHAR2(1) default '0',
  USER_MAC         VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERINFO_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERINFO (USER_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MONUSERROLE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERROLE
(
  USER_CODE VARCHAR2(20) not null,
  ROLE_NO   VARCHAR2(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERROLE_PK on OPS$YUFU_CHINA_PS_RUN_BAK.MONUSERROLE (USER_CODE, ROLE_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table MRCHACC
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACC
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  MERCHANT_ID    NUMBER(10) default 0 not null,
  CURRCODE       CHAR(3) not null,
  DATE_LAST_STMT DATE not null,
  CLOSING_BAL    FLOAT not null,
  CURRENT_BAL    FLOAT not null,
  LAST_POST_BAL  FLOAT default 0.0 not null,
  LAST_POST_COM  FLOAT default 0.0 not null,
  LAST_POST_TAX  FLOAT default 0.0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHACC on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACC (MERCHANT_ID, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MRCHACCENT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCENT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  DATESTMT    DATE not null,
  DATETXN     DATE not null,
  TXNCODE     NUMBER(5) not null,
  AMT         FLOAT not null,
  CURRCODE    CHAR(3) not null,
  BTCHID      NUMBER(10) not null,
  BTCHDATE    DATE not null,
  DESCR       VARCHAR2(40) not null,
  AMTCOM      FLOAT default 0.0 not null,
  DUE_DATE    DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  AMTTAX      FLOAT default 0.0 not null,
  MERCHANT_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHACCENT on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCENT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHACCENT_I_M_D on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCENT (MERCHANT_ID, DATESTMT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHACCITM
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  CURRCODE    CHAR(3) not null,
  BTCHID      NUMBER(10) not null,
  BTCHDATE    DATE not null,
  DATETXN     DATE not null,
  TXNCODE     NUMBER(5) not null,
  DESCR       VARCHAR2(40) not null,
  AMT         FLOAT not null,
  AMTCOM      FLOAT default 0.0 not null,
  AMTTAX      FLOAT default 0.0 not null,
  DUE_DATE    DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  DATE_PAID   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  DATESTMT    DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  DATESTMT_HO DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHACCITM on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHACCITM_STMT on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM (MERCHANT_ID, DATESTMT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHACCITM_STMT_HO on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM (MERCHANT_ID, DATESTMT_HO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHACCITM_TXN on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM (MERCHANT_ID, CURRCODE, DATETXN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHACCOPN
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCOPN
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  DATETXN     DATE not null,
  TXNCODE     NUMBER(5) not null,
  AMT         FLOAT not null,
  CURRCODE    CHAR(3) not null,
  BTCHID      NUMBER(10) not null,
  BTCHDATE    DATE not null,
  DESCR       VARCHAR2(40) not null,
  PAYMTYPE    CHAR(1) not null,
  AMTCOM      FLOAT default 0.0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHACCOPN on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCOPN (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHACCOPN_I_M_C_D on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCOPN (MERCHANT_ID, CURRCODE, DATETXN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHDRCR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHDRCR
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  CURRCODE    CHAR(3) not null,
  CTXDATE     DATE not null,
  BTCHID      NUMBER(10) not null,
  BTCHDATE    DATE not null,
  TXNCODE     NUMBER(5) not null,
  AMT         FLOAT not null,
  PROCESSED   CHAR(1) not null,
  DESCR       VARCHAR2(40) not null,
  DUE_DATE    DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHDRCR on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHDRCR (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MRCHDRCR_I_M_P on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHDRCR (MERCHANT_ID, PROCESSED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_MRCHDRCR_ID_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHDRCR (ID, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHMON
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMON
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  MERCHANT_ID        NUMBER(10) default 0 not null,
  CTXDATE            DATE not null,
  AUTHFIN            CHAR(1) not null,
  NUMTXN             NUMBER(10) not null,
  AMTTXN             FLOAT not null,
  NUMCOPY            NUMBER(10) not null,
  AMTCOPY            FLOAT not null,
  NUMCHARGE          NUMBER(10) not null,
  AMTCHARGE          FLOAT not null,
  NUMKEY             NUMBER(10) not null,
  AMTKEY             FLOAT not null,
  NUMREFUND          NUMBER(10) not null,
  AMTREFUND          FLOAT not null,
  TXN_BELOW_FLOORLIM FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHMON on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMON (MERCHANT_ID, CTXDATE, AUTHFIN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHMONTOT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMONTOT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  RECTYP      CHAR(1) not null,
  CTXDATE     DATE not null,
  CURRCODE    CHAR(3) not null,
  SCHEME      VARCHAR2(12) not null,
  PRODUCT     VARCHAR2(4) not null,
  DRCNT       NUMBER(10) not null,
  AMTDR       FLOAT not null,
  CRCNT       NUMBER(10) not null,
  AMTCR       FLOAT not null,
  CHGBKCNT    NUMBER(10) not null,
  AMTCHGBK    FLOAT not null,
  AMTCOM      FLOAT not null,
  AMTTAX      FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHMONTOT on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMONTOT (CTXDATE, RECTYP, MERCHANT_ID, CURRCODE, SCHEME, PRODUCT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHMTD
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMTD
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  CURRCODE    CHAR(3) not null,
  BTCHCNTMTD  NUMBER(5) not null,
  BTCHCNTPM   NUMBER(5) not null,
  BTCHCNTYTD  NUMBER(5) not null,
  BTCHDRMTD   FLOAT not null,
  BTCHDRPM    FLOAT not null,
  BTCHDRYTD   FLOAT not null,
  BTCHCRMTD   FLOAT not null,
  BTCHCRPM    FLOAT not null,
  BTCHCRYTD   FLOAT not null,
  BTCHCOMMTD  FLOAT not null,
  BTCHCOMPM   FLOAT not null,
  BTCHCOMYTD  FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHMTD on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHMTD (MERCHANT_ID, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MRCHPPSET
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHPPSET
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  MRCHNO    VARCHAR2(15) not null,
  CURRCODE  CHAR(3) not null,
  PPSETNAME CHAR(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHPPSET on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHPPSET (INST_ID, MRCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHPRODUCT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHPRODUCT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  CRDPRODUCT  VARCHAR2(4) not null,
  MSC         FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHPRODUCT on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHPRODUCT (MERCHANT_ID, CRDPRODUCT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHSCHDEF
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSCHDEF
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  INST_ID      NUMBER(10) default 0 not null,
  SCHEME       VARCHAR2(12) not null,
  FLOORLIM     FLOAT not null,
  MSC          FLOAT not null,
  MSC_INTL     FLOAT not null,
  MSC_DR       FLOAT not null,
  MSC_CR       FLOAT not null,
  PAYOFFSET_DR NUMBER(5) not null,
  PAYOFFSET_CR NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MRCHSCHEME
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSCHEME
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  MERCHANT_ID  NUMBER(10) default 0 not null,
  SCHEME       VARCHAR2(12) not null,
  FLOORLIM     FLOAT not null,
  MSC          FLOAT not null,
  MSC_INTL     FLOAT default 0.0 not null,
  MSC_DR       FLOAT default 0.0 not null,
  MSC_CR       FLOAT default 0.0 not null,
  PAYOFFSET_DR NUMBER(5) default 0 not null,
  PAYOFFSET_CR NUMBER(5) default 0 not null,
  CRDACPTBUS   NUMBER(5) not null,
  SCHMRCHNO    VARCHAR2(15) not null,
  TXN_PARAMS   VARCHAR2(127) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHSCHEME on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSCHEME (MERCHANT_ID, SCHEME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MRCHSCHEMEVI
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSCHEMEVI
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  SCHEME      VARCHAR2(12) not null,
  MVV         VARCHAR2(10) default ' ' not null,
  REIMBATTR   CHAR(1) default ' ' not null,
  FEEPRG      VARCHAR2(3) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHSCHEMEVI on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSCHEMEVI (MERCHANT_ID, SCHEME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHSTMT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSTMT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  DATESTMT    DATE not null,
  OPENBAL     FLOAT not null,
  CLOSEBAL    FLOAT not null,
  CURRCODE    CHAR(3) not null,
  VAL_DEPOSIT FLOAT not null,
  VAL_CHGBKB  FLOAT not null,
  VAL_ADJ     FLOAT not null,
  VAL_COM     FLOAT not null,
  VAL_PAY     FLOAT not null,
  PAYREF      VARCHAR2(12) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHSTMT on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHSTMT (MERCHANT_ID, DATESTMT, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHTAX
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHTAX
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  TAXFLAG     CHAR(1) not null,
  TAX         FLOAT not null,
  CURRCODE    CHAR(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MRCHTAX on OPS$YUFU_CHINA_PS_RUN_BAK.MRCHTAX (MERCHANT_ID, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCHTERM
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHTERM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  TERMNO      NUMBER(5) not null,
  TERMID      NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MRCHTERM
  add constraint UNQ_MRCHTERM_I_M_T unique (MERCHANT_ID, TERMNO)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table MRCH_ACC_X
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X
(
  ID                   NUMBER(10) default 0 not null,
  INST_ID              NUMBER(10) not null,
  MRCHNO               VARCHAR2(15) not null,
  ACCNO                VARCHAR2(30) not null,
  ACC_NAME             VARCHAR2(200) not null,
  BANK_NO              NUMBER(16) default 0 not null,
  BANK_NAME            VARCHAR2(200) not null,
  ACC_ADD_DATE         DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  ACC_NICK_NAME        VARCHAR2(200) not null,
  SHORT_NICK_NAME      VARCHAR2(200) not null,
  INDIVIDUAL           CHAR(1) not null,
  LAST_SETTLE_DATE     DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  MERCHANT_ID          NUMBER(10) default 0 not null,
  ACCOUNT_ID           INTEGER,
  ACC_INTROD           VARCHAR2(500) default '',
  IS_BJ_ACCT           CHAR(1) default '1',
  BIS                  VARCHAR2(100),
  MERCHANT_X_ACC_TYPE1 VARCHAR2(2) default '12',
  PAY_ACCOUNT_TYPE     VARCHAR2(2) default '00',
  ACC_X_PROVINCE       NUMBER(10),
  ACC_X_CITY_NO        NUMBER(10),
  ACC_X_TEXT           VARCHAR2(1000) default '¸£¿¨¿îÕËÆÚ'
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.IS_BJ_ACCT
  is 'ÊÇ·ñÊÇ±±¾©¿ª»§ÐÐ:0.·ñ£»1.ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.BIS
  is '½áËãÒøÐÐ (bank for international settlements)';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.MERCHANT_X_ACC_TYPE1
  is '½áËãÕË»§ÀàÐÍ:11£ºÖ§¸¶ÕË»§¡¢12£ºÒøÐÐÕË»§';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.PAY_ACCOUNT_TYPE
  is 'ÊÕ¿îÕË»§ÊôÐÔ£¨00-¶Ô¹«ÕË»§£¬01-¶ÔË½ÕË»§£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.ACC_X_PROVINCE
  is '¿ª»§ÐÐËùÔÚÊ¡·Ý';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.ACC_X_CITY_NO
  is '¿ª»§ÐÐËùÔÚÊÐ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X.ACC_X_TEXT
  is '¸½ÑÔ£¨¸£¿¨¿î2018.08.21µêÃû£©ÔÙÐÎ³ÉÒ»¸ö´ú¸¶±í¡£´ú¸¶±í¸ñÊ½Èç¸½¼þ';

prompt
prompt Creating table MRCH_ACC_X_1226
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X_1226
(
  ID               NUMBER(10) not null,
  INST_ID          NUMBER(10) not null,
  MRCHNO           VARCHAR2(15) not null,
  ACCNO            VARCHAR2(30) not null,
  ACC_NAME         VARCHAR2(200) not null,
  BANK_NO          NUMBER(16) not null,
  BANK_NAME        VARCHAR2(200) not null,
  ACC_ADD_DATE     DATE not null,
  ACC_NICK_NAME    VARCHAR2(200) not null,
  SHORT_NICK_NAME  VARCHAR2(200) not null,
  INDIVIDUAL       CHAR(1) not null,
  LAST_SETTLE_DATE DATE not null,
  MERCHANT_ID      NUMBER(10) not null,
  ACCOUNT_ID       INTEGER,
  ACC_INTROD       VARCHAR2(500),
  IS_BJ_ACCT       CHAR(1),
  BIS              VARCHAR2(100)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X_1226
  add constraint PK_MRCH_ACC_X_1226 primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MRCH_CLASS
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_CLASS
(
  INST_ID  NUMBER(10) not null,
  MRCHNO   VARCHAR2(15) not null,
  CLASSIFY CHAR(1) not null,
  FMRCHNO  VARCHAR2(15)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MSC
prompt ==================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.MSC
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TAG       VARCHAR2(25) not null,
  IDX       NUMBER(5) not null,
  MSCMODULE VARCHAR2(2) not null,
  DESCR     NUMBER(10) not null,
  MASK      NUMBER(5) not null,
  STRING_T  VARCHAR2(100) not null,
  LONG_T    NUMBER(10) not null,
  SHORT_T   NUMBER(5) not null,
  DOUBLE_T  FLOAT not null,
  DATE_T    DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_MSC on OPS$YUFU_CHINA_PS_RUN_BAK.MSC (TAG, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table NOTEMIXW
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTEMIXW
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  NOTEMIX_ID NUMBER(5) not null,
  CURRCODE   CHAR(3) not null,
  DENOM      NUMBER(10) not null,
  AMT1       NUMBER(10) not null,
  WEIGHT1    NUMBER(10) not null,
  AMT2       NUMBER(10) not null,
  WEIGHT2    NUMBER(10) not null,
  POW        FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTEMIXW on OPS$YUFU_CHINA_PS_RUN_BAK.NOTEMIXW (NOTEMIX_ID, CURRCODE, DENOM)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table NOTIFMSG
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFMSG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  TIME_STAMP  FLOAT not null,
  DESCRIPTION VARCHAR2(255) not null,
  CONDITION   VARCHAR2(255) not null,
  SET_ID      NUMBER(10) default 0 not null,
  PRIORITY    NUMBER(10) default 10 not null,
  METRIC      NUMBER(10) default 20 not null,
  ACTIVE      NUMBER(5) default 1 not null,
  EFFDATE     DATE not null,
  EFFTIME     NUMBER(10) not null,
  EXPDATE     DATE not null,
  EXPTIME     NUMBER(10) not null,
  MSGSRC      NUMBER(5) not null,
  DESCRTYPE   VARCHAR2(255) not null,
  NUM_ID      NUMBER(10) not null,
  STR_ID      VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTIFMSG on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFMSG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table NOTIFYDEF
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYDEF
(
  VERNO_CTX   NUMBER(10) default 0 not null,
  ID          NUMBER(10) not null,
  NOTIFY_CODE VARCHAR2(31) not null,
  NOTIFY_IDX  NUMBER(10) not null,
  DESCR       VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYDEF
  add constraint UNQ_NOTIFYDEF_IDX unique (NOTIFY_IDX)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTIFYDEF on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYDEF (NOTIFY_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table NOTIFYFLDS
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYFLDS
(
  VERNO_CTX    NUMBER(10) default 0 not null,
  ID           NUMBER(10) not null,
  INST_ID      NUMBER(10) default 0 not null,
  NOTIFYDEF_ID NUMBER(10) not null,
  TUXEDO_FLD   VARCHAR2(30) not null,
  FLD_OCC      NUMBER(5) not null,
  VAR_NAME     VARCHAR2(30) not null,
  FLD_USAGE    NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYFLDS
  add constraint UNQ_NOTIFYFLDS_I_DEF_TUXFLD unique (INST_ID, NOTIFYDEF_ID, TUXEDO_FLD, FLD_OCC)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYFLDS
  add constraint UNQ_NOTIFYFLDS_I_DEF_VAR unique (INST_ID, NOTIFYDEF_ID, VAR_NAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTIFYFLDS on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYFLDS (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table NOTIFYLOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG
(
  VERNO_CTX          NUMBER(10) default 0 not null,
  ID                 NUMBER(10) not null,
  DATE_CREATED_EPOCH NUMBER(10) not null,
  TIME_CREATED       NUMBER(10) not null,
  CTXDATE            DATE not null,
  NOTIFY_CHANNEL     NUMBER(5) not null,
  ADDR_DATA          VARCHAR2(63) not null,
  STATUS             CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTIFYLOG on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_NOTIFYLOG_LOOKUP on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG (CTXDATE, NOTIFY_CHANNEL, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table NOTIFYLOG_TLOG_LINK
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG_TLOG_LINK
(
  VERNO_CTX    NUMBER(10) default 0 not null,
  ID           NUMBER(10) not null,
  TLOG_ID      NUMBER(20) not null,
  NOTIFYLOG_ID NUMBER(10) not null,
  NOTIFY_IDX   NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG_TLOG_LINK
  add constraint UNQ_NOTIFYLOG_TLOG_LINK unique (TLOG_ID, NOTIFY_IDX)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NOTIFYLOG_TLOG_LINK on OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG_TLOG_LINK (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table NUMDESCR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.NUMDESCR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  LANG      VARCHAR2(2) not null,
  DESCRTYPE VARCHAR2(6) not null,
  ID        NUMBER(5) not null,
  DESCR     VARCHAR2(160) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 896K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_NUMDESCR on OPS$YUFU_CHINA_PS_RUN_BAK.NUMDESCR (LANG, DESCRTYPE, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 1088K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OFFICIAL
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OFFICIAL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  INST_ID   NUMBER(10) default 0 not null,
  OFFICIAL  VARCHAR2(3) not null,
  DESCR     VARCHAR2(40) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OPENCRDBATCH
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TXNSRC         CHAR(1) default '4' not null,
  TXNCODE        NUMBER(5) not null,
  TIME           VARCHAR2(20) default '' not null,
  STAN           NUMBER(7) default 0 not null,
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) default 0 not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ORG_F_ORDER    VARCHAR2(40) default '' not null,
  ORG_C_ORDER    VARCHAR2(40) default '' not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  PAY_TYPE       NUMBER(5) default 1 not null,
  PAY_DESC       VARCHAR2(128) default '' not null,
  PAYER_NAME     VARCHAR2(128) default '' not null,
  SALES_POINT    VARCHAR2(128) default '' not null,
  AREA           VARCHAR2(128) default '' not null,
  ISOPEN_FLAG    CHAR(2) default 0 not null,
  SUMMARY        VARCHAR2(128) default '' not null,
  OPERATOR       VARCHAR2(128) default '' not null,
  MRCHT_ID       VARCHAR2(15) default '' not null,
  BATCH_STAT     CHAR(2) not null,
  RESERVED1      VARCHAR2(255) default '' not null,
  RESERVED2      VARCHAR2(255) default '' not null,
  RESERVED3      VARCHAR2(255) default '' not null,
  DESCR          VARCHAR2(255) default ' ' not null,
  CURTXN         CHAR(3) default '156',
  AMTTXN         FLOAT default 0,
  RATESET        FLOAT default 0,
  CURRBILL       CHAR(3) default '156',
  CRDPRODUCT     VARCHAR2(4) default ' '
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH
  add constraint PK_OPENCRDBATCH primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH
  add constraint HASH_OPENCRDBATCH unique (TXNSRC, FATHER_ORDER, CHILDREN_ORDER)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OPENCRDBATCH_BAK
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH_BAK
(
  VERNO_CTX      NUMBER(10) not null,
  ID             NUMBER(10) not null,
  TXNSRC         CHAR(1) not null,
  TXNCODE        NUMBER(5) not null,
  TIME           VARCHAR2(20) not null,
  STAN           NUMBER(7) not null,
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ORG_F_ORDER    VARCHAR2(40) not null,
  ORG_C_ORDER    VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  PAY_TYPE       NUMBER(5) not null,
  PAY_DESC       VARCHAR2(128) not null,
  PAYER_NAME     VARCHAR2(128) not null,
  SALES_POINT    VARCHAR2(128) not null,
  AREA           VARCHAR2(128) not null,
  ISOPEN_FLAG    CHAR(2) not null,
  SUMMARY        VARCHAR2(128) not null,
  OPERATOR       VARCHAR2(128) not null,
  MRCHT_ID       VARCHAR2(15) not null,
  BATCH_STAT     CHAR(2) not null,
  RESERVED1      VARCHAR2(255) not null,
  RESERVED2      VARCHAR2(255) not null,
  RESERVED3      VARCHAR2(255) not null,
  DESCR          VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OPENCRDBATCH_CUSTOM
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH_CUSTOM
(
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) default 0 not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ISOPEN_FLAG    CHAR(2) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OPENCRDBATCH_STCS
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH_STCS
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TXNSRC         CHAR(1) default '4' not null,
  TXNCODE        NUMBER(5) not null,
  TIME           VARCHAR2(20) default '' not null,
  STAN           NUMBER(7) default 0 not null,
  PAN_START      VARCHAR2(19) not null,
  PAN_END        VARCHAR2(19) not null,
  PAN_COUNT      NUMBER(10) default 0 not null,
  AMT_EACH_CRD   FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ORG_F_ORDER    VARCHAR2(40) default '' not null,
  ORG_C_ORDER    VARCHAR2(40) default '' not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  PAY_TYPE       NUMBER(5) default 1 not null,
  PAY_DESC       VARCHAR2(128) default '' not null,
  PAYER_NAME     VARCHAR2(128) default '' not null,
  SALES_POINT    VARCHAR2(128) default '' not null,
  AREA           VARCHAR2(128) default '' not null,
  ISOPEN_FLAG    CHAR(2) default 0 not null,
  SUMMARY        VARCHAR2(128) default '' not null,
  OPERATOR       VARCHAR2(128) default '' not null,
  MRCHT_ID       VARCHAR2(15) default '' not null,
  BATCH_STAT     CHAR(2) not null,
  RESERVED1      VARCHAR2(255) default '' not null,
  RESERVED2      VARCHAR2(255) default '' not null,
  RESERVED3      VARCHAR2(255) default '' not null,
  DESCR          VARCHAR2(255) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_OPENCRDBATCH_STCS on OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH_STCS (TXNSRC, FATHER_ORDER, CHILDREN_ORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OPENCRD_ERROR
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRD_ERROR
(
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ERRDESC        VARCHAR2(1024) not null,
  ERRCODE        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OUTBATCH
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.OUTBATCH
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  CTXDATE      DATE not null,
  OUTBTCHID    NUMBER(10) not null,
  OUTBTCHTYPE1 NUMBER(5) not null,
  OUTBTCHTYPE2 NUMBER(5) not null,
  OUTBTCHTYPE3 NUMBER(5) not null,
  OUTBTCHTYPE4 NUMBER(5) not null,
  STATUS       NUMBER(5) not null,
  FILEINFO     VARCHAR2(64) not null,
  DESCR        VARCHAR2(255) not null,
  DESTREF      VARCHAR2(12) default ' ' not null,
  FILENAME     VARCHAR2(255) default ' ' not null,
  PROGNAME     VARCHAR2(32) default ' ' not null,
  WHEN_CREATED VARCHAR2(17) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_OUTBATCH on OPS$YUFU_CHINA_PS_RUN_BAK.OUTBATCH (CTXDATE, OUTBTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PANMAP
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PANMAP
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PAN       VARCHAR2(19) not null,
  SEQNO     NUMBER(5) not null,
  HOST      VARCHAR2(4) not null,
  HOST_ID   VARCHAR2(32) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PANMAP on OPS$YUFU_CHINA_PS_RUN_BAK.PANMAP (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PANMAP_HOST on OPS$YUFU_CHINA_PS_RUN_BAK.PANMAP (HOST, HOST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PANMAP_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.PANMAP (PAN, SEQNO, HOST)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PAY_REFUND_INFO
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PAY_REFUND_INFO
(
  VERNO_CTX       NUMBER(10) default 0 not null,
  ID              NUMBER(10) default 0 not null,
  TLOGID          NUMBER(10) default 0 not null,
  RRN             VARCHAR2(12) not null,
  AMTTXN          FLOAT not null,
  REMAIN_AMT      FLOAT not null,
  BLACK_AMT       FLOAT not null,
  CLEAR_AMT       FLOAT not null,
  ADD_DATA_TXN    VARCHAR2(255) not null,
  ADD_DATA_REMAIN VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PAY_REFUND_INFO on OPS$YUFU_CHINA_PS_RUN_BAK.PAY_REFUND_INFO (TLOGID, RRN, AMTTXN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255;

prompt
prompt Creating table PINSTATUS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PINSTATUS
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SYSDEF      CHAR(1) not null,
  SHORT_DESCR VARCHAR2(27) not null,
  DESCR       VARCHAR2(128),
  ALLOWSVC    VARCHAR2(192) not null,
  ACTIONCODE  CHAR(2) not null,
  RSPCODE     CHAR(2) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PINSTATUS on OPS$YUFU_CHINA_PS_RUN_BAK.PINSTATUS (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PINSTHST
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PINSTHST
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  OLD_PINSTATUS_ID NUMBER(5) not null,
  NEW_PINSTATUS_ID NUMBER(5) not null,
  DATE_SET         DATE not null,
  TIME_SET         NUMBER(10) not null,
  WHY_SET          VARCHAR2(60) not null,
  WHO_SET          VARCHAR2(12) not null,
  CTXDATE          DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  CRDDET_ID        NUMBER(10) default 0 not null,
  EXPDATE          DATE default to_date('2263-08-31','yyyy-mm-dd') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PINSTHST on OPS$YUFU_CHINA_PS_RUN_BAK.PINSTHST (CRDDET_ID, DATE_SET, TIME_SET)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PLUSROUTE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PLUSROUTE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACLEN     VARCHAR2(2) not null,
  IIDLEN    VARCHAR2(2) not null,
  IID       VARCHAR2(12) not null,
  FROM_TYPE CHAR(1) not null,
  BIN_FLAG  CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PLUSROUTE on OPS$YUFU_CHINA_PS_RUN_BAK.PLUSROUTE (IIDLEN, IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PLUSROUTE_IID on OPS$YUFU_CHINA_PS_RUN_BAK.PLUSROUTE (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSDEF
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSDEF
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  TYPEID        NUMBER(5) not null,
  TERMTYPE      CHAR(1) not null,
  VENDOR        VARCHAR2(15) not null,
  MODEL         VARCHAR2(15) not null,
  SOFTWAREVER   VARCHAR2(15) not null,
  MACIND        NUMBER(5) default 0 not null,
  ENCIND        NUMBER(5) default 0 not null,
  NONEMVSCHEMES VARCHAR2(127) default ''
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSDEF on OPS$YUFU_CHINA_PS_RUN_BAK.POSDEF (TYPEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSDEF_T_V_M_S on OPS$YUFU_CHINA_PS_RUN_BAK.POSDEF (TYPEID, VENDOR, MODEL, SOFTWAREVER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table POSINSTLMNT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSINSTLMNT
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  TLOGID     NUMBER(20) not null,
  LOANPERIOD NUMBER(5) not null,
  SETPERIOD  NUMBER(5) not null,
  CTXDATE    DATE not null,
  PPSETNAME  CHAR(4) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSINSTLMNT on OPS$YUFU_CHINA_PS_RUN_BAK.POSINSTLMNT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSTINSTLMNT_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.POSINSTLMNT (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSMRCHBTCH
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSMRCHBTCH
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CTXDATE       DATE not null,
  BTCHID        NUMBER(10) not null,
  TERMPOS_ID    NUMBER(10) default 0 not null,
  TERMBTCHNO    NUMBER(10) not null,
  TERMSTARTTSEQ NUMBER(5) not null,
  TERMENDTSEQ   NUMBER(5) not null,
  TERMBTCHDATE  DATE not null,
  CLOSEDTODAY   NUMBER(5),
  AMTTAX        FLOAT not null,
  AMTCOM        FLOAT not null,
  SALESCOUNT    NUMBER(5) not null,
  SALESAMT      FLOAT not null,
  REFUNDCOUNT   NUMBER(5) not null,
  REFUNDAMT     FLOAT not null,
  PROCESSED     CHAR(1) default '0' not null,
  CLOSETYPE     NUMBER(5) default 0 not null,
  USR           VARCHAR2(15) default ' ' not null,
  TERMBTCHTIME  NUMBER(10) default 0 not null,
  EXTPROCID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSMRCHBTCH_SYSDATE on OPS$YUFU_CHINA_PS_RUN_BAK.POSMRCHBTCH (CTXDATE, TERMPOS_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSMRCHBTCH_TERMBTCHNO on OPS$YUFU_CHINA_PS_RUN_BAK.POSMRCHBTCH (TERMPOS_ID, TERMBTCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table POSNONREC
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSNONREC
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  CTXDATE          DATE not null,
  BTCHID           NUMBER(10) not null,
  TERMPOS_ID       NUMBER(10) default 0 not null,
  TERMBTCHNO       NUMBER(10) not null,
  TERMSTARTTSEQ    NUMBER(5) not null,
  TERMENDTSEQ      NUMBER(5) not null,
  TERMBTCHDATE     DATE not null,
  SALESCOUNT       NUMBER(5) not null,
  SALESAMT         FLOAT not null,
  REFUNDCOUNT      NUMBER(5) not null,
  REFUNDAMT        FLOAT not null,
  UPLD_SALESCOUNT  NUMBER(5) not null,
  UPLD_SALESAMT    FLOAT not null,
  UPLD_REFUNDCOUNT NUMBER(5) not null,
  UPLD_REFUNDAMT   FLOAT not null,
  CLOSED           NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONREC_C_T on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONREC (CTXDATE, TERMPOS_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONREC_T_C on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONREC (TERMPOS_ID, CLOSED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONREC_T_T on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONREC (TERMPOS_ID, TERMBTCHNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSNONRECALOG
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECALOG
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  POSNONRECLOG_ID NUMBER(20) not null,
  RECSEQ          NUMBER(5) not null,
  RECTYPE         VARCHAR2(6) not null,
  RECVER          NUMBER(5) not null,
  RECDATA         CLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSNONRECALOG on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECALOG (POSNONRECLOG_ID, RECSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSNONRECLOG
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(20) not null,
  STAN         NUMBER(10) not null,
  RRN          VARCHAR2(12) not null,
  TERMSEQ      NUMBER(5) not null,
  ROUTE_IID    VARCHAR2(11) not null,
  CRDSEQNO     NUMBER(5) not null,
  PAN          VARCHAR2(19) not null,
  DATEEXP      CHAR(4) not null,
  SVCCODE      NUMBER(5) not null,
  CRDACPTLOC   VARCHAR2(64) not null,
  CRDACPTBUS   NUMBER(5) not null,
  CRDACPTID    VARCHAR2(15) not null,
  TERMCODE     VARCHAR2(16) not null,
  POSCHIC      CHAR(1) not null,
  POSCHAC      CHAR(1) not null,
  POSCRC       CHAR(1) not null,
  POSOE        CHAR(1) not null,
  POSCHP       CHAR(1) not null,
  POSCP        CHAR(1) not null,
  POSCDIM      CHAR(1) not null,
  POSCHAM      CHAR(1) not null,
  POSCHA       CHAR(1) not null,
  POSCHAD      CHAR(1) not null,
  POSSD        CHAR(1) not null,
  POSPCC       CHAR(1) not null,
  POSCC_89     NUMBER(5) not null,
  AIID         VARCHAR2(11) not null,
  ACQCOUNTRY   CHAR(3) not null,
  DATEXMIT     DATE not null,
  TIMEXMIT     NUMBER(10) not null,
  DATELOCAL    DATE not null,
  TIMELOCAL    NUMBER(10) not null,
  MSGCLS       CHAR(1) not null,
  MSGFN        CHAR(1) not null,
  TXNSRC       CHAR(1) not null,
  FNCODE       NUMBER(5) not null,
  TXNCODE      NUMBER(5) not null,
  CURTXN       CHAR(3) not null,
  AMTTXN       FLOAT not null,
  AMTTXNORG    FLOAT not null,
  ACTYPE1      NUMBER(5) not null,
  ACTYPE2      NUMBER(5) not null,
  ACTIONCODE   CHAR(1) not null,
  RSPCODE      CHAR(2) not null,
  REASONCODE   NUMBER(5) not null,
  APRVLCODE    VARCHAR2(9) not null,
  INBTCHID     NUMBER(10) not null,
  CTXDATE      DATE not null,
  AFE          VARCHAR2(8) not null,
  IFE          VARCHAR2(8) not null,
  LOANPERIOD   NUMBER(5) not null,
  SETPERIOD    NUMBER(5) not null,
  TERMPOS_ID   NUMBER(10) default 0 not null,
  TERMBTCHNO   NUMBER(10) not null,
  TERMBTCHDATE DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSNONRECLOG on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG (TERMPOS_ID, TERMBTCHNO, TERMBTCHDATE, TERMSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONRECLOG_AIID on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG (AIID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONRECLOG_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG (PAN, CRDSEQNO, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSNONRECLOG_TSTAN on OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG (AIID, CRDACPTID, TERMCODE, DATELOCAL, TERMSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSPREAUTH
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSPREAUTH
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  CRDACPTID   VARCHAR2(15) not null,
  PAN         VARCHAR2(19) not null,
  RRN         VARCHAR2(12) not null,
  APRVLCODE   VARCHAR2(9) not null,
  DATELOCAL   DATE not null,
  EXPDATE     DATE not null,
  AMTTXN      FLOAT not null,
  AUTH_TLOGID NUMBER(20) default 0 not null,
  FIN_TLOGID  NUMBER(20) default 0 not null,
  REV_TLOGID  NUMBER(20) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSPREAUTH on OPS$YUFU_CHINA_PS_RUN_BAK.POSPREAUTH (INST_ID, CRDACPTID, PAN, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_POSPREAUTH_APRVLCODE on OPS$YUFU_CHINA_PS_RUN_BAK.POSPREAUTH (INST_ID, PAN, CRDACPTID, APRVLCODE, EXPDATE DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSSCHED
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSSCHED
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  SCHEDTYPE  NUMBER(5) not null,
  SENDNOW    NUMBER(5) not null,
  SCHEDDATE  DATE not null,
  SCHEDTIME  NUMBER(10) not null,
  NBRTYPE    NUMBER(5) not null,
  TELNBR     VARCHAR2(24) not null,
  DATEXMIT   DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  TIMEXMIT   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_POSSCHED on OPS$YUFU_CHINA_PS_RUN_BAK.POSSCHED (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_POSSCHED_TERM on OPS$YUFU_CHINA_PS_RUN_BAK.POSSCHED (TERMPOS_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table POSTING_INFO
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.POSTING_INFO
(
  TRANDATE         VARCHAR2(8) not null,
  TLOG_ID          NUMBER(10) not null,
  ACCDET1_ID       NUMBER(10) not null,
  ACCNO            VARCHAR2(28) not null,
  CURRCODE         CHAR(3) not null,
  BLKAMT_FLAG      CHAR(1) not null,
  BLKAMT           FLOAT not null,
  AVLBAL_FLAG      CHAR(1) not null,
  AVLBAL           FLOAT not null,
  UNCLRCREDET_FLAG CHAR(1) not null,
  UNCLRCREDET      FLOAT not null,
  RSPCODE          CHAR(1) not null,
  RSPDESC          VARCHAR2(128) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table PREAUTHBLK
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PREAUTHBLK
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  CRDDET_ID       NUMBER(10) not null,
  PAN             VARCHAR2(19) not null,
  SEQNO           NUMBER(5) not null,
  EXPDATE         DATE not null,
  ATC1            NUMBER(10) not null,
  LOCALDATE1      DATE not null,
  ATC2            NUMBER(10) not null,
  LOCALDATE2      DATE not null,
  PREAUTH_GRANTED FLOAT not null,
  PREAUTH_SPENT   FLOAT not null,
  PREAUTH_UNCLR   FLOAT not null,
  NCLEARED        NUMBER(10) not null,
  BLK_EXPDATE     DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PREAUTHBLK on OPS$YUFU_CHINA_PS_RUN_BAK.PREAUTHBLK (PAN, SEQNO, EXPDATE, ATC2, ATC1)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PREAUTHBLK_ARCHIVE_ZAP on OPS$YUFU_CHINA_PS_RUN_BAK.PREAUTHBLK (BLK_EXPDATE, PREAUTH_UNCLR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PREGENPIN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  INST_ID       NUMBER(10) default 0 not null,
  REFNO         VARCHAR2(12) not null,
  BRANCH_ID     NUMBER(10) default 0 not null,
  DATE_CREATED  DATE not null,
  CREATED_BY    VARCHAR2(15) not null,
  DATE_LINKED   DATE not null,
  LINKED_BY     VARCHAR2(15) not null,
  VALIDITY_DAYS NUMBER(10) not null,
  EXPDATE       DATE not null,
  STATUS        NUMBER(5) default 0 not null,
  PINBLK        VARCHAR2(16) not null,
  CRDBTCH       NUMBER(10) not null,
  USRDATA1      VARCHAR2(12) not null,
  CRDDET_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PREGENPIN on OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN (INST_ID, REFNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PREGENPIN_CRDBTCH on OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN (CRDBTCH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PREGENPIN_EXPDATE on OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN (EXPDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PREGENPIN_ID_CRDDET on OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN (CRDDET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PREGENPIN_STATUS on OPS$YUFU_CHINA_PS_RUN_BAK.PREGENPIN (STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_CFGNM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CFGNM
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  PRT_PARTY_ID    NUMBER(10) not null,
  PRM_STRUCTNM_ID NUMBER(10) not null,
  PRM_CONTEXT_ID  NUMBER(5) not null,
  SHORT_DESCR     VARCHAR2(20 CHAR) not null,
  DESCR           VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_CFG_ENTITY
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CFG_ENTITY
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ENTITY_TYPE_ID  NUMBER(5) not null,
  ENTITY_ID       NUMBER(10) not null,
  PRM_CFGNM_ID    NUMBER(10) not null,
  PRT_PARTY_ID    NUMBER(10) not null,
  PRM_STRUCTNM_ID NUMBER(10) not null,
  PRM_CONTEXT_ID  NUMBER(5) not null,
  FROM_DATE       TIMESTAMP(0) not null,
  UNTIL_DATE      TIMESTAMP(0)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PRM_CFG_ENTITY_CFGNM on OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CFG_ENTITY (PRM_CFGNM_ID, FROM_DATE DESC, UNTIL_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PRM_CFG_ENTITY_ENTITY on OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CFG_ENTITY (ENTITY_TYPE_ID, ENTITY_ID, FROM_DATE DESC, UNTIL_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_CONTEXT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CONTEXT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CONTEXT
  add constraint UNQ_PRM_CONTEXT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_DEF
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEF
(
  VERNO_CTX             NUMBER(10) default 1 not null,
  ID                    NUMBER(10) not null,
  PRM_DEFT_ID           NUMBER(5) not null,
  PRM_VALT_ID           NUMBER(5) not null,
  PRM_SIZE_OR_PRECISION NUMBER(5),
  PRM_SCALE_OF_NUMBER   NUMBER(5),
  SHORT_NAME            VARCHAR2(20 CHAR) not null,
  DESCR                 VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEF
  add constraint UNQ_PRM_DEF unique (SHORT_NAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_DEFP
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEFP
(
  PRM_CONTEXT_ID NUMBER(5) not null,
  PRM_DEF_ID     NUMBER(10) not null,
  PRM_DEFT_ID    NUMBER(5) not null,
  PRM_VALT_ID    NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_DEFR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEFR
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  PRM_RULET_ID    NUMBER(5) not null,
  PRM_DEF_ID      NUMBER(10) not null,
  PRM_DEFT_ID     NUMBER(5) not null,
  PRM_VALT_ID     NUMBER(5) not null,
  LONG_VALUE      NUMBER(20),
  DOUBLE_VALUE    FLOAT,
  DATE_TIME_VALUE TIMESTAMP(0),
  STRING_VALUE    VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_DEFT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEFT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEFT
  add constraint UNQ_PRM_DEFT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_DFLTVAL
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DFLTVAL
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  PRM_CFGNM_ID       NUMBER(10) not null,
  PRT_PARTY_ID       NUMBER(10) not null,
  PRM_STRUCTNM_ID    NUMBER(10) not null,
  PRM_CONTEXT_ID     NUMBER(5) not null,
  PRM_ELEM_ID        NUMBER(10) not null,
  PRM_ELEM_FROM_DATE TIMESTAMP(0) not null,
  FROM_DATE          TIMESTAMP(0) not null,
  UNTIL_DATE         TIMESTAMP(0),
  LONG_VALUE         NUMBER(10),
  DOUBLE_VALUE       FLOAT,
  DATE_TIME_VALUE    TIMESTAMP(0),
  STRING_VALUE       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DFLTVAL
  add constraint UNQ_PRM_DFLTVAL unique (PRM_CFGNM_ID, PRT_PARTY_ID, PRM_CONTEXT_ID, PRM_STRUCTNM_ID, PRM_ELEM_ID, PRM_ELEM_FROM_DATE, FROM_DATE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_ELEM
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEM
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  ID               NUMBER(10) not null,
  PRT_PARTY_ID     NUMBER(10) not null,
  PRM_DEF_ID_FROM  NUMBER(10) not null,
  PRM_DEFT_ID_FROM NUMBER(5) not null,
  PRM_VALT_ID_FROM NUMBER(5) not null,
  PRM_DEF_ID_TO    NUMBER(10),
  PRM_DEFT_ID_TO   NUMBER(5),
  PRM_VALT_ID_TO   NUMBER(5),
  PRM_STRUCTNM_ID  NUMBER(10) not null,
  PRM_CONTEXT_ID   NUMBER(5) not null,
  FROM_DATE        TIMESTAMP(0) not null,
  UNTIL_DATE       TIMESTAMP(0),
  ELEM_ORDER       NUMBER(5) default 1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_ELEMR
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEMR
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  PRM_RULET_ID       NUMBER(5) not null,
  PRM_ELEM_ID        NUMBER(10) not null,
  PRM_ELEM_FROM_DATE TIMESTAMP(0) not null,
  LONG_VALUE         NUMBER(10),
  DOUBLE_VALUE       FLOAT,
  DATE_TIME_VALUE    TIMESTAMP(0),
  STRING_VALUE       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_ELEMS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEMS
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  PRM_ELEM_ID        NUMBER(10) not null,
  PRM_ELEM_FROM_DATE TIMESTAMP(0) not null,
  PRM_ELEMST_ID      NUMBER(5) not null,
  FROM_DATE          TIMESTAMP(0) not null,
  UNTIL_DATE         TIMESTAMP(0)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_ELEMST
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEMST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEMST
  add constraint UNQ_PRM_ELEMST unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_ENTITY
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ENTITY
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  ENTITY_TYPE_ID  NUMBER(5) not null,
  ENTITY_ID       NUMBER(10) not null,
  PRM_CFGNM_ID    NUMBER(10) not null,
  PRT_PARTY_ID    NUMBER(10) not null,
  PRM_STRUCTNM_ID NUMBER(10) not null,
  PRM_CONTEXT_ID  NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ENTITY
  add constraint UNQ_PRM_ENTITY unique (ENTITY_TYPE_ID, ENTITY_ID, PRM_CFGNM_ID, PRT_PARTY_ID, PRM_CONTEXT_ID, PRM_STRUCTNM_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_RULET
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_RULET
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_RULET
  add constraint UNQ_PRM_RULET unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_STRUCTNM
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_STRUCTNM
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ID             NUMBER(10) not null,
  PRT_PARTY_ID   NUMBER(10) not null,
  PRM_CONTEXT_ID NUMBER(5) not null,
  SHORT_DESCR    VARCHAR2(20 CHAR) not null,
  DESCR          VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_STRUCTNM
  add constraint UNQ_PRM_STRUCTNM unique (PRT_PARTY_ID, PRM_CONTEXT_ID, SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_VALS
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALS
(
  VERNO_CTX           NUMBER(10) default 1 not null,
  ID                  NUMBER(10) not null,
  PRM_VALUE_ID        NUMBER(10) not null,
  PRM_VALUE_FROM_DATE TIMESTAMP(0) not null,
  PRM_VALST_ID        NUMBER(5) not null,
  FROM_DATE           TIMESTAMP(0) not null,
  UNTIL_DATE          TIMESTAMP(0)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PRM_VALS on OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALS (PRM_VALUE_ID, PRM_VALUE_FROM_DATE, PRM_VALST_ID, FROM_DATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRM_VALST
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALST
  add constraint UNQ_PRM_VALST unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_VALT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALT
  add constraint UNQ_PRM_VALT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRM_VALUE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALUE
(
  VERNO_CTX             NUMBER(10) default 1 not null,
  ID                    NUMBER(10) not null,
  PRM_DFLTVAL_ID        NUMBER(10) not null,
  PRM_DFLTVAL_FROM_DATE TIMESTAMP(0) not null,
  PRM_ENTITY_ID         NUMBER(10) not null,
  FROM_DATE             TIMESTAMP(0) not null,
  UNTIL_DATE            TIMESTAMP(0),
  LONG_VALUE            NUMBER(10),
  DOUBLE_VALUE          FLOAT,
  DATE_TIME_VALUE       TIMESTAMP(0),
  STRING_VALUE          VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRNTTXNLOG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRNTTXNLOG
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  CTXDATE   DATE not null,
  ACC_ID    NUMBER(10) default 0 not null,
  AMTBILL   FLOAT not null,
  TLOGID    NUMBER(20) not null,
  PROCESSED NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_PRNTTXNLOG on OPS$YUFU_CHINA_PS_RUN_BAK.PRNTTXNLOG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PRNTTXNLOG_CTXDATE_PROCD on OPS$YUFU_CHINA_PS_RUN_BAK.PRNTTXNLOG (CTXDATE, PROCESSED)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRTSEL
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRTSEL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  CTXFORM   VARCHAR2(12) not null,
  CMD       VARCHAR2(32) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRT_CM
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  PRT_CMT_ID NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_CML
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CML
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  PRT_CM_ID_FROM  NUMBER(10) not null,
  PRT_CMT_ID_FROM NUMBER(5) not null,
  PRT_CM_ID_TO    NUMBER(10) not null,
  PRT_CMT_ID_TO   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table PRT_CMPT
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CMPT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CMPT
  add constraint UNQ_PRT_CMPT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_CMT
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CMT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CMT
  add constraint UNQ_PRT_CMT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_CM_E_ADDR
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_E_ADDR
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  PRT_CM_ID          NUMBER(10) not null,
  PRT_CMT_ID         NUMBER(5) not null,
  ELECTRONIC_ADDRESS VARCHAR2(100 CHAR) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_E_ADDR
  add constraint UNQ_PRT_CM_E_ADDR unique (ELECTRONIC_ADDRESS)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PRT_CM_E_ADDR_MORE on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_E_ADDR (UPPER(ELECTRONIC_ADDRESS))
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_CM_P_ADDR
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_P_ADDR
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  PRT_CM_ID       NUMBER(10) not null,
  PRT_CMT_ID      NUMBER(5) not null,
  COUNTRY_ISOCODE CHAR(3) not null,
  POSTAL_CODE     VARCHAR2(10 CHAR) not null,
  CITY            VARCHAR2(40 CHAR) not null,
  ADDRESS_1       VARCHAR2(40 CHAR) not null,
  ADDRESS_2       VARCHAR2(40 CHAR),
  ADDRESS_3       VARCHAR2(40 CHAR),
  ADDRESS_4       VARCHAR2(40 CHAR),
  ADDRESS_5       VARCHAR2(40 CHAR),
  DIRECTIONS      VARCHAR2(255 CHAR),
  PROVINCE        VARCHAR2(40 CHAR),
  CTXTERRITORY    VARCHAR2(40 CHAR),
  CTXSTATE        VARCHAR2(40 CHAR),
  COUNTY          VARCHAR2(40 CHAR),
  REGION          VARCHAR2(40 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_P_ADDR
  add constraint UNQ_PRT_CM_P_ADDR unique (COUNTRY_ISOCODE, POSTAL_CODE, ADDRESS_1, CITY, ADDRESS_2, ADDRESS_3, ADDRESS_4, ADDRESS_5, PROVINCE, CTXTERRITORY, CTXSTATE, COUNTY, REGION)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PRT_CM_P_ADDR_MORE on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_P_ADDR (COUNTRY_ISOCODE, UPPER(POSTAL_CODE), UPPER(ADDRESS_1), UPPER(CITY), UPPER(ADDRESS_2), UPPER(ADDRESS_3), UPPER(ADDRESS_4), UPPER(ADDRESS_5), UPPER(PROVINCE), UPPER(CTXTERRITORY), UPPER(CTXSTATE), UPPER(COUNTY), UPPER(REGION))
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_CM_TELCO_NO
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_TELCO_NO
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  PRT_CM_ID      NUMBER(10) not null,
  PRT_CMT_ID     NUMBER(5) not null,
  AREA_CODE      VARCHAR2(10 CHAR),
  CONTACT_NO     VARCHAR2(13 CHAR) not null,
  COUNTRY_PREFIX VARCHAR2(3 CHAR),
  EXTENSION_NO   VARCHAR2(10 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_TELCO_NO
  add constraint UNQ_PRT_CM_TELCO_NO unique (CONTACT_NO, AREA_CODE, COUNTRY_PREFIX, EXTENSION_NO)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PARTY
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PARTY
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PCM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCM
(
  VERNO_CTX            NUMBER(10) default 1 not null,
  PRT_PARTY_ID         NUMBER(10) not null,
  PRT_CM_ID            NUMBER(10) not null,
  PRT_CMT_ID           NUMBER(5) not null,
  PRT_PRT_ID           NUMBER(5) not null,
  FROM_DATE            DATE not null,
  UNTIL_DATE           DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  NON_SOLICITATION_IND CHAR(1) default '0' not null,
  CTXCOMMENT           VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PRT_PCM on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCM (FROM_DATE DESC, PRT_PARTY_ID, PRT_PRT_ID, PRT_CM_ID, PRT_CMT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PCMP
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  PRT_CMPT_ID       NUMBER(5) not null,
  PRT_PARTY_ID      NUMBER(10) not null,
  PRT_CM_ID         NUMBER(10) not null,
  PRT_CMT_ID        NUMBER(5) not null,
  PRT_PRT_ID        NUMBER(5) not null,
  PRT_PCM_FROM_DATE DATE not null,
  FROM_DATE         DATE not null,
  UNTIL_DATE        DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  USAGE_TYPE_ID     NUMBER(5) default 999 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PRT_PCMP on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP (PRT_CMPT_ID, FROM_DATE DESC, PRT_PCM_FROM_DATE DESC, PRT_PARTY_ID, PRT_PRT_ID, PRT_CM_ID, PRT_CMT_ID, USAGE_TYPE_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PCMP_MEDIA
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP_MEDIA
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  MEDIATYPE_ID       NUMBER(5) not null,
  MEDIA_ID           NUMBER(10) not null,
  PRT_CMPT_ID        NUMBER(5) not null,
  PRT_PARTY_ID       NUMBER(10) not null,
  PRT_CM_ID          NUMBER(10) not null,
  PRT_CMT_ID         NUMBER(5) not null,
  PRT_PRT_ID         NUMBER(5) not null,
  PRT_PCM_FROM_DATE  DATE not null,
  PRT_PCMP_FROM_DATE DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PRT_PCMP_MEDIA_ID on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP_MEDIA (MEDIATYPE_ID, MEDIA_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_PRT_PCMP_MEDIA_PRT_PCMP_ID on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP_MEDIA (PRT_CMPT_ID, PRT_PCMP_FROM_DATE, PRT_PCM_FROM_DATE DESC, PRT_PARTY_ID, PRT_PRT_ID, PRT_CM_ID, PRT_CMT_ID, MEDIATYPE_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_PRT_PCMP_MEDIA on OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PCMP_MEDIA (MEDIATYPE_ID, MEDIA_ID, PRT_CMPT_ID, PRT_PCMP_FROM_DATE DESC, PRT_PCM_FROM_DATE DESC, PRT_PARTY_ID, PRT_PRT_ID, PRT_CM_ID, PRT_CMT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PERSON
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PERSON
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  PRT_PARTY_ID NUMBER(10) not null,
  CUSTDET_ID   NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PERSON
  add constraint UNQ_PRT_PERSON_CUSTDET_ID unique (CUSTDET_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PRT_PRT
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PRT
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(20 CHAR) not null,
  DESCR       VARCHAR2(127 CHAR)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PRT
  add constraint UNQ_PRT_PRT unique (SHORT_DESCR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table PWDHIST
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.PWDHIST
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  PASSWORD   VARCHAR2(15) not null,
  PWDCHGDATE DATE not null,
  PWDCHGTIME NUMBER(10) not null,
  USR        VARCHAR2(15) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table QDATA
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.QDATA
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  QNAME      VARCHAR2(15) not null,
  SEND       NUMBER(5) not null,
  ATTEMPTS   NUMBER(5) not null,
  DT_AVAIL   CHAR(14) not null,
  CTXDATE    DATE not null,
  STATUS     CHAR(1) not null,
  CORRID     VARCHAR2(32) not null,
  STRING1    VARCHAR2(255) not null,
  STRING2    VARCHAR2(255) not null,
  STRING3    VARCHAR2(255) not null,
  QDATA      BLOB,
  DATE_LOCAL DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_QDATA on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_QDATA_CORRID on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (QNAME, CORRID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_QDATA_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (CTXDATE, QNAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_QDATA_DEQUEUE on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (QNAME, SEND, DT_AVAIL, ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_QDATA_STATUS on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (QNAME, STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.QDATA_DATE_LOCAL on OPS$YUFU_CHINA_PS_RUN_BAK.QDATA (DATE_LOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table QINFO
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.QINFO
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ID             NUMBER(10) not null,
  QNAME          VARCHAR2(15) not null,
  QORDER         NUMBER(5) not null,
  QTYPE          NUMBER(5) not null,
  MAXTRIES       NUMBER(5) not null,
  DQVELOCITY     NUMBER(10) not null,
  DQACCEL        NUMBER(10) not null,
  DQJERK         NUMBER(10) not null,
  DQJAB          NUMBER(10) not null,
  ACTIVE         NUMBER(5) not null,
  DEL_SENT       NUMBER(5) not null,
  DEL_EXPIRED    NUMBER(5) not null,
  SYSDATECHG_EXP NUMBER(5) not null,
  SVCNAME        VARCHAR2(15) not null,
  MAXRATE        NUMBER(5) not null,
  USE_QDATA      NUMBER(5) not null,
  USE_SYSDATEFB  NUMBER(5) not null,
  USE_SYSDATECTX NUMBER(5) not null,
  HOSTNAME       VARCHAR2(4) not null,
  STRING1_FB     VARCHAR2(30) not null,
  STRING2_FB     VARCHAR2(30) not null,
  STRING3_FB     VARCHAR2(30) not null,
  CORRID_FB      VARCHAR2(30) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.QINFO
  add constraint UNQ_QINFO_QNAME unique (QNAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_QINFO on OPS$YUFU_CHINA_PS_RUN_BAK.QINFO (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table QUICKPAY
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.QUICKPAY
(
  CARDNO   VARCHAR2(19) not null,
  CELLPHNO VARCHAR2(19),
  IDTYPE   CHAR(2),
  IDNO     VARCHAR2(20),
  OPENSG   CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_QUICKPAY on OPS$YUFU_CHINA_PS_RUN_BAK.QUICKPAY (CARDNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RECHARGERECORD
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RECHARGERECORD
(
  RRID                 NUMBER(8) not null,
  CARDNUMBER           VARCHAR2(20),
  RECHARGEDATE         VARCHAR2(20) default to_char(sysdate,'yyyyMMddhh24miss'),
  RECHARGEMONEY        NUMBER(10,2),
  RECHARGETYPE         VARCHAR2(20),
  SUBACCORECHARGEMONEY NUMBER(10,2),
  SUBACCOREMONEY       NUMBER(10,2),
  RECHARGEPERSON       VARCHAR2(10),
  AUDITINGPERSON       VARCHAR2(10),
  TRANSACTIONTYPE      VARCHAR2(10),
  AUDITINGTIME         VARCHAR2(20),
  DATASOURCEID         NUMBER,
  TRANSACTIONSIGN      VARCHAR2(10),
  RECHARGEKINDS        VARCHAR2(10),
  RECHARGEEDMONEY      NUMBER(10,2),
  CUSTOMSIGN           VARCHAR2(2)
)
tablespace CORTEXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.RECHARGERECORD
  add primary key (RRID)
  using index 
  tablespace CORTEXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REC_ERROR
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REC_ERROR
(
  TABLE_NAME     VARCHAR2(40) not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ERRDESC        VARCHAR2(1024) not null,
  ERRCODE        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REDEEMBAL
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REDEEMBAL
(
  VERNO_CTX          NUMBER(10) default 0 not null,
  ID                 NUMBER(10) default 0 not null,
  TXNCODE            NUMBER(5) default 0 not null,
  TXTIME             VARCHAR2(20) default '' not null,
  STAN               NUMBER(7) default 0 not null,
  PAN                VARCHAR2(19) default '0' not null,
  AMT                FLOAT default 0.00 not null,
  FATHER_ORDER       VARCHAR2(40) not null,
  CHILDREN_ORDER     VARCHAR2(40) not null,
  ACCT_PERIOD        VARCHAR2(20) not null,
  SALES_POINT        VARCHAR2(128) default '' not null,
  AREA               VARCHAR2(128) default '' not null,
  ID_TYPE            VARCHAR2(2) default '0' not null,
  ID_NUMBER          VARCHAR2(20) default '' not null,
  CELL_PHONE         VARCHAR2(20) default '' not null,
  PHONE              VARCHAR2(20) default '' not null,
  RB_TYPE            NUMBER(5) not null,
  BANK_NAME          VARCHAR2(128) default '' not null,
  BRANCH_NAME        VARCHAR2(128) default '' not null,
  BANK_PAN           VARCHAR2(21) default '' not null,
  CARD_ACCEPTOR_NAME VARCHAR2(64) default '' not null,
  CARD_ACCEPTOR_ID   VARCHAR2(64) default '' not null,
  INTEREST           FLOAT default 0.00 not null,
  FEE                FLOAT default 0 not null,
  ISPAID             NUMBER(5) default 0 not null,
  SUMMARY            VARCHAR2(128) default '' not null,
  OPERATOR           VARCHAR2(128) default '' not null,
  MRCHT_ID           VARCHAR2(15) default '0' not null,
  BATCH_STAT         VARCHAR2(2) default '00' not null,
  DESCR              VARCHAR2(255) default '' not null,
  CURTXN             CHAR(3) default '156',
  AMTTXN             FLOAT default 0,
  RATESET            FLOAT default 0,
  CURRBILL           CHAR(3) default '156',
  CRDPRODUCT         VARCHAR2(4) default ' '
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.REDEEMBAL
  add constraint PK_REDEEMBAL primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.REDEEMBAL
  add constraint HASH_REDEEMBAL unique (PAN, FATHER_ORDER, CHILDREN_ORDER)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REDEEMBAL_CUSTOM
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REDEEMBAL_CUSTOM
(
  PAN            VARCHAR2(19) default '0' not null,
  AMT            FLOAT default 0.00 not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  INTEREST       FLOAT default 0.00 not null,
  FEE            FLOAT default 0 not null,
  ISPAID         NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REDEEM_ERROR
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REDEEM_ERROR
(
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ACCT_PERIOD    VARCHAR2(20) not null,
  ERRDESC        VARCHAR2(1024) not null,
  ERRCODE        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REFUND_INFO
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REFUND_INFO
(
  VERNO_CTX       NUMBER(10) default 0 not null,
  ID              NUMBER(10) default 0 not null,
  TLOGID          NUMBER(10) default 0 not null,
  RRN             VARCHAR2(12) not null,
  AMTTXN          FLOAT not null,
  REMAIN_AMT      FLOAT not null,
  BLACK_AMT       FLOAT not null,
  CLEAR_AMT       FLOAT not null,
  ADD_DATA_TXN    VARCHAR2(255) not null,
  ADD_DATA_REMAIN VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_REFUND_INFO on OPS$YUFU_CHINA_PS_RUN_BAK.REFUND_INFO (TLOGID, RRN, AMTTXN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REJIMPTXN
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REJIMPTXN
(
  VERNO_CTX NUMBER(10) default 1 not null,
  FILETYPE  NUMBER(5) not null,
  FILE_ID   VARCHAR2(32) not null,
  BATCH     NUMBER(10) not null,
  MSG_NO    NUMBER(10) not null,
  PAN       VARCHAR2(19) default ' ' not null,
  SEQNO     NUMBER(5) default 0 not null,
  AMTSET    FLOAT default 0 not null,
  CURSET    CHAR(3) default '   ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_REJIMPTXN on OPS$YUFU_CHINA_PS_RUN_BAK.REJIMPTXN (FILETYPE, FILE_ID, BATCH, MSG_NO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RENEWCRD
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RENEWCRD
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TXNCODE        NUMBER(5) default '' not null,
  TXTIME         VARCHAR2(20) default '' not null,
  STAN           NUMBER(7) default 0 not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) default '' not null,
  PAN            VARCHAR2(19) not null,
  NEW_PAN        VARCHAR2(19) default '' not null,
  FEE            FLOAT default 0 not null,
  OPERATOR       VARCHAR2(128) default '' not null,
  MRCHT_ID       VARCHAR2(15) default '' not null,
  STAT           VARCHAR2(2) default '00' not null,
  RESERVED1      VARCHAR2(128) default '' not null,
  RESERVED2      VARCHAR2(128) default '' not null,
  RESERVED3      VARCHAR2(128) default '' not null,
  ACCT_PERIOD    VARCHAR2(20) default '00000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RENEWCRD on OPS$YUFU_CHINA_PS_RUN_BAK.RENEWCRD (PAN, FATHER_ORDER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RENEWCRD_CUSTOM
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RENEWCRD_CUSTOM
(
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) default '' not null,
  PAN            VARCHAR2(19) not null,
  FEE            FLOAT default 0 not null,
  ACCT_PERIOD    VARCHAR2(20) default '00000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table REPORT_DOWNLOAD_CFG
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.REPORT_DOWNLOAD_CFG
(
  TYPE_ID      VARCHAR2(15) not null,
  DESCRIPTION  VARCHAR2(100) not null,
  PATH_MASK    VARCHAR2(100) not null,
  PROCESS_NAME VARCHAR2(25) not null,
  MIME_TYPE    VARCHAR2(25) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RE_ATTR
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RE_ATTR
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  RE_CONTEXT_ID NUMBER(10) not null,
  REFERENCE_ID  NUMBER(10) not null,
  IDX           NUMBER(5) not null,
  POS_FROM      NUMBER(5) not null,
  POS_TO        NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RE_ATTR on OPS$YUFU_CHINA_PS_RUN_BAK.RE_ATTR (RE_CONTEXT_ID, REFERENCE_ID, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RE_CONTEXT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RE_CONTEXT
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  RE_CONTEXT_TYPE_ID NUMBER(10) not null,
  SHORT_DESCR        VARCHAR2(20) not null,
  DESCR              VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RE_CONTEXT on OPS$YUFU_CHINA_PS_RUN_BAK.RE_CONTEXT (SHORT_DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RE_CONTEXT_TYPE
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RE_CONTEXT_TYPE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  SHORT_DESCR VARCHAR2(20) not null,
  DESCR       VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RE_CONTEXT_TYPE on OPS$YUFU_CHINA_PS_RUN_BAK.RE_CONTEXT_TYPE (SHORT_DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RE_EXPR
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RE_EXPR
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  RE_ATTR_ID NUMBER(10) not null,
  IDX        NUMBER(5) not null,
  EXPR       VARCHAR2(255) not null,
  NEGATIVE   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RE_EXPR on OPS$YUFU_CHINA_PS_RUN_BAK.RE_EXPR (RE_ATTR_ID, IDX)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RISKPROFILE
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RISKPROFILE
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ID             NUMBER(10) not null,
  RISK_PROF_CODE VARCHAR2(8) not null,
  DESCR          VARCHAR2(128) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RISKPROFILE on OPS$YUFU_CHINA_PS_RUN_BAK.RISKPROFILE (RISK_PROF_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RSAKEY
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RSAKEY
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  INST_ID   NUMBER(10) default 0 not null,
  KEYSRC    VARCHAR2(5) not null,
  REFCODE   VARCHAR2(255) not null,
  KEYINDEX  NUMBER(5) not null,
  KEYTYPE   VARCHAR2(2) not null,
  KEYACCESS CHAR(1) not null,
  KEYVALUE  CLOB not null,
  KEYLENGTH NUMBER(5) not null,
  MAC       VARCHAR2(8) not null,
  KEYSTATUS NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RSAKEY on OPS$YUFU_CHINA_PS_RUN_BAK.RSAKEY (INST_ID, KEYSRC, REFCODE, KEYINDEX, KEYTYPE, KEYACCESS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RSASIG
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RSASIG
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  RSAKEY_ID_SUBJECT NUMBER(10) not null,
  RSAKEY_ID_VER     NUMBER(10) not null,
  BODY              CLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RSASIG on OPS$YUFU_CHINA_PS_RUN_BAK.RSASIG (RSAKEY_ID_SUBJECT, RSAKEY_ID_VER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_RSASIG_VERSUBJ on OPS$YUFU_CHINA_PS_RUN_BAK.RSASIG (RSAKEY_ID_VER, RSAKEY_ID_SUBJECT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RULE_ATOM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_ATOM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  ATOMCODE    VARCHAR2(32) not null,
  ATOM        VARCHAR2(255) not null,
  DESCR       VARCHAR2(80) not null,
  ATOMTYPE    NUMBER(5) default 1 not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_ATOM on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_ATOM (ATOMCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_ATOM_HIST
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_ATOM_HIST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ATOM_ID     NUMBER(10) not null,
  TIMECHG     TIMESTAMP(3) not null,
  ACTION      CHAR(1) not null,
  ATOM        VARCHAR2(255) not null,
  ATOMCODE    VARCHAR2(32) not null,
  ATOMTYPE    NUMBER(5) default 1 not null,
  DESCR       VARCHAR2(80) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_ATOM_HIST_TIMECHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_ATOM_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_CONTEXT
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_CONTEXT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  CONTEXTCODE   VARCHAR2(16) not null,
  TUXEDO_EVENT  VARCHAR2(128) not null,
  EVENT_PENDING NUMBER(5) default 0 not null,
  DESCR         VARCHAR2(80) not null,
  CONF_IND      NUMBER(5) default 0 not null,
  SCOPE_TYPE    NUMBER(5) default 0 not null,
  ACTIVITY_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_CONTEXT on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_CONTEXT (CONTEXTCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_CONTEXT_HIST
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_CONTEXT_HIST
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  CONTEXT_ID        NUMBER(10) not null,
  TIMECHG           TIMESTAMP(3) not null,
  ACTION            CHAR(1) not null,
  OLD_EVENT_PENDING NUMBER(5) not null,
  NEW_EVENT_PENDING NUMBER(5) not null,
  ACTIVITY_ID       NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_CONTEXT_HIST_TIMECHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_CONTEXT_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_DIMENSION
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMENSION
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  DIMLVL            NUMBER(5) not null,
  CONTEXT_ID        NUMBER(10) not null,
  SCOPEDET_ID       NUMBER(10) default 1 not null,
  DESCR             VARCHAR2(127) not null,
  DIMVALUE_LINKTYPE NUMBER(5) not null,
  ACTIVITY_ID       NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_DIMENSION on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMENSION (CONTEXT_ID, DIMLVL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_DIMLVLLINK
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  EVALSET_ID  NUMBER(10) not null,
  DIMVALUE_ID NUMBER(10) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK
  add constraint UNQ_RULE_DIMLVLLINK_EVAL unique (EVALSET_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RULE_DIMLVLLINK_HIST
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK_HIST
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  DIMLVLLINK_ID NUMBER(10) not null,
  TIMECHG       TIMESTAMP(3) not null,
  ACTION        CHAR(1) not null,
  EVALSET_ID    NUMBER(10) not null,
  DIMVALUE_ID   NUMBER(10) not null,
  ACTIVITY_ID   NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_DIMLVLLINK_HIST_DIMTM on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK_HIST (DIMVALUE_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_DIMLVLLINK_HIST_ELTM on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK_HIST (EVALSET_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_DIMLVLLINK_HIST_TCHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table RULE_DIMVALUE
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  DIMENSION_ID NUMBER(10) not null,
  INST_ID      NUMBER(10) default 0 not null,
  DIMVALUE     VARCHAR2(60) not null,
  DESCR        VARCHAR2(127) not null,
  ACTIVITY_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE
  add constraint UNQ_RULE_DIMVALUE unique (DIMENSION_ID, ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_DIMVALUE on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE (DIMENSION_ID, INST_ID, DIMVALUE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_DIMVALUE_HIST
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE_HIST
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  DIMVALUE_ID  NUMBER(10) not null,
  TIMECHG      TIMESTAMP(3) not null,
  ACTION       CHAR(1) not null,
  DIMENSION_ID NUMBER(10) not null,
  INST_ID      NUMBER(10) default 0 not null,
  DIMVALUE     VARCHAR2(60) not null,
  DESCR        VARCHAR2(127) not null,
  ACTIVITY_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_DIMVALUE_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE_HIST (DIMENSION_ID, INST_ID, DIMVALUE, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_DIMVALUE_HIST_TIMECHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_DIMVAL_SCOPEKEY
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  SCOPEDET_ID  NUMBER(10) not null,
  SCOPEKEY     VARCHAR2(60) not null,
  DIMENSION_ID NUMBER(10) not null,
  DIMVALUE_ID  NUMBER(10) not null,
  ACTIVITY_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_DIMVAL_SCOPEKEY on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY (SCOPEDET_ID, SCOPEKEY, DIMENSION_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_DIMVAL_SCOPEKEY_HIST
prompt ========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY_HIST
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  DIMVAL_SCOPEKEY_ID NUMBER(10) not null,
  TIMECHG            TIMESTAMP(3) not null,
  ACTION             CHAR(1) not null,
  DIMENSION_ID       NUMBER(10) not null,
  DIMVALUE_ID        NUMBER(10) not null,
  SCOPEDET_ID        NUMBER(10) not null,
  SCOPEKEY           VARCHAR2(60) not null,
  ACTIVITY_ID        NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_DIMVAL_SCOPEKEY_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY_HIST (SCOPEDET_ID, SCOPEKEY, DIMENSION_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_DIMVAL_SKEY_HIST_TG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALDIMLINK
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  EVALSET_ID  NUMBER(10) not null,
  DIMVALUE_ID NUMBER(10) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_EVALDIMLINK on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK (EVALSET_ID, DIMVALUE_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALDIMLINK_HIST
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK_HIST
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  EVALDIMLINK_ID NUMBER(10) not null,
  TIMECHG        TIMESTAMP(3) not null,
  ACTION         CHAR(1) not null,
  EVALSET_ID     NUMBER(10) not null,
  DIMVALUE_ID    NUMBER(10) not null,
  ACTIVITY_ID    NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_EVALDIMLINK_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK_HIST (EVALSET_ID, DIMVALUE_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_EVALDIMLINK_HIST_TCHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALRULELINK
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  RULE_ID     NUMBER(10) not null,
  EVALSET_ID  NUMBER(10) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_EVALRULELINK on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK (RULE_ID, EVALSET_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALRULELINK_HIST
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK_HIST
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  EVALRULELINK_ID NUMBER(10) not null,
  TIMECHG         TIMESTAMP(3) not null,
  ACTION          CHAR(1) not null,
  RULE_ID         NUMBER(10) not null,
  EVALSET_ID      NUMBER(10) not null,
  ACTIVITY_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_EVALRLNK_HIST_ELTM on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK_HIST (EVALSET_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_EVALRLNK_HIST_RTM on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK_HIST (RULE_ID, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_EVALRLNK_HIST_TCHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALSET
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  EVALCODE    VARCHAR2(32) not null,
  PRIORITY    NUMBER(5) default 1 not null,
  DESCR       VARCHAR2(127) not null,
  ENABLED     NUMBER(5) default 1 not null,
  EVALUATION  NUMBER(5) default 1 not null,
  RET_DATA0   VARCHAR2(255) not null,
  RET_DATA1   VARCHAR2(255) not null,
  RET_DATA2   VARCHAR2(255) not null,
  RET_DATA3   VARCHAR2(255) not null,
  RET_DATA4   VARCHAR2(255) not null,
  RET_DATA5   VARCHAR2(255) not null,
  RET_DATA6   VARCHAR2(255) not null,
  RET_DATA7   VARCHAR2(255) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_EVALSET on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET (INST_ID, EVALCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_EVALSET_HIST
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET_HIST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  EVALSET_ID  NUMBER(10) not null,
  TIMECHG     TIMESTAMP(3) not null,
  ACTION      CHAR(1) not null,
  INST_ID     NUMBER(10) default 0 not null,
  EVALCODE    VARCHAR2(32) not null,
  PRIORITY    NUMBER(5) default 1 not null,
  DESCR       VARCHAR2(127) not null,
  ENABLED     NUMBER(5) default 1 not null,
  EVALUATION  NUMBER(5) default 1 not null,
  RET_DATA0   VARCHAR2(255) not null,
  RET_DATA1   VARCHAR2(255) not null,
  RET_DATA2   VARCHAR2(255) not null,
  RET_DATA3   VARCHAR2(255) not null,
  RET_DATA4   VARCHAR2(255) not null,
  RET_DATA5   VARCHAR2(255) not null,
  RET_DATA6   VARCHAR2(255) not null,
  RET_DATA7   VARCHAR2(255) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_EVALSET_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET_HIST (INST_ID, EVALCODE, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_EVALSET_HIST_TIMECHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_RULE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  CONTEXT_ID  NUMBER(10) not null,
  ID          NUMBER(10) not null,
  INST_ID     NUMBER(10) default 0 not null,
  RULENAME    VARCHAR2(32) not null,
  RULEEXPR    CLOB not null,
  DESCR       VARCHAR2(80) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_RULE on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE (INST_ID, CONTEXT_ID, RULENAME)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RULE_RULE_HIST
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE_HIST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  CONTEXT_ID  NUMBER(10) not null,
  RULE_ID     NUMBER(10) not null,
  TIMECHG     TIMESTAMP(3) not null,
  ACTION      CHAR(1) not null,
  INST_ID     NUMBER(10) default 0 not null,
  RULENAME    VARCHAR2(32) not null,
  RULEEXPR    CLOB not null,
  DESCR       VARCHAR2(80) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 128K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_RULE_RULE_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE_HIST (INST_ID, CONTEXT_ID, RULENAME, TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_RULE_HIST_CONTEXTID on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE_HIST (CONTEXT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_RULE_RULE_HIST_TIMECHG on OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RU_BANKNUMACCOUNT_TEST
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RU_BANKNUMACCOUNT_TEST
(
  ID                   INTEGER,
  RUMONEYACCOUNT       VARCHAR2(50),
  RUNAMEINFO           VARCHAR2(200),
  RUBANKNUM            VARCHAR2(50),
  RUBANKNAME           VARCHAR2(60),
  LRUID                VARCHAR2(15),
  RUACCOUNTEDITTIME    VARCHAR2(8),
  RUACCOUNTNAME        VARCHAR2(50),
  RUREMARKS            VARCHAR2(50),
  RUNAMEJIANCHENG      VARCHAR2(200),
  RUACCOUNTEDITTIMETWO VARCHAR2(8)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RU_CUSTOM_TEST
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RU_CUSTOM_TEST
(
  LRUID             CHAR(15),
  SRU               VARCHAR2(200),
  SCONTACT          VARCHAR2(200),
  SPHONE            VARCHAR2(50),
  SADDR1            VARCHAR2(200),
  SCODE             CHAR(10),
  DTIME             VARCHAR2(29),
  PASSWD            VARCHAR2(50),
  STA               CHAR(4),
  TRAFFIC           VARCHAR2(50),
  GUIDEPOST         VARCHAR2(50),
  EXPLANATION       VARCHAR2(100),
  PICTURE           VARCHAR2(100),
  CITYID            INTEGER,
  RUFLAG            INTEGER,
  BSTATE            INTEGER,
  STOPTIME          VARCHAR2(29),
  RUACOUNT          NVARCHAR2(50),
  RULEGALPERSON     VARCHAR2(50),
  ZSHFLAG           INTEGER,
  CARDAREAID        INTEGER,
  CARDPREFECTUREID  INTEGER,
  RUTYPE            INTEGER,
  FID               VARCHAR2(15),
  ID                INTEGER,
  BILLINGCYCLE      INTEGER,
  CYCLEFLAG         VARCHAR2(10),
  TRATRATE          NUMBER(18,2),
  CYCLEDATE         VARCHAR2(20),
  IFRATE            INTEGER,
  RUFLAGDATA        INTEGER,
  ADMINBSTATE       INTEGER,
  RUPASSFLAG        INTEGER,
  NUMTYPE           VARCHAR2(50),
  JINGBANRENPERNUM  VARCHAR2(18),
  JINGBANPERDATE    VARCHAR2(8),
  YEYEZHIZHAONUM    VARCHAR2(50),
  YINGYEZHIZHAODATE VARCHAR2(50),
  SHUIWUDENGJIDATE  VARCHAR2(50),
  YINGYEZHIZHAOPATH VARCHAR2(50),
  SHUIWUDENGJINUM   VARCHAR2(50),
  SHUIWUDENGJIPATH  VARCHAR2(50),
  ZUZHIJIGOUNUM     VARCHAR2(50),
  ZUZHIJIEGOUDATE   VARCHAR2(50),
  ZUZHIJIGOUPATH    VARCHAR2(50),
  FENGXIANDENGJI    VARCHAR2(50)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RU_GROUP_TEST
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RU_GROUP_TEST
(
  ID          INTEGER,
  LRUID       VARCHAR2(15),
  RUACCOUNTID INTEGER,
  RUGROUPNAME VARCHAR2(200),
  JIESUANRIQI VARCHAR2(8),
  TRATRATE    NUMBER(18,2),
  CYCLEFLAG   VARCHAR2(10),
  EDITTIME    VARCHAR2(8),
  RUREMARKS   VARCHAR2(50)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RU_TERMINAL_TEST
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RU_TERMINAL_TEST
(
  SSERIALNUM         CHAR(8),
  TTYPE              CHAR(10),
  COMMODE            VARCHAR2(20),
  MANUF              VARCHAR2(128),
  TEL                CHAR(20),
  REF                CHAR(10),
  INVNUM             CHAR(11),
  MAINM              CHAR(2),
  LRUID              CHAR(15),
  EMPLOYDATE         DATE,
  BATCHNO            CHAR(6),
  COMALG             CHAR(10),
  TPDU               CHAR(10),
  TERMID             INTEGER,
  COMID              INTEGER,
  TERADDRESS         NVARCHAR2(200),
  BSTATE             INTEGER,
  PIN_KEY            VARCHAR2(100),
  PIN_CHECKVALUE     VARCHAR2(100),
  WORKING_KEY        VARCHAR2(100),
  WORKING_CHECKVALUE VARCHAR2(100),
  SSERIALNUMPASSWORD VARCHAR2(50),
  CARDAREAID         INTEGER,
  CARDCITYID         INTEGER,
  CARDPREFECTUREID   INTEGER,
  SHIHUASHOPID       VARCHAR2(50),
  RUGROUPID          INTEGER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table RegisterInfo
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.RegisterInfo
(
  ID             INTEGER not null,
  UserName       NVARCHAR2(20),
  RealName       NVARCHAR2(20) not null,
  Sex            INTEGER not null,
  Address        NVARCHAR2(100),
  PostCode       VARCHAR2(50),
  CardNumber     VARCHAR2(30) not null,
  IDCardNumber   VARCHAR2(30) not null,
  MobilePhone    VARCHAR2(30) not null,
  Email          VARCHAR2(50) not null,
  LoginPwd       VARCHAR2(32),
  LoginPwdDate   DATE,
  ExpirationDate DATE,
  OnLinePayPwd   VARCHAR2(20),
  Birthday       DATE,
  LoginDate      DATE,
  LoginIP        VARCHAR2(50),
  CreateDate     DATE default SYSDATE not null,
  CreateBy       NVARCHAR2(20) not null,
  UpdateDate     DATE,
  UpdateBy       NVARCHAR2(20),
  LOGINTRYTIMES  NUMBER(10),
  LOGINTRYDATE   DATE
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.RegisterInfo
  add constraint PK_REGISTERINFO primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SALESTLOG
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SALESTLOG
(
  VERNO_CTX      NUMBER(10) default 0 not null,
  ID             NUMBER(10) default 0 not null,
  TLOG_ID        NUMBER(20) not null,
  ORG_TLOG_ID    NUMBER(20) not null,
  PAN            VARCHAR2(19) not null,
  AMTTXN         FLOAT not null,
  FATHER_ORDER   VARCHAR2(40) not null,
  CHILDREN_ORDER VARCHAR2(40) not null,
  ORG_F_ORDER    VARCHAR2(40) default '' not null,
  ORG_C_ORDER    VARCHAR2(40) default '' not null,
  VERIFIER       VARCHAR2(128) default '' not null,
  VERIFYTIME     VARCHAR2(20) default '' not null,
  ACCTDATA       VARCHAR2(512) default '' not null,
  STXNSTAT       NUMBER(5) default 0 not null,
  RESERVED1      VARCHAR2(255) default '' not null,
  RESERVED2      VARCHAR2(255) default '' not null,
  RESERVED3      VARCHAR2(255) default '' not null,
  DESCR          VARCHAR2(255) default '' not null,
  CTXDATE        DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  CURTXN         CHAR(3) default '156',
  AMTTXN_JY      FLOAT default 0,
  RATESET        FLOAT default 0,
  CURRBILL       CHAR(3) default '156',
  CRDPRODUCT     VARCHAR2(4) default ' '
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.SALESTLOG
  add constraint PK_SALESTLOG primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.SALESTLOG
  add constraint HASH_SALESTLOG unique (PAN, FATHER_ORDER, CHILDREN_ORDER)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.INDEX_SALESTLOG_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.SALESTLOG (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SCHEME
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SCHEME
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SCHEME    VARCHAR2(12) not null,
  IMPCMD    VARCHAR2(79) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SCOPEDET
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SCOPEDET
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  DESCR      VARCHAR2(12) not null,
  KEYFMTSTR  VARCHAR2(60) not null,
  CURRFLD    VARCHAR2(15) not null,
  DESCR_FULL VARCHAR2(60) not null,
  SCOPE_TYPE NUMBER(5) not null,
  PRIORITY   NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_SCOPEDET on OPS$YUFU_CHINA_PS_RUN_BAK.SCOPEDET (SCOPE_TYPE, DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SCREENFIELD
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SCREENFIELD
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  ACSITEM     VARCHAR2(15) not null,
  USRGRP      VARCHAR2(15) not null,
  ALGORITHM   NUMBER(5) not null,
  SCREENFIELD VARCHAR2(255) not null,
  MASK        VARCHAR2(128) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_SCREENFIELD_SEARCH on OPS$YUFU_CHINA_PS_RUN_BAK.SCREENFIELD (USRGRP, ACSITEM, SCREENFIELD)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SDPOSTXN
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SDPOSTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TERMPOS_ID NUMBER(10) default 0 not null,
  RRN        VARCHAR2(12) not null,
  DATELOCAL  DATE not null,
  STAN       NUMBER(7) not null,
  MTID       VARCHAR2(4) not null,
  TXNCODE    NUMBER(5) not null,
  TLOGID     NUMBER(20) not null,
  MSGCLSORG  CHAR(1) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_SDPOSTXN on OPS$YUFU_CHINA_PS_RUN_BAK.SDPOSTXN (TERMPOS_ID, DATELOCAL, STAN, MTID, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_SDPOSTXN_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.SDPOSTXN (TERMPOS_ID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SD_REFUND_INFO
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SD_REFUND_INFO
(
  VERNO_CTX       NUMBER(10) default 0 not null,
  ID              NUMBER(10) default 0 not null,
  TLOGID          NUMBER(10) default 0 not null,
  RRN             VARCHAR2(12) not null,
  AMTTXN          FLOAT not null,
  REMAIN_AMT      FLOAT not null,
  BLACK_AMT       FLOAT not null,
  CLEAR_AMT       FLOAT not null,
  ADD_DATA_TXN    VARCHAR2(255) not null,
  ADD_DATA_REMAIN VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table SMSCheckCode
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SMSCheckCode
(
  MobileNumber   VARCHAR2(20) not null,
  CardNumber     VARCHAR2(20) not null,
  CheckCode      VARCHAR2(20) not null,
  ExpirationDate DATE not null,
  CreateDate     DATE default SYSDATE not null,
  CreateBy       NVARCHAR2(20) not null,
  UpdateDate     DATE,
  UpdateBy       NVARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.SMSCheckCode
  add constraint PK_SMSCHECKCODE primary key (MobileNumber)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table STAN
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.STAN
(
  VERNO_CTX NUMBER(10) default 1 not null,
  SID       NUMBER(10) not null,
  STAN      NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_STAN on OPS$YUFU_CHINA_PS_RUN_BAK.STAN (SID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table STATCHGPERM
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.STATCHGPERM
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ACSITEM       VARCHAR2(15) not null,
  STATCONTEXT   NUMBER(5) not null,
  FROM_STATCODE CHAR(2) not null,
  TO_STATCODE   CHAR(2) not null,
  PRIORITY      NUMBER(5) default 10 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table STMT_FORMAT
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.STMT_FORMAT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  DESCR        VARCHAR2(40) not null,
  PAGE_LENGTH  NUMBER(5) not null,
  PAGE_WIDTH   NUMBER(5) not null,
  HEADER_LINES NUMBER(5) not null,
  FOOTER_LINES NUMBER(5) not null,
  DETAIL_LINES NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_STMT_FORMAT on OPS$YUFU_CHINA_PS_RUN_BAK.STMT_FORMAT (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table STMT_ITEM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.STMT_ITEM
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  DESCR       VARCHAR2(40),
  SECTION     VARCHAR2(2) not null,
  LINE        NUMBER(5) not null,
  START_POS   NUMBER(5) not null,
  FORMAT_MASK VARCHAR2(100),
  DATA        NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_STMT_ITEM on OPS$YUFU_CHINA_PS_RUN_BAK.STMT_ITEM (ID, SECTION, LINE, START_POS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table STRDESCR
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.STRDESCR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  LANG      VARCHAR2(2) not null,
  DESCRTYPE VARCHAR2(6) not null,
  TAG       VARCHAR2(64) not null,
  DESCR     VARCHAR2(72) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 320K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_STRDESCR on OPS$YUFU_CHINA_PS_RUN_BAK.STRDESCR (LANG, DESCRTYPE, TAG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SUBACCTRANS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS
(
  ID         NUMBER(10) not null,
  ACCOUNTNO  VARCHAR2(15),
  ACCMONEY   NUMBER(12,4) default 0.00,
  TRANSID    NUMBER(10),
  ACCREMONEY NUMBER(12,4) default 0.00
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS
  is '¶ÔÓ¦½»Ò×Á÷Ë®±í9¸öÕË»§½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS.ACCOUNTNO
  is '×ÓÕË»§ÕËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS.ACCMONEY
  is '×ÓÕË»§½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS.TRANSID
  is '½»Ò×Á÷Ë®±íID£¨TransactionRecords±í£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS.ACCREMONEY
  is '×ÓÕË»§Óà¶î';

prompt
prompt Creating table SUBACCTRANS_HIS
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS
(
  ID         NUMBER(10) not null,
  ACCOUNTNO  VARCHAR2(15),
  ACCMONEY   NUMBER(12,4) default 0.00,
  TRANSID    NUMBER(10),
  ACCREMONEY NUMBER(12,4) default 0.00
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS
  is '¶ÔÓ¦½»Ò×Á÷Ë®±í9¸öÕË»§½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS.ACCOUNTNO
  is '×ÓÕË»§ÕËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS.ACCMONEY
  is '×ÓÕË»§½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS.TRANSID
  is '½»Ò×Á÷Ë®±íID£¨TransactionRecords±í£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS.ACCREMONEY
  is '×ÓÕË»§Óà¶î';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS
  add constraint PK_SUBACCTRANS_HIS primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_SUBACCTRANS_HIS_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.SUBACCTRANS_HIS (TRANSID, ACCOUNTNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SUPVCRD
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SUPVCRD
(
  VERNO_CTX NUMBER(10) default 1 not null,
  PAN       VARCHAR2(19) not null,
  USR       VARCHAR2(15) not null,
  PINBLK    VARCHAR2(16) not null,
  PINTRIES  NUMBER(5) not null,
  DESCR     VARCHAR2(40) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.SUPVCRD
  add constraint UNQ_SUPVCRD_USR unique (USR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_SUPVCRD on OPS$YUFU_CHINA_PS_RUN_BAK.SUPVCRD (PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table SWITCHFEE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SWITCHFEE
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  CURRCODE      CHAR(3) not null,
  CASH_FLAT     FLOAT not null,
  BALANCE_FLAT  FLOAT not null,
  DECLINED_FLAT FLOAT not null,
  FEE_DATE      DATE not null,
  FEE_TIME      NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_SWITCHFEE on OPS$YUFU_CHINA_PS_RUN_BAK.SWITCHFEE (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table SWRECTOTS
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.SWRECTOTS
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  CTXDATE    DATE not null,
  FECODE     VARCHAR2(11) not null,
  CASH_TXN   CHAR(1) not null,
  CURSET     CHAR(3) not null,
  ISS_ROLE   CHAR(1) not null,
  CREDNUM    NUMBER(10) not null,
  CREDREVNUM NUMBER(10) not null,
  DEBNUM     NUMBER(10) not null,
  DEBREVNUM  NUMBER(10) not null,
  ENQNUM     NUMBER(10) not null,
  CREDAMT    FLOAT not null,
  CREDREVAMT FLOAT not null,
  DEBAMT     FLOAT not null,
  DEBREVAMT  FLOAT not null,
  AMTNETSET  FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_SWRECTOTS on OPS$YUFU_CHINA_PS_RUN_BAK.SWRECTOTS (CTXDATE, FECODE, ISS_ROLE, CASH_TXN, CURSET)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TAX
prompt ==================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TAX
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TAXCODE   CHAR(1) not null,
  CURRCODE  CHAR(3) not null,
  DESCR     VARCHAR2(20) not null,
  RATE      FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TAX on OPS$YUFU_CHINA_PS_RUN_BAK.TAX (TAXCODE, CURRCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TBL_COUPON_WAIT_INFO
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TBL_COUPON_WAIT_INFO
(
  MER_NO   VARCHAR2(15) not null,
  TERM_NO  VARCHAR2(8) not null,
  MER_NAME VARCHAR2(200) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.TBL_COUPON_WAIT_INFO
  add constraint PK_COUPON_WAIT_MER primary key (MER_NO)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TCOUNTS
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TCOUNTS
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  TXNCODE    NUMBER(5) not null,
  CTXSUBTYPE NUMBER(5) not null,
  START_DATE DATE not null,
  COUNT      NUMBER(10) not null,
  CRDDET_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TCOUNTS on OPS$YUFU_CHINA_PS_RUN_BAK.TCOUNTS (CRDDET_ID, TXNCODE, CTXSUBTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TD_USER213
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TD_USER213
(
  id VARCHAR2(30)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table TERMATM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMATM
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  TYPEID         NUMBER(5) not null,
  TERMCODE       VARCHAR2(8) not null,
  TESTFLAG       NUMBER(5) not null,
  STATUSID       NUMBER(5) not null,
  BRANCH_ID      NUMBER(10) default 0 not null,
  CURRCODE       CHAR(3) not null,
  TERMNO         NUMBER(5) not null,
  TABLENAME      VARCHAR2(12) not null,
  COMMSDVC       VARCHAR2(127) not null,
  STATEREQ       CHAR(1) not null,
  STATEACT       CHAR(1) not null,
  STATEDATE      DATE not null,
  STATETIME      NUMBER(10) not null,
  CTXONLINE      CHAR(1) not null,
  ONLINEDATE     DATE not null,
  ONLINETIME     NUMBER(10) not null,
  LASTTXNDATE    DATE not null,
  LASTTXNTIME    NUMBER(10) not null,
  CASS1TYPE      CHAR(1) not null,
  CASS2TYPE      CHAR(1) not null,
  CASS3TYPE      CHAR(1) not null,
  CASS4TYPE      CHAR(1) not null,
  CASS1DNOM      NUMBER(10) not null,
  CASS2DNOM      NUMBER(10) not null,
  CASS3DNOM      NUMBER(10) not null,
  CASS4DNOM      NUMBER(10) not null,
  CASS1STD       NUMBER(5) not null,
  CASS2STD       NUMBER(5) not null,
  CASS3STD       NUMBER(5) not null,
  CASS4STD       NUMBER(5) not null,
  CASS1LOAD      NUMBER(5) not null,
  CASS2LOAD      NUMBER(5) not null,
  CASS3LOAD      NUMBER(5) not null,
  CASS4LOAD      NUMBER(5) not null,
  CASS1LOW       NUMBER(5) not null,
  CASS2LOW       NUMBER(5) not null,
  CASS3LOW       NUMBER(5) not null,
  CASS4LOW       NUMBER(5) not null,
  CASS1DISP      NUMBER(5) not null,
  CASS2DISP      NUMBER(5) not null,
  CASS3DISP      NUMBER(5) not null,
  CASS4DISP      NUMBER(5) not null,
  CASS1DVRT      NUMBER(5) not null,
  CASS2DVRT      NUMBER(5) not null,
  CASS3DVRT      NUMBER(5) not null,
  CASS4DVRT      NUMBER(5) not null,
  CASS1CURR      CHAR(3) not null,
  CASS2CURR      CHAR(3) not null,
  CASS3CURR      CHAR(3) not null,
  CASS4CURR      CHAR(3) not null,
  REPLENDATE     DATE not null,
  REPLENTIME     INTEGER not null,
  CASS1          CHAR(1) not null,
  CASS2          CHAR(1) not null,
  CASS3          CHAR(1) not null,
  CASS4          CHAR(1) not null,
  DISPENSER      CHAR(1) not null,
  JOURNAL        CHAR(1) not null,
  RECEIPT        CHAR(1) not null,
  CARDREADER     CHAR(1) not null,
  DEPOSITORY     CHAR(1) not null,
  NIGHTSAFE      CHAR(1) not null,
  DOORS          CHAR(1) not null,
  DOCPRINT       CHAR(1) not null,
  PASSPRINT      CHAR(1) not null,
  STMPRINT       CHAR(1) not null,
  CAMERA         CHAR(1) not null,
  VANDAL         CHAR(1) not null,
  COINDISP       CHAR(1) not null,
  ALARM          CHAR(1) not null,
  CLOCK          CHAR(1) not null,
  DISK           CHAR(1) not null,
  ENCRYPTOR      CHAR(1) not null,
  EDC            CHAR(1) not null,
  SPAREDVC1      CHAR(1) not null,
  SPAREDVC2      CHAR(1) not null,
  SPAREDVC3      CHAR(1) not null,
  SPAREDVC4      CHAR(1) not null,
  SPAREDVC5      CHAR(1) not null,
  SPAREDVC6      CHAR(1) not null,
  FATALDVC       VARCHAR2(16) not null,
  RCPTWIDTH      NUMBER(5) not null,
  SCRGEOM        CHAR(1) not null,
  SCRCOLOR       CHAR(1) not null,
  DPOSTYP        CHAR(1) not null,
  FKEYTYP        CHAR(1) not null,
  MCRWTRACK      CHAR(1) not null,
  MCRWTYP        CHAR(1) not null,
  PRSNTYP        CHAR(1) not null,
  SPARECFG1      CHAR(1) not null,
  SPARECFG2      CHAR(1) not null,
  SPARECFG3      CHAR(1) not null,
  SPARECFG4      CHAR(1) not null,
  SPARECFG5      CHAR(1) not null,
  SPARECFG6      CHAR(1) not null,
  TSEQ           NUMBER(5) not null,
  ENCPIN         CHAR(1) not null,
  RCPTPRINT      VARCHAR2(32) not null,
  MACING         CHAR(1) not null,
  USEATMDSPCNTS  CHAR(1) not null,
  USEATMLOADCNTS CHAR(1) not null,
  NOTEMIX        NUMBER(5) not null,
  LOCATION       VARCHAR2(20) not null,
  CONTACTNAME    VARCHAR2(20) not null,
  CONTACTNO      VARCHAR2(20) not null,
  CONACCNO1      VARCHAR2(28) default ' ' not null,
  CONCUR1        CHAR(3) default ' ' not null,
  CONACCNO2      VARCHAR2(28) default ' ' not null,
  CONCUR2        CHAR(3) default ' ' not null,
  TIMEZONE       VARCHAR2(64) default ' ' not null,
  AUTODEPOSIT    CHAR(1) default '1' not null,
  NOTECFG        NUMBER(5) default 0 not null,
  REMOTEADDR     VARCHAR2(15) default ' ' not null,
  LOC_ADDRL      VARCHAR2(35) default ' ' not null,
  LOC_CITY       VARCHAR2(40) default ' ' not null,
  LOC_POST       VARCHAR2(10) default ' ' not null,
  CAT_PARAMS     VARCHAR2(127) default ' ' not null,
  ID             NUMBER(10) default 0 not null,
  STATEACTREAS   NUMBER(5) default 0 not null,
  ENC_ID         VARCHAR2(32) default ' ' not null,
  RKL_INFO       CHAR(24) default '000000000000000000000000' not null,
  ACLCFGREQ      CHAR(1) default '1' not null,
  ACLCFGACT      CHAR(1) default '1' not null,
  CAT_ACQRISK_ID NUMBER(10) default 1 not null,
  OPTIONS        CHAR(64) default '0000000000000000000000000000000000000000000000000000000000000000' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.TERMATM
  add constraint UNQ_TERMATM_TERMCODE unique (TERMCODE)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TERMATM on OPS$YUFU_CHINA_PS_RUN_BAK.TERMATM (BRANCH_ID, TERMNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TERMGROUP_TMP
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMGROUP_TMP
(
  GROUP_ID NUMBER(10) not null,
  MRCHNO   VARCHAR2(15) not null,
  ACCT_ID  NUMBER(10) not null,
  TIMEZONE VARCHAR2(64) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TERMINALCONFIG
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG
(
  ID                    NUMBER(8) not null,
  MERCHANTNUMBERONE     VARCHAR2(18) not null,
  MERCHANTNUMBERSETACCO VARCHAR2(18) not null,
  TERMINALNUMBER        VARCHAR2(15) not null,
  FEERATE               NUMBER(10,2),
  SETTLEMENTACCOUNT     VARCHAR2(25),
  TERMINALLOCATION      VARCHAR2(50),
  TERMINALSTATUS        VARCHAR2(10),
  PROVINCE              VARCHAR2(20),
  CITY                  VARCHAR2(20),
  COUNTY                VARCHAR2(20),
  TERMINALTYPE          VARCHAR2(10),
  TERMINALMOBILE        VARCHAR2(20)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG
  is 'ÖÕ¶ËÅäÖÃ±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.MERCHANTNUMBERONE
  is 'ÉÌ»§ºÅ£¨ÖÕ¶ËPOS»ú£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.MERCHANTNUMBERSETACCO
  is 'ÉÌ»§ºÅ£¨½áËãÕË»§ÉÌ»§ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.TERMINALNUMBER
  is 'ÖÕ¶ËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.FEERATE
  is 'ÊÖÐø·ÑÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.SETTLEMENTACCOUNT
  is '½áËãÕËºÅ£¨¿Í»§ÕË»§£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.TERMINALLOCATION
  is 'ÖÕ¶ËÎ»ÖÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.TERMINALSTATUS
  is 'ÖÕ¶Ë×´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.PROVINCE
  is 'Ê¡';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.CITY
  is 'ÊÐ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.COUNTY
  is 'Çø£¨ÏØ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.TERMINALTYPE
  is 'ÖÕ¶ËÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMINALCONFIG.TERMINALMOBILE
  is 'ÁªÏµµç»°';

prompt
prompt Creating table TERMINFO_TMP
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMINFO_TMP
(
  TERMCODE VARCHAR2(16) not null,
  MRCHNO   VARCHAR2(15) not null,
  STATUSID NUMBER(5) not null,
  GROUP_ID NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TERMPOS
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  TYPEID      NUMBER(5) not null,
  TERMCODE    VARCHAR2(16) not null,
  TESTFLAG    NUMBER(5) not null,
  STATUSID    NUMBER(5) not null,
  CURRCODE    CHAR(3) not null,
  TERMNO      NUMBER(5) not null,
  LOCATION    VARCHAR2(200) not null,
  CONACCNO    VARCHAR2(28) default ' ' not null,
  CONCUR      CHAR(3) default ' ' not null,
  POSCHIC     CHAR(1) default '9' not null,
  POSCHAC     CHAR(1) default '0' not null,
  POSCRC      CHAR(1) default '0' not null,
  POSOE       CHAR(1) default '1' not null,
  POSCDOC     CHAR(1) default '1' not null,
  POSTOC      CHAR(1) default '4' not null,
  POSPCC      CHAR(1) default '0' not null,
  TIMEZONE    VARCHAR2(64) default ' ' not null,
  CAT_PARAMS  VARCHAR2(127) default ' ' not null,
  MERCHANT_ID NUMBER(10) default 0 not null,
  TERMTYPE    CHAR(1) default '0' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS
  add constraint UNQ_TERMPOS_I_M_T unique (MERCHANT_ID, TERMNO)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_TERMPOS_TERMCODE on OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS (TERMCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TERMPOS_1226
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_1226
(
  VERNO_CTX   NUMBER(10) not null,
  ID          NUMBER(10) not null,
  TYPEID      NUMBER(5) not null,
  TERMCODE    VARCHAR2(16) not null,
  TESTFLAG    NUMBER(5) not null,
  STATUSID    NUMBER(5) not null,
  CURRCODE    CHAR(3) not null,
  TERMNO      NUMBER(5) not null,
  LOCATION    VARCHAR2(200) not null,
  CONACCNO    VARCHAR2(28) not null,
  CONCUR      CHAR(3) not null,
  POSCHIC     CHAR(1) not null,
  POSCHAC     CHAR(1) not null,
  POSCRC      CHAR(1) not null,
  POSOE       CHAR(1) not null,
  POSCDOC     CHAR(1) not null,
  POSTOC      CHAR(1) not null,
  POSPCC      CHAR(1) not null,
  TIMEZONE    VARCHAR2(64) not null,
  CAT_PARAMS  VARCHAR2(127) not null,
  MERCHANT_ID NUMBER(10) not null,
  TERMTYPE    CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TERMPOS_1226_MERID on OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_1226 (MERCHANT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TERMPOS_X
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X
(
  ID                 NUMBER(10) not null,
  POS_TEL            VARCHAR2(20) not null,
  BATCH_NO           NUMBER(10) default 0 not null,
  ADD_DATE           DATE default to_date('2000-07-01','yyyy-mm-dd') not null,
  LOCATION           VARCHAR2(200) not null,
  STATE              NUMBER(5) not null,
  CITY_NO            NUMBER(10) default 0 not null,
  PROVINCE           NUMBER(10) default 0 not null,
  ZONE               NUMBER(10) default 0 not null,
  SETTLE_MRCH_ACC_ID NUMBER(10) not null,
  TERMCODE           VARCHAR2(16) not null,
  TIMEZONE           VARCHAR2(64) not null,
  INST_ID            NUMBER(10) not null,
  MRCHNO             VARCHAR2(15) not null,
  TERM_STAT          CHAR(1) default '0',
  CONSUMP_CATEGORY   VARCHAR2(100),
  DISABLED_DATE      DATE,
  ENABLE_DATE        DATE,
  UPDATE_X_DATE      DATE default sysdate
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X.CONSUMP_CATEGORY
  is 'Ïû·Ñ³¡¾°';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X.DISABLED_DATE
  is 'Í£ÓÃÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X.ENABLE_DATE
  is 'ÆôÓÃÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X.UPDATE_X_DATE
  is '¸üÐÂÊ±¼ä';
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TERMPOS_X on OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X (INST_ID, TERMCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TERMPOS_X_1226
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X_1226
(
  ID                 NUMBER(10) not null,
  POS_TEL            VARCHAR2(20) not null,
  BATCH_NO           NUMBER(10) not null,
  ADD_DATE           DATE not null,
  LOCATION           VARCHAR2(200) not null,
  STATE              NUMBER(5) not null,
  CITY_NO            NUMBER(10) not null,
  PROVINCE           NUMBER(10) not null,
  ZONE               NUMBER(10) not null,
  SETTLE_MRCH_ACC_ID NUMBER(10) not null,
  TERMCODE           VARCHAR2(16) not null,
  TIMEZONE           VARCHAR2(64) not null,
  INST_ID            NUMBER(10) not null,
  MRCHNO             VARCHAR2(15) not null,
  TERM_STAT          CHAR(1),
  CONSUMP_CATEGORY   VARCHAR2(100)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TERMPOS_X_1226_ACC on OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X_1226 (SETTLE_MRCH_ACC_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TERMPOS_X_1226_ID on OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X_1226 (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEST_IM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TEST_IM
(
  OWNER          VARCHAR2(30),
  OBJECT_NAME    VARCHAR2(128),
  SUBOBJECT_NAME VARCHAR2(30),
  OBJECT_ID      NUMBER,
  DATA_OBJECT_ID NUMBER,
  OBJECT_TYPE    VARCHAR2(19),
  CREATED        DATE,
  LAST_DDL_TIME  DATE,
  TIMESTAMP      VARCHAR2(19),
  STATUS         VARCHAR2(7),
  TEMPORARY      VARCHAR2(1),
  GENERATED      VARCHAR2(1),
  SECONDARY      VARCHAR2(1),
  NAMESPACE      NUMBER,
  EDITION_NAME   VARCHAR2(30)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  SET_ID      NUMBER(10) not null,
  MAX_VALUE   FLOAT not null,
  MAX_COUNT   NUMBER(10) not null,
  TIME_PERIOD NUMBER(10) not null,
  PRIORITY    NUMBER(5) not null,
  DESCR       VARCHAR2(127) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD
  add constraint UNQ_THRESHOLD_PRIORITY unique (SET_ID, PRIORITY)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_THRESHOLD on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD_HIST
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_HIST
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  THRESHOLD_ID NUMBER(10) not null,
  TIMECHG      TIMESTAMP(3) not null,
  ACTION       CHAR(1) not null,
  SET_ID       NUMBER(10) not null,
  MAX_VALUE    FLOAT not null,
  MAX_COUNT    NUMBER(10) not null,
  TIME_PERIOD  NUMBER(10) not null,
  PRIORITY     NUMBER(5) not null,
  DESCR        VARCHAR2(127) not null,
  ACTIVITY_ID  NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TIMECHG_THRESHOLD_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD_OVRD
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  THRESHOLD_ID    NUMBER(10) not null,
  SCOPEKEY        VARCHAR2(60) not null,
  SCOPEDET_ID     NUMBER(10) not null,
  GLOBAL_OVRD_ALL NUMBER(5) not null,
  MAX_VALUE       FLOAT not null,
  MAX_COUNT       NUMBER(10) not null,
  TIME_PERIOD     NUMBER(10) not null,
  PRIORITY        NUMBER(5) not null,
  EFFDATE         DATE not null,
  PURGEDATE       DATE not null,
  ACTIVITY_ID     NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_THRESHOLD_OVRD on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_THRESHOLD_OVRD_PRIORITY on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD (THRESHOLD_ID, SCOPEDET_ID, SCOPEKEY, PRIORITY)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD_OVRD_HIST
prompt ==================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD_HIST
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  THRESHOLD_OVRD_ID NUMBER(10) not null,
  TIMECHG           TIMESTAMP(3) not null,
  ACTION            CHAR(1) not null,
  THRESHOLD_ID      NUMBER(10) not null,
  SCOPEKEY          VARCHAR2(60) not null,
  SCOPEDET_ID       NUMBER(10) not null,
  GLOBAL_OVRD_ALL   NUMBER(5) not null,
  MAX_VALUE         FLOAT not null,
  MAX_COUNT         NUMBER(10) not null,
  TIME_PERIOD       NUMBER(10) not null,
  PRIORITY          NUMBER(5) not null,
  EFFDATE           DATE not null,
  PURGEDATE         DATE not null,
  ACTIVITY_ID       NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TIMECHG_THRESHOLD_OVRD_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD_SET
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  SET_CODE    VARCHAR2(32) not null,
  INST_ID     NUMBER(10) default 0 not null,
  EVALSET_ID  NUMBER(10) not null,
  AGGR_DEF_ID NUMBER(10) not null,
  CURRCODE    CHAR(3) not null,
  DESCR       VARCHAR2(127) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET
  add constraint UNQ_THRESHOLD_SET_AGGR_DEF_ID unique (AGGR_DEF_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET
  add constraint UNQ_THRESHOLD_SET_EVALSET_ID unique (EVALSET_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_THRESHOLD_SET_CODE_INST on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET (SET_CODE, INST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table THRESHOLD_SET_HIST
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET_HIST
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  SET_ID      NUMBER(10) not null,
  TIMECHG     TIMESTAMP(3) not null,
  ACTION      CHAR(1) not null,
  SET_CODE    VARCHAR2(32) not null,
  INST_ID     NUMBER(10) default 0 not null,
  EVALSET_ID  NUMBER(10) not null,
  AGGR_DEF_ID NUMBER(10) not null,
  CURRCODE    CHAR(3) not null,
  DESCR       VARCHAR2(127) not null,
  ACTIVITY_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TIMECHG_THRESHOLD_SET_HIST on OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET_HIST (TIMECHG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TLIMITS
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLIMITS
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  CRDPRODUCT_ID NUMBER(10) default 0 not null,
  TXNCODE       NUMBER(5) not null,
  CTXSUBTYPE    NUMBER(5) not null,
  LIMIT         NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLIMITS on OPS$YUFU_CHINA_PS_RUN_BAK.TLIMITS (CRDPRODUCT_ID, TXNCODE, CTXSUBTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TLOG
prompt ===================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOG
(
  VERNO_CTX           NUMBER(10) default 1 not null,
  ID                  NUMBER(20) not null,
  MSGHDR              VARCHAR2(64) not null,
  BITMAP              VARCHAR2(32) not null,
  STAN                NUMBER(10) not null,
  STANORG             NUMBER(10) not null,
  RRN                 VARCHAR2(12) not null,
  TERMTYPE            CHAR(1) not null,
  TERMSEQ             NUMBER(5) not null,
  PRIVDATA1           NUMBER(5) not null,
  ROUTE_IID           VARCHAR2(11) not null,
  CRDSEQNO            NUMBER(5) not null,
  PAN                 VARCHAR2(19) not null,
  PANEXT              VARCHAR2(3) not null,
  DATEEXP             CHAR(4) not null,
  SVCCODE             NUMBER(5) not null,
  T1                  VARCHAR2(75) not null,
  T2                  VARCHAR2(37) not null,
  T3                  VARCHAR2(106) not null,
  CRDACPTLOC          VARCHAR2(64) not null,
  CRDACPTBUS          NUMBER(5) not null,
  CRDACPTID           VARCHAR2(15) not null,
  TERMCODE            VARCHAR2(16) not null,
  POSCHIC             CHAR(1) not null,
  POSCHAC             CHAR(1) not null,
  POSCRC              CHAR(1) not null,
  POSOE               CHAR(1) not null,
  POSCHP              CHAR(1) not null,
  POSCP               CHAR(1) not null,
  POSCDIM             CHAR(1) not null,
  POSCHAM             CHAR(1) not null,
  POSCHA              CHAR(1) not null,
  POSCHAD             CHAR(1) not null,
  POSSD               CHAR(1) not null,
  POSPCC              CHAR(1) not null,
  POSCC_89            NUMBER(5) not null,
  AIID                VARCHAR2(11) not null,
  ACQCOUNTRY          CHAR(3) not null,
  DATEXMIT            DATE not null,
  TIMEXMIT            NUMBER(10) not null,
  DATELOCAL           DATE not null,
  TIMELOCAL           NUMBER(10) not null,
  DATEXMITORG         DATE not null,
  TIMEXMITORG         NUMBER(10) not null,
  MSGCLS              CHAR(1) not null,
  MSGCLSORG           CHAR(1) not null,
  MSGFN               CHAR(1) not null,
  MSGFNORG            CHAR(1) not null,
  TXNSRC              CHAR(1) not null,
  TXNSRCORG           CHAR(1) not null,
  FNCODE              NUMBER(5) not null,
  TXNCODE             NUMBER(5) not null,
  TXNSTATUS           NUMBER(5) not null,
  RSPSRC              CHAR(2) not null,
  STIPREASON          NUMBER(5) not null,
  REJREASON           NUMBER(5) not null,
  CURTXN              CHAR(3) not null,
  AMTTXN              FLOAT not null,
  AMTTXNFEE           FLOAT not null,
  AMTPROCFEE          FLOAT not null,
  AMTTXNORG           FLOAT not null,
  AMTTXNCB            FLOAT not null,
  ACTYPE1             NUMBER(5) not null,
  ACNUM1              VARCHAR2(28) not null,
  ACTYPE2             NUMBER(5) not null,
  ACNUM2              VARCHAR2(28) not null,
  ACTIONCODE          CHAR(1) not null,
  RSPCODE             CHAR(2) not null,
  REASONCODE          NUMBER(5) not null,
  APRVLCODE           VARCHAR2(9) not null,
  VERCODES            VARCHAR2(3) not null,
  AUTHLIFE            NUMBER(5) not null,
  FIID                VARCHAR2(11) not null,
  FIIDCOUNTRY         VARCHAR2(3) not null,
  RIID                VARCHAR2(11) not null,
  RIIDCOUNTRY         VARCHAR2(3) not null,
  SIID                VARCHAR2(11) not null,
  SIIDCOUNTRY         VARCHAR2(3) not null,
  DATESET             DATE not null,
  AMTSET              FLOAT not null,
  RATESET             FLOAT not null,
  CURSET              CHAR(3) not null,
  INBTCHID            NUMBER(10) not null,
  OUTBTCHID           NUMBER(10) not null,
  CTXDATE             DATE not null,
  INDATEREC           DATE not null,
  INRECBTCH           NUMBER(10) not null,
  OUTDATEREC          DATE not null,
  OUTRECBTCH          NUMBER(10) not null,
  INBTCHSEQ           NUMBER(10) default 0 not null,
  AFE                 VARCHAR2(8) not null,
  IFE                 VARCHAR2(8) not null,
  OUTBTCHTYPE         NUMBER(5) not null,
  CURBILL             CHAR(3) not null,
  AMTBILL             FLOAT not null,
  AMTBILLCB           FLOAT not null,
  RATEBILL            FLOAT not null,
  ADDDATA             VARCHAR2(255) not null,
  SCHEME              VARCHAR2(12) not null,
  AMTTAX              FLOAT not null,
  RATETAX             FLOAT not null,
  AMTCOM              FLOAT not null,
  VCPS                VARCHAR2(20) not null,
  VMSCFLDS            VARCHAR2(64) not null,
  CLEARED             CHAR(1) not null,
  PMCID               VARCHAR2(6) not null,
  CUR_TRADED          CHAR(3) default ' ' not null,
  AMT_TRADED          FLOAT default 0.0 not null,
  AMTORG_TRADED       FLOAT default 0.0 not null,
  AMTCB_TRADED        FLOAT default 0.0 not null,
  PAN_DISPLAY         VARCHAR2(19) default ' ' not null,
  CRDPRODUCT          VARCHAR2(4) default ' ' not null,
  CRDDET_ID           NUMBER(10) default 0 not null,
  CRDDET_REAL_ID      NUMBER(10) default 0 not null,
  ACCDET1_ID          NUMBER(10) default 0 not null,
  ACCDET2_ID          NUMBER(10) default 0 not null,
  CAT_PARAMS          VARCHAR2(127) default ' ' not null,
  GROUP_ID            NUMBER(20) default 0 not null,
  TRN                 VARCHAR2(25) default ' ' not null,
  ARN                 VARCHAR2(23) default ' ' not null,
  AMT_ISSUER_COM      FLOAT default 0.0 not null,
  CUR_ISSUER_COM      CHAR(3) default ' ' not null,
  AMT_ACQ_COM         FLOAT default 0.0 not null,
  CUR_ACQ_COM         CHAR(3) default ' ' not null,
  AMT_REIMBURSEMENT   FLOAT default 0.0 not null,
  CUR_REIMBURSEMENT   CHAR(3) default ' ' not null,
  CURTXNFEE           CHAR(3) default ' ' not null,
  CURPROCFEE          CHAR(3) default ' ' not null,
  CURTXNORG           CHAR(3) default ' ' not null,
  CURTAX              CHAR(3) default ' ' not null,
  CURCOM              CHAR(3) default ' ' not null,
  AMTTXN_AUTH         FLOAT default 0.0 not null,
  AMTTXNCB_AUTH       FLOAT default 0.0 not null,
  ATC                 NUMBER(10) default 0 not null,
  UCAF                VARCHAR2(40) default ' ' not null,
  AAVARS              CHAR(1) default ' ' not null,
  MC_PRIVATE          VARCHAR2(100) default ' ' not null,
  SRC_IID             VARCHAR2(11) default ' ' not null,
  SRC_IID_COUNTRY     CHAR(3) default ' ' not null,
  DEST_IID            VARCHAR2(11) default ' ' not null,
  DEST_IID_COUNTRY    CHAR(3) default ' ' not null,
  WHEN_CREATED        VARCHAR2(17) default ' ' not null,
  ACQ_INST_ID         INTEGER default 0 not null,
  ISS_INST_ID         INTEGER default 0 not null,
  NET_MRCH_REGION     VARCHAR2(4) default ' ' not null,
  NET_ISS_REGION      VARCHAR2(4) default ' ' not null,
  NET_MCC_GROUP       VARCHAR2(4) default ' ' not null,
  NET_CRDPRODUCT      VARCHAR2(4) default ' ' not null,
  NET_MRCH_ID         VARCHAR2(10) default ' ' not null,
  NET_RRN             VARCHAR2(12) default ' ' not null,
  POSCAP              VARCHAR2(32) default ' ' not null,
  POSCDIC             VARCHAR2(20) default ' ' not null,
  CRDACPTLOC_NAME     VARCHAR2(40) default ' ' not null,
  CRDACPTLOC_STREET   VARCHAR2(35) default ' ' not null,
  CRDACPTLOC_CITY     VARCHAR2(40) default ' ' not null,
  CRDACPTLOC_POSTCODE VARCHAR2(10) default ' ' not null,
  CRDACPTLOC_REGION   VARCHAR2(3) default ' ' not null,
  CRDACPTLOC_COUNTRY  CHAR(3) default ' ' not null,
  AUTH_EXPDATE        DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  VERRESULTS          VARCHAR2(64) default ' ' not null,
  SUB_TXNCODE         CHAR(2) default '' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.TLOG
  add constraint PK_TLOG primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.FK_TLOG_C_B_BATCH on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (CTXDATE, INBTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_AIID on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (AIID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_INDATEREC on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (INDATEREC, AFE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_OUTDATEREC on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (OUTDATEREC, IFE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (PAN, CRDSEQNO, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_RRN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (RRN, STANORG)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOG_TSTAN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOG (AIID, CRDACPTID, TERMCODE, DATELOCAL, TERMSEQ)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TLOGERR
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGERR
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TLOGID    NUMBER(20) not null,
  PROGNAME  VARCHAR2(32) not null,
  DBGTEXT   VARCHAR2(255) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLOGERR on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGERR (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TLOGEXPORT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXPORT
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  TLOG_ID      NUMBER(20) not null,
  CTXDATE      DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  OUTBTCHID    NUMBER(10) default 0 not null,
  EXPORTSTATUS NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLOGEXPORT on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXPORT (TLOG_ID, CTXDATE, OUTBTCHID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TLOGEXTRACTLOG
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXTRACTLOG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  CTXDATE     DATE not null,
  EXTRACTTYPE VARCHAR2(16) not null,
  MAXTLOGID   NUMBER(10) not null,
  TIMEEXTR    CHAR(17) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLOGEXTRACTLOG on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXTRACTLOG (EXTRACTTYPE, MAXTLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXTRACTLOG_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXTRACTLOG (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TLOGLNK
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGLNK
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  GRPTYPE    NUMBER(5) not null,
  CTXSYSDATE DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TLOGLNKTXN
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGLNKTXN
(
  VERNO_CTX  NUMBER(10) default 1 not null,
  ID         NUMBER(10) not null,
  TLOGLNK_ID NUMBER(10) not null,
  TLOG_ID    NUMBER(20) not null,
  CTXSYSDATE DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLOGLNKTXN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGLNKTXN (TLOG_ID, TLOGLNK_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TLOGSTATISTIC
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGSTATISTIC
(
  ID         NUMBER(20) not null,
  ROUTE_IID  VARCHAR2(11) not null,
  CRDACPTBUS NUMBER(5) not null,
  ACQCOUNTRY CHAR(3) not null,
  MSGCLS     CHAR(1) not null,
  MSGCLSORG  CHAR(1) not null,
  MSGFN      CHAR(1) not null,
  MSGFNORG   CHAR(1) not null,
  TXNSRC     CHAR(1) not null,
  TXNSRCORG  CHAR(1) not null,
  FNCODE     NUMBER(5) not null,
  TXNCODE    NUMBER(5) not null,
  TXNSTATUS  NUMBER(5) not null,
  REJREASON  NUMBER(5) not null,
  CURTXN     CHAR(3) not null,
  AMTTXN     FLOAT not null,
  ACTIONCODE CHAR(1) not null,
  RSPCODE    CHAR(2) not null,
  REASONCODE NUMBER(5) not null,
  AMTSET     FLOAT not null,
  CURSET     CHAR(3) not null,
  CTXDATE    DATE not null,
  AFE        VARCHAR2(8) not null,
  IFE        VARCHAR2(8) not null,
  CURBILL    CHAR(3) not null,
  AMTBILL    FLOAT not null,
  TXN_COUNT  NUMBER(10) not null,
  SCHEME     VARCHAR2(12) not null,
  ISSCOUNTRY CHAR(3) not null,
  ISSREGION  CHAR(1) not null,
  ISSINTRA   CHAR(1) not null,
  MCCGROUP   VARCHAR2(30) not null,
  CRDTYPE    CHAR(1) not null,
  CRDUSE     CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TLOGSTATISTIC on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGSTATISTIC (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOGSTATISTIC_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGSTATISTIC (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TLOGZX
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TLOGZX
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(20) not null,
  MSGHDR          VARCHAR2(64) not null,
  MSGTYPE         CHAR(4) not null,
  BITMAP          VARCHAR2(128) not null,
  PAN_DISPLAY     VARCHAR2(19) default ' ' not null,
  PROCODE         CHAR(6) not null,
  AMTTXN          FLOAT not null,
  DATEXMIT        DATE not null,
  TIMEXMIT        NUMBER(10) not null,
  STAN            NUMBER(10) not null,
  TIMELOCAL       NUMBER(10) not null,
  DATELOCAL       DATE not null,
  DATEEXP         CHAR(4) not null,
  FB22            CHAR(2) not null,
  CRDSEQNO        NUMBER(5) not null,
  POSCC_89        NUMBER(5) not null,
  POSPCC          CHAR(1) not null,
  AIID            VARCHAR2(11) not null,
  T2              VARCHAR2(37) not null,
  T3              VARCHAR2(106) not null,
  RRN             VARCHAR2(12) not null,
  APRVLCODE       VARCHAR2(9) not null,
  RSPCODE         CHAR(2) not null,
  CRDACPTID       VARCHAR2(15) not null,
  TERMCODE        VARCHAR2(16) not null,
  CRDACPTLOC_NAME VARCHAR2(40) default ' ' not null,
  FB48            VARCHAR2(100) default ' ' not null,
  CURTXN          CHAR(3) not null,
  PIN             VARCHAR2(8) default ' ' not null,
  FB53            VARCHAR2(100) default ' ' not null,
  FB54            VARCHAR2(100) default ' ' not null,
  FB55            VARCHAR2(510) default ' ' not null,
  FB57            VARCHAR2(36) default ' ' not null,
  FB60            VARCHAR2(32) default ' ' not null,
  FB61            VARCHAR2(19) default ' ' not null,
  FB62            VARCHAR2(19) default ' ' not null,
  FB64            VARCHAR2(9) default ' ' not null,
  FB90            VARCHAR2(38) default ' ' not null,
  FB111           VARCHAR2(1000) default ' ' not null,
  FB112           VARCHAR2(21) default ' ' not null,
  FB122           VARCHAR2(100) default ' ' not null,
  FB128           VARCHAR2(9) default ' ' not null,
  TXNSTATUS       NUMBER(5) not null,
  CTXDATE         DATE not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 192K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOGZX_AIID on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGZX (AIID, RRN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOGZX_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGZX (PAN_DISPLAY, CRDSEQNO, CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TLOGZX_TSTAN on OPS$YUFU_CHINA_PS_RUN_BAK.TLOGZX (AIID, CRDACPTID, TERMCODE, DATELOCAL, STAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TOPUPDUMP
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPDUMP
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  TOPUPLOG_ID  NUMBER(10) not null,
  MESSAGE_TYPE NUMBER(5) not null,
  ENCKEY_ID    NUMBER(10),
  RAW_MESSAGE  BLOB not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.U_TUDUMP_TULOG_ID_MSG_TYPE on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPDUMP (TOPUPLOG_ID, MESSAGE_TYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TOPUPLOG
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  ORGID        NUMBER(10) not null,
  TUSTATUS     NUMBER(5) not null,
  TUREFNO      VARCHAR2(30) not null,
  HOSTNAME     CHAR(4) not null,
  TUROUTE      VARCHAR2(20) not null,
  MSGCLS       CHAR(1) not null,
  AMTTXN       FLOAT not null,
  CURTXN       CHAR(3) not null,
  PAN          CHAR(19) not null,
  SEQNO        NUMBER(5) not null,
  DATELOCAL    DATE not null,
  TIMELOCAL    NUMBER(10) not null,
  TLOGID       NUMBER(10) not null,
  CTXDATE      DATE not null,
  AFE          CHAR(8) not null,
  IFE          CHAR(8) not null,
  TURSP        NUMBER(5) not null,
  TUREJREASON  NUMBER(5) not null,
  CLEARED_FLAG NUMBER(5) not null,
  TXNSUBTYPE   NUMBER(5) default -1 not null,
  TXNTYPE      NUMBER(5) default -1 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TOPUPLOG on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TOPUPLOG_CTXDATE on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG (CTXDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TOPUPLOG_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG (PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TOPUPLOG_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_TOPUPLOG_TUREFNO on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG (TUREFNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TOPUPROUTING
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPROUTING
(
  VERNO_CTX NUMBER(10) default 1 not null,
  TUROUTE   VARCHAR2(20) not null,
  HOSTNAME  CHAR(4) not null,
  HOSTSVCNM VARCHAR2(15) not null,
  MSGQUEUE  VARCHAR2(15) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TOPUPROUTING on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPROUTING (TUROUTE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TOPUPSUMM
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPSUMM
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  CTXDATE      DATE not null,
  HOSTNAME     CHAR(4) not null,
  AFE          CHAR(8) not null,
  CTXTYPE      NUMBER(5) not null,
  TOTAL_TXNS   NUMBER(10) not null,
  TOTAL_AMOUNT FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TOPUPSUMM on OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPSUMM (CTXDATE, HOSTNAME, AFE, CTXTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TRANSACTIONDICTIONARY
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY
(
  ID          NUMBER(10) not null,
  TXNSRC      CHAR(6),
  TXNCODE     CHAR(6),
  SUB_TXNCODE CHAR(6),
  RSPCODE     CHAR(6),
  TXNSTATUS   CHAR(6),
  FNCODE      CHAR(6),
  NEWSTATUS   CHAR(6),
  REMARK      VARCHAR2(100),
  OPTDATETIME DATE default sysdate
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.ID
  is '×ÔÔö±àºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.TXNSRC
  is '½»Ò×À´Ô´';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.TXNCODE
  is '½»Ò×Âë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.SUB_TXNCODE
  is '×Ó´¦ÀíÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.RSPCODE
  is 'Ó¦´ðÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.TXNSTATUS
  is '½»Ò××´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.FNCODE
  is 'ÄÚ²¿Ê¹ÓÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.NEWSTATUS
  is 'ÐÂµÄ×´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.REMARK
  is '±¸×¢';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY.OPTDATETIME
  is '²Ù×÷Ê±¼ä';

prompt
prompt Creating table TRANSACTIONRECORDS
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS
(
  ID                      NUMBER(20) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(60),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(40),
  CITY                    CHAR(40),
  AREA                    CHAR(40),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(2),
  TXNSRCORG               CHAR(2),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(6),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(4),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(4),
  FLAG                    CHAR(4),
  AGETINEGRAL             CHAR(10),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(15),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  VARCHAR2(3),
  TRACE_NO                NUMBER,
  BATCH_NO                NUMBER,
  TRAN_RRN                CHAR(12),
  FREE_FIELD              NUMBER(10,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_20170510
prompt ==========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_20170510
(
  ID                      NUMBER(20) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(100),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(100),
  CITY                    CHAR(100),
  AREA                    CHAR(100),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(5),
  TXNSRCORG               CHAR(5),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(10),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(5),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(5),
  FLAG                    CHAR(5),
  AGETINEGRAL             CHAR(20),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(15),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  VARCHAR2(3),
  TRACE_NO                NUMBER,
  BATCH_NO                NUMBER,
  TRAN_RRN                CHAR(12)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_ALIPAY
prompt ========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_ALIPAY
(
  ID                      NUMBER(20) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(100),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(100),
  CITY                    CHAR(100),
  AREA                    CHAR(100),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(5),
  TXNSRCORG               CHAR(5),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(10),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(5),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(5),
  FLAG                    CHAR(5),
  AGETINEGRAL             CHAR(20),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(15),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  CHAR(3),
  TRACE_NO                NUMBER,
  BATCH_NO                NUMBER,
  TRAN_RRN                CHAR(12),
  FREE_FIELD              NUMBER(10,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_BAK
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK
(
  ID                      NUMBER(20) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(100),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(100),
  CITY                    CHAR(100),
  AREA                    CHAR(100),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(5),
  TXNSRCORG               CHAR(5),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(10),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(5),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(5),
  FLAG                    CHAR(5),
  AGETINEGRAL             CHAR(20),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(15),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  VARCHAR2(3),
  TRACE_NO                NUMBER,
  TRAN_RRN                CHAR(12),
  BATCH_NO                NUMBER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANTNUMBER_TRANS_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (MERCHANTNUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_CARDNUMBER_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (CARDNUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_DATASOURCEID_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (DATASOURCEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_LOTNO_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (LOTNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_MERCHANTTYPE_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (MERCHANTTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_REFERENCENUMBER_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (REFERENCENUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_SETTLEMENTACCOUNT_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (SETTLEMENTACCOUNT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_TRANSACTIONDATE_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (TRANSACTIONDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_TRANSACTIONSTATUS_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (TRANSACTIONSTATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_TRANSACTIONTYPE_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (TRANSACTIONTYPE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.VIEW1_SERIALNUMBER_BAK on OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_BAK (SERIALNUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_DAILY
prompt =======================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_DAILY
(
  MERCHANTNUMBER       VARCHAR2(15),
  TRANSACTIONDATE      VARCHAR2(8),
  TRANSACTIONMONEY_SUM NUMBER(10,2),
  MOMMENTS1            VARCHAR2(15),
  MOMMENTS2            VARCHAR2(20),
  MOMMENTS3            VARCHAR2(50),
  TRAN_NUM             NUMBER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_TEMP
prompt ======================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_TEMP
(
  ID                      NUMBER(20) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(60),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(40),
  CITY                    CHAR(40),
  AREA                    CHAR(40),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(2),
  TXNSRCORG               CHAR(2),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(6),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(4),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(4),
  FLAG                    CHAR(4),
  AGETINEGRAL             CHAR(10),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(15),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  VARCHAR2(3),
  TRACE_NO                NUMBER,
  BATCH_NO                NUMBER,
  TRAN_RRN                CHAR(12),
  FREE_FIELD              NUMBER(10,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSACTIONRECORDS_VERTION
prompt =========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_VERTION
(
  ID                      NUMBER(8) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(100),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(20),
  CITY                    CHAR(20),
  AREA                    CHAR(20),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(1),
  TXNSRCORG               CHAR(1),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(3),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(2),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(2),
  FLAG                    CHAR(2),
  AGETINEGRAL             CHAR(10),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(10),
  OLDTRANSTIME            VARCHAR2(6),
  FNCODE                  VARCHAR2(3)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSATIONWATER
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSATIONWATER
(
  ID                   NUMBER(20) not null,
  USERINFOID           VARCHAR2(20),
  CASHUSERID           NUMBER(20),
  YUFUPAYNUMBER        VARCHAR2(30),
  BANKNUMBER           VARCHAR2(30),
  BANKBATCHNUMBER      VARCHAR2(30),
  ORDERNUMBER          VARCHAR2(30),
  MERCHANTID           NUMBER(20),
  BANKCOMPANYCODE      VARCHAR2(30),
  BANKORGANIZATIONCODE VARCHAR2(30),
  EXPENSENAME          VARCHAR2(200),
  DEALMONEYTYPE        NUMBER,
  DEALSTATUS           NUMBER,
  DEALMONEY            NUMBER(18,2),
  DEALNOTE             VARCHAR2(50),
  PAYMENTWAY           VARCHAR2(2),
  PAYMENTCARD          VARCHAR2(30),
  SUBMITTIME           VARCHAR2(14),
  PAYMENTTIME          VARCHAR2(14),
  DEALTYPE             NUMBER,
  STATUS               NUMBER,
  SYNCNOTIFYURL        VARCHAR2(1000),
  ASYNNOTIFYURL        VARCHAR2(1000),
  TERMINALNO           VARCHAR2(8),
  POSPBATCHNO          VARCHAR2(6),
  POSPSERIALNO         VARCHAR2(6),
  REFNO                VARCHAR2(12),
  ORIGINALBATCHNO      VARCHAR2(6),
  ORIGNIALSERIALNO     VARCHAR2(6),
  ORIGINALREFNO        VARCHAR2(12),
  TIAOZHANGSTAUTS      NUMBER,
  DEALCHANNEL          NUMBER,
  SIGN_DES             VARCHAR2(100),
  SIGN_CERT            VARCHAR2(100),
  DESKEY               VARCHAR2(100),
  MERCHANTNAME         VARCHAR2(200),
  ORIGNIALID           NUMBER,
  DATABASEID           NUMBER(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSATIONWATER2
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSATIONWATER2
(
  ID                   NUMBER(20) not null,
  USERINFOID           VARCHAR2(20),
  CASHUSERID           NUMBER(20),
  YUFUPAYNUMBER        VARCHAR2(30),
  BANKNUMBER           VARCHAR2(30),
  BANKBATCHNUMBER      VARCHAR2(30),
  ORDERNUMBER          VARCHAR2(30),
  MERCHANTID           NUMBER(20),
  BANKCOMPANYCODE      VARCHAR2(30),
  BANKORGANIZATIONCODE VARCHAR2(30),
  EXPENSENAME          VARCHAR2(200),
  DEALMONEYTYPE        NUMBER,
  DEALSTATUS           NUMBER,
  DEALMONEY            NUMBER(18,2),
  DEALNOTE             VARCHAR2(50),
  PAYMENTWAY           NUMBER,
  PAYMENTCARD          VARCHAR2(30),
  SUBMITTIME           VARCHAR2(14),
  PAYMENTTIME          VARCHAR2(14),
  DEALTYPE             NUMBER,
  STATUS               NUMBER,
  SYNCNOTIFYURL        VARCHAR2(100),
  ASYNNOTIFYURL        VARCHAR2(100),
  TERMINALNO           VARCHAR2(8),
  POSPBATCHNO          VARCHAR2(6),
  POSPSERIALNO         VARCHAR2(6),
  REFNO                VARCHAR2(12),
  ORIGINALBATCHNO      VARCHAR2(6),
  ORIGNIALSERIALNO     VARCHAR2(6),
  ORIGINALREFNO        VARCHAR2(12),
  TIAOZHANGSTAUTS      NUMBER,
  DEALCHANNEL          NUMBER,
  SIGN_DES             VARCHAR2(100),
  SIGN_CERT            VARCHAR2(100),
  DESKEY               VARCHAR2(100),
  MERCHANTNAME         VARCHAR2(200)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table TRANSATIONWATER_FENG
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRANSATIONWATER_FENG
(
  ID                   NUMBER(20) not null,
  USERINFOID           VARCHAR2(20),
  CASHUSERID           NUMBER(20),
  YUFUPAYNUMBER        VARCHAR2(30),
  BANKNUMBER           VARCHAR2(30),
  BANKBATCHNUMBER      VARCHAR2(30),
  ORDERNUMBER          VARCHAR2(30),
  MERCHANTID           NUMBER(20),
  BANKCOMPANYCODE      VARCHAR2(30),
  BANKORGANIZATIONCODE VARCHAR2(30),
  EXPENSENAME          VARCHAR2(200),
  DEALMONEYTYPE        NUMBER,
  DEALSTATUS           NUMBER,
  DEALMONEY            NUMBER(18,2),
  DEALNOTE             VARCHAR2(50),
  PAYMENTWAY           NUMBER,
  PAYMENTCARD          VARCHAR2(30),
  SUBMITTIME           VARCHAR2(14),
  PAYMENTTIME          VARCHAR2(14),
  DEALTYPE             NUMBER,
  STATUS               NUMBER,
  SYNCNOTIFYURL        VARCHAR2(1000),
  ASYNNOTIFYURL        VARCHAR2(1000),
  TERMINALNO           VARCHAR2(8),
  POSPBATCHNO          VARCHAR2(6),
  POSPSERIALNO         VARCHAR2(6),
  REFNO                VARCHAR2(12),
  ORIGINALBATCHNO      VARCHAR2(6),
  ORIGNIALSERIALNO     VARCHAR2(6),
  ORIGINALREFNO        VARCHAR2(12),
  TIAOZHANGSTAUTS      NUMBER,
  DEALCHANNEL          NUMBER,
  SIGN_DES             VARCHAR2(100),
  SIGN_CERT            VARCHAR2(100),
  DESKEY               VARCHAR2(100),
  MERCHANTNAME         VARCHAR2(200),
  ORIGNIALID           NUMBER,
  DATABASEID           NUMBER(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255;

prompt
prompt Creating table TRUECARDACCOUNTCOUNT
prompt ===================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT
(
  ID           NUMBER(10),
  CARDDATANAME VARCHAR2(30),
  CARDDATATYPE VARCHAR2(30),
  CARDCOUNT    NUMBER(10),
  CARDDATE     VARCHAR2(50),
  CREATEDATE   VARCHAR2(50)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT.CARDDATANAME
  is 'ÐÂ¿¨/ÀÏ¿¨';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT.CARDDATATYPE
  is 'ÐÂ¿¨2/ÀÏ¿¨1';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT.CARDCOUNT
  is '¿¨ÕÅÊý';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT.CARDDATE
  is 'Í³¼Æ½ØÖ¹ÈÕÆÚÊ±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.TRUECARDACCOUNTCOUNT.CREATEDATE
  is 'Ìí¼ÓÊ±¼ä';

prompt
prompt Creating table TU_COMPANY
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TU_COMPANY
(
  VERNO_CTX          NUMBER(10) default 1 not null,
  ID                 NUMBER(10) not null,
  INST_ID            NUMBER(10) default 0 not null,
  TU_PAYMENT_TYPE_ID NUMBER(10) default 0 not null,
  COMPANY_CODE       VARCHAR2(64) not null,
  COMPANY_NAME       VARCHAR2(64) not null,
  FOREX_REFCODE      VARCHAR2(32) not null,
  SCRLABEL_ID        NUMBER(10) default 0 not null,
  PRIORITY           NUMBER(5) not null,
  VAT_RATE           FLOAT not null,
  TUHOST             VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TU_COMPANY on OPS$YUFU_CHINA_PS_RUN_BAK.TU_COMPANY (INST_ID, COMPANY_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TU_PAYMENT_ITEM
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TU_PAYMENT_ITEM
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  CURRCODE      CHAR(3) not null,
  AMOUNT1       FLOAT not null,
  AMOUNT2       FLOAT not null,
  SCRLABEL_ID   NUMBER(10) default 0 not null,
  TU_COMPANY_ID NUMBER(10) default 0 not null,
  PRIORITY      NUMBER(5) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table TU_PAYMENT_TYPE
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TU_PAYMENT_TYPE
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  SHORT_DESCR VARCHAR2(20) not null,
  DESCR       VARCHAR2(127) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TU_PRODUCT
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.TU_PRODUCT
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  ID            NUMBER(10) not null,
  TU_COMPANY_ID NUMBER(10) default 0 not null,
  PRODUCT_CODE  VARCHAR2(32) not null,
  SCRLABEL_ID   NUMBER(10) default 0 not null,
  CURRCODE      CHAR(3) not null,
  AMOUNT1       FLOAT not null,
  AMOUNT2       FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_TU_PRODUCT on OPS$YUFU_CHINA_PS_RUN_BAK.TU_PRODUCT (TU_COMPANY_ID, PRODUCT_CODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table T_CARDKINDSOF_FOR_STL
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL
(
  CARDNUMBER   VARCHAR2(20) not null,
  CARDKINDNAME VARCHAR2(60),
  REMARK       VARCHAR2(100),
  ISEXCLUSIVE  VARCHAR2(2),
  STLFLAG      VARCHAR2(1) default 1
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL.CARDNUMBER
  is '¿¨ÀàÐÍ±àÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL.CARDKINDNAME
  is '¿¨ÀàÐÍÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL.REMARK
  is 'ÃèÊö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL.ISEXCLUSIVE
  is 'ÊÇ·ñ×¨Êô¿¨ 0-·ñ 1-ÊÇ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_CARDKINDSOF_FOR_STL.STLFLAG
  is 'ÊÇ·ñ²ÎÓë½áËã 0-²»²ÎÓë 1-²ÎÓë';

prompt
prompt Creating table T_MEMBER_CARD_SALE
prompt =================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE
(
  ID                      NUMBER(8) not null,
  MERCHANTNUMBER          VARCHAR2(30),
  TERMINALNUMBER          VARCHAR2(30),
  CARDNUMBER              VARCHAR2(40),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         VARCHAR2(12),
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(40),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(60),
  MERCHANTTYPE            VARCHAR2(60),
  MERCHANTSECTORS         VARCHAR2(100),
  PROVINCE                CHAR(40),
  CITY                    CHAR(40),
  AREA                    CHAR(40),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(50),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(16),
  TRANSACTIONTIME         VARCHAR2(12),
  TERMINALLOCATION        VARCHAR2(100),
  DATASOURCE              VARCHAR2(40),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(60),
  SETTLEMENTDATE          VARCHAR2(40),
  ISEXCLUSIVE             VARCHAR2(4),
  CONSUMETYPE             VARCHAR2(4),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(24),
  TERMTYPE                VARCHAR2(40),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(38),
  AIID                    VARCHAR2(22),
  TXNSRC                  CHAR(2),
  TXNSRCORG               CHAR(2),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(6),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(56),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(56),
  RSPCODE                 CHAR(4),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(18),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(510),
  SUB_TXNCODE             CHAR(4),
  FLAG                    CHAR(4),
  AGETINEGRAL             CHAR(20),
  ORDERNUMBER             VARCHAR2(60),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(10),
  OLDTRANSTIME            VARCHAR2(6),
  BAL1                    NUMBER(18,2),
  BAL2                    NUMBER(18,2),
  BAL3                    NUMBER(18,2),
  KINDID                  NUMBER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.MERCHANTNUMBER
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TERMINALNUMBER
  is 'ÖÕ¶ËºÅ£¨×ÓÉÌ»§ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CARDNUMBER
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRANSACTIONMONEY
  is '½»Ò××Ü½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CARDACCOUNTMONEY
  is '¿¨ÕË»§½»Ò×½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRUEACCOUNTMONEY
  is 'ÊµÃûÕË»§½»Ò×½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.INTEGRATIONACCOUNTMONEY
  is '»ý·ÖÕË»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.SERIALNUMBER
  is 'Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.LOTNO
  is 'Åú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.REFERENCENUMBER
  is '²Î¿¼ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.RETURNPOINTS
  is 'Ïû·Ñ·µ»¹»ý·Ö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRANSACTIONTYPE
  is '½»Ò×ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRANSACTIONSTATUS
  is '½»Ò××´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CARDTYPE
  is '¿¨ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CARDTYPENAME
  is '¿¨ÀàÐÍÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.MERCHANTTYPE
  is 'ÉÌ»§ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.MERCHANTSECTORS
  is 'ÉÌ»§ÐÐÒµÀà±ð';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.PROVINCE
  is 'Ê¡';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CITY
  is 'ÊÐ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AREA
  is 'Çø';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.DATASOURCEID
  is 'Êý¾ÝÀ´Ô´ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ADDDATE
  is 'Ìí¼ÓÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.SETTLEMENTACCOUNT
  is '½áËãÕËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.PERFEE
  is 'µ¥±ÊÊÖÐø·Ñ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRANSACTIONDATE
  is '½»Ò×ÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TRANSACTIONTIME
  is '½»Ò×Ê±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TERMINALLOCATION
  is 'ÖÕ¶ËÎ»ÖÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.DATASOURCE
  is 'Êý¾ÝÀ´Ô´ÃèÊö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TLOGID
  is 'Ô´±íID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TLOGADDDATE
  is 'Ô´±íÊý¾ÝÌí¼ÓÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.SETTLEMENTDATE
  is '½áËãÈÕÆÚ£¨ÖÐÊ¯»¯£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ISEXCLUSIVE
  is 'ÊÇ·ñ×¨Êô¿¨';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CONSUMETYPE
  is 'ÖÐÊ¯»¯Ïû·ÑÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.STANORG
  is 'Ô­Ê¼½»Ò×Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.RRN
  is 'Ö÷»úÁ÷Ë®ºÅ£¨²Î¿¼ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TERMTYPE
  is 'ÖÕ¶ËÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TERMSEQ
  is 'ÖÕ¶ËË÷ÒýºÅ£¨¸ùÖÕ¶Ë±íÓÐ¶ÔÓ¦¹ØÏµ£©£¨posÁ÷Ë®ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.PAN
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AIID
  is 'ÊÕµ¥»ú¹¹´úÂë£¨ÍòÊÂ´ïÏÂÊôÊÕµ¥»ú¹¹±àºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TXNSRC
  is '½»Ò×À´Ô´';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TXNSRCORG
  is '¾ÉµÄ½»Ò×À´Ô´';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TXNCODE
  is '½»Ò×Âë£¨8583±¨ÎÄµÄÇ°2Î»£©
Í¨¹ý¸Ã×Ö¶Î¸úÆäËû×Ö¶ÎÇø·Ö½»Ò×£¬²Î¿¼ÏÂÃæÇþµÀÇø·Ö½»Ò×ÐÅÏ¢¡£
';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.TXNSTATUS
  is '½»Ò××´Ì¬
1 ²»ÄÜ½«½»Ò×·¢ËÍ¸øÄ¿µÄ·½
2 ½»Ò×²»´æÔÚ
3 ½»Ò×´¦ÀíÖÐ
4 µ±½»Ò×Î´Íê³ÉÊ±±»³åÕý
5  ½»Ò×Íê³É²¢ÇÒ±»¾Ü¾ø
6  ½»Ò×Íê³É±»¾Ü¾ø²¢ÇÒ±»³åÕý
7  ½»Ò×³É¹¦()+respcode
8  ½»Ò×³É¹¦²¢±»³åÕý
9  ÎÞÏìÓ¦
10  ½»Ò×Ã»ÓÐÏàÓ¦±»³åÕý
11  À´×ÔÅúÁ¿µÄ½»Ò×±»¼ÇÂ¼£¨Õë¶ÔVISA base II£©
12  ½»Ò×³É¹¦µ«ÊÇÃ»ÓÐÊÕµ½À´×Ô£Á£ÔMµÄÈ·ÈÏ¡¡£¨²»ÓÃ£©
13  À´×ÔPOS½»Ò×µÄ³·ÏúÍ¨Öª(³·Ïú³åÕý)
14  ½»Ò×ÔÝÍ£';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.CURTXN
  is '½»Ò×±ÒÖÖ156';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AMTTXN
  is '½»Ò×½ð¶î£¨½»Ò××Ü½ð¶î£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AMTTXNFEE
  is '½»Ò×ÊÖÐø·Ñ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AMTPROCFEE
  is '´¦ÀíÊÖÐø·Ñ£¨ÍòÊÂ´ïÊÕµÄÇ®£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.AMTTXNORG
  is 'Ô­Ê¼½»Ò×½ð¶î£¨³åÕý³·Ïú£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ACTYPE1
  is 'ÕË»§1ÀàÐÍ£¨ÍòÊÂ´ï½»Ò×ÕË»§ÀàÐÍ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ACNUM1
  is 'ÕË»§1ÕË»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ACTYPE2
  is 'ÕË»§2ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ACNUM2
  is 'ÕË»§2ÕË»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.RSPCODE
  is '"Ó¦´ðÂë
0£º³É¹¦
ÆäËûÊ§°Ü
"';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.REASONCODE
  is 'Ô­Òò´úÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.APRVLCODE
  is 'CortexÄÚ²¿Ê¹ÓÃÊÚÈ¨Âë£¨ÍòÊÂ´ïÊ¹ÓÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.SYSDATES
  is 'CortexÏµÍ³ÈÕÆÚ£¨CortextÇåËãÈÕÆÚ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.RATEBILL
  is '×ª»»»ãÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.RATESET
  is '±ÒÖÖ×ª»»»ãÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.ADDDATA
  is '¸½¼ÓÊý¾Ý£¨½ð¶î*100£©
¸ñÊ½0100000001000002000000001000
';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.SUB_TXNCODE
  is '×Ó´¦ÀíÂë£¨¸ùtxncode½áºÏÊ¹ÓÃÇø·Ö½»Ò×£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE.KINDID
  is '¿¨±í¿¨Àà±êÊ¶ÐÍ';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE
  add constraint PK_MEMBER_CARD_SALE primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MEMBER_CARD_SALE on OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE (TRANSACTIONDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_MEMBER_CARD_SALE_TLOGID on OPS$YUFU_CHINA_PS_RUN_BAK.T_MEMBER_CARD_SALE (TLOGID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table T_STAT_DAILY_ACCDET_T
prompt ====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.T_STAT_DAILY_ACCDET_T
(
  DAILY_DATE       VARCHAR2(8) not null,
  GEN_DT           VARCHAR2(14) not null,
  CARD_BIN         VARCHAR2(11) not null,
  CRDPRODUCT       VARCHAR2(4),
  CARD_TYPE_NAME   VARCHAR2(60),
  CARD_STATUS      VARCHAR2(2) not null,
  CARD_STATUS_DESC VARCHAR2(20) not null,
  CARD_CNT         NUMBER not null,
  ACC01            NUMBER not null,
  ACC02            NUMBER not null,
  ACC03            NUMBER not null,
  ACC04            NUMBER not null,
  ACC05            NUMBER not null,
  ACC06            NUMBER not null,
  ACC07            NUMBER not null,
  ACC08            NUMBER not null,
  ACC09            NUMBER not null,
  TOTAL_BAL        NUMBER not null,
  AB_FLAG          VARCHAR2(1)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.T_STAT_DAILY_ACCDET_T
  is '±¸¸¶½ðÓà¶î(´óÓÚ0µÄÕË»§)';

prompt
prompt Creating table T_TRANSACTIONRECORDS_HIS
prompt =======================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS
(
  ID                      NUMBER(8) not null,
  MERCHANTNUMBER          VARCHAR2(15),
  TERMINALNUMBER          VARCHAR2(15),
  CARDNUMBER              VARCHAR2(20),
  TRANSACTIONMONEY        NUMBER(10,2),
  CARDACCOUNTMONEY        NUMBER(10,2),
  TRUEACCOUNTMONEY        NUMBER(10,2),
  INTEGRATIONACCOUNTMONEY NUMBER(10,2),
  SERIALNUMBER            NUMBER,
  LOTNO                   NUMBER,
  REFERENCENUMBER         NUMBER,
  RETURNPOINTS            NUMBER(10,2),
  TRANSACTIONTYPE         VARCHAR2(20),
  TRANSACTIONSTATUS       NUMBER(2),
  CARDTYPE                NUMBER(3),
  CARDTYPENAME            CHAR(30),
  MERCHANTTYPE            VARCHAR2(30),
  MERCHANTSECTORS         VARCHAR2(50),
  PROVINCE                CHAR(20),
  CITY                    CHAR(20),
  AREA                    CHAR(20),
  DATASOURCEID            NUMBER,
  ADDDATE                 DATE,
  SETTLEMENTACCOUNT       VARCHAR2(25),
  PERFEE                  NUMBER(10,2),
  TRANSACTIONDATE         VARCHAR2(8),
  TRANSACTIONTIME         VARCHAR2(6),
  TERMINALLOCATION        VARCHAR2(50),
  DATASOURCE              VARCHAR2(20),
  TLOGID                  NUMBER(12),
  TLOGADDDATE             VARCHAR2(30),
  SETTLEMENTDATE          VARCHAR2(20),
  ISEXCLUSIVE             VARCHAR2(2),
  CONSUMETYPE             VARCHAR2(2),
  STANORG                 NUMBER(10),
  RRN                     VARCHAR2(12),
  TERMTYPE                VARCHAR2(20),
  TERMSEQ                 NUMBER(6),
  PAN                     VARCHAR2(19),
  AIID                    VARCHAR2(11),
  TXNSRC                  CHAR(1),
  TXNSRCORG               CHAR(1),
  TXNCODE                 NUMBER(5),
  TXNSTATUS               NUMBER(5),
  CURTXN                  CHAR(3),
  AMTTXN                  FLOAT,
  AMTTXNFEE               FLOAT,
  AMTPROCFEE              FLOAT,
  AMTTXNORG               FLOAT,
  ACTYPE1                 NUMBER(5),
  ACNUM1                  VARCHAR2(28),
  ACTYPE2                 NUMBER(5),
  ACNUM2                  VARCHAR2(28),
  RSPCODE                 CHAR(2),
  REASONCODE              NUMBER(5),
  APRVLCODE               VARCHAR2(9),
  SYSDATES                DATE,
  RATEBILL                FLOAT,
  RATESET                 FLOAT,
  ADDDATA                 VARCHAR2(255),
  SUB_TXNCODE             CHAR(2),
  FLAG                    CHAR(2),
  AGETINEGRAL             CHAR(10),
  ORDERNUMBER             VARCHAR2(30),
  AMTBILL                 NUMBER(10,2),
  CURBILL                 CHAR(3),
  OLDSERIALNUMBER         NUMBER,
  OLDLOTNO                NUMBER,
  OLDREFERENCENUMBER      NUMBER,
  OLDTRANSDATE            VARCHAR2(10),
  OLDTRANSTIME            VARCHAR2(6)
)
partition by range (TRANSACTIONDATE)
(
  partition T_TRANDATE_2012_LESS values less than ('20120101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    ),
  partition T_TRANDATE_2012 values less than ('20130101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    ),
  partition T_TRANDATE_2013 values less than ('20140101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    ),
  partition T_TRANDATE_2014 values less than ('20150101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    ),
  partition T_TRANDATE_2015 values less than ('20160101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    ),
  partition T_TRANDATE_2016 values less than ('20170101')
    tablespace CTXDB
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      next 8K
      minextents 1
      maxextents unlimited
    )
);
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS
  is '½»Ò×Á÷Ë®±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.MERCHANTNUMBER
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TERMINALNUMBER
  is 'ÖÕ¶ËºÅ£¨×ÓÉÌ»§ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CARDNUMBER
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRANSACTIONMONEY
  is '½»Ò××Ü½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CARDACCOUNTMONEY
  is '¿¨ÕË»§½»Ò×½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRUEACCOUNTMONEY
  is 'ÊµÃûÕË»§½»Ò×½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.INTEGRATIONACCOUNTMONEY
  is '»ý·ÖÕË»§Ïû·Ñ½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.SERIALNUMBER
  is 'Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.LOTNO
  is 'Åú´ÎºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.REFERENCENUMBER
  is '²Î¿¼ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.RETURNPOINTS
  is 'Ïû·Ñ·µ»¹»ý·Ö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRANSACTIONTYPE
  is '½»Ò×ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRANSACTIONSTATUS
  is '½»Ò××´Ì¬';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CARDTYPE
  is '¿¨ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CARDTYPENAME
  is '¿¨ÀàÐÍÃû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.MERCHANTTYPE
  is 'ÉÌ»§ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.MERCHANTSECTORS
  is 'ÉÌ»§ÐÐÒµÀà±ð';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.PROVINCE
  is 'Ê¡';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CITY
  is 'ÊÐ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AREA
  is 'Çø';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.DATASOURCEID
  is 'Êý¾ÝÀ´Ô´ID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ADDDATE
  is 'Ìí¼ÓÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.SETTLEMENTACCOUNT
  is '½áËãÕËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.PERFEE
  is 'µ¥±ÊÊÖÐø·Ñ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRANSACTIONDATE
  is '½»Ò×ÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TRANSACTIONTIME
  is '½»Ò×Ê±¼ä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TERMINALLOCATION
  is 'ÖÕ¶ËÎ»ÖÃ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.DATASOURCE
  is 'Êý¾ÝÀ´Ô´ÃèÊö';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TLOGID
  is 'Ô´±íID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TLOGADDDATE
  is 'Ô´±íÊý¾ÝÌí¼ÓÈÕÆÚ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.SETTLEMENTDATE
  is '½áËãÈÕÆÚ£¨ÖÐÊ¯»¯£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ISEXCLUSIVE
  is 'ÊÇ·ñ×¨Êô¿¨';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CONSUMETYPE
  is 'ÖÐÊ¯»¯Ïû·ÑÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.STANORG
  is 'Ô­Ê¼½»Ò×Á÷Ë®ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.RRN
  is 'Ö÷»úÁ÷Ë®ºÅ£¨²Î¿¼ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TERMTYPE
  is 'ÖÕ¶ËÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TERMSEQ
  is 'ÖÕ¶ËË÷ÒýºÅ£¨¸ùÖÕ¶Ë±íÓÐ¶ÔÓ¦¹ØÏµ£©£¨posÁ÷Ë®ºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.PAN
  is '¿¨ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AIID
  is 'ÊÕµ¥»ú¹¹´úÂë£¨ÍòÊÂ´ïÏÂÊôÊÕµ¥»ú¹¹±àºÅ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TXNSRC
  is '½»Ò×À´Ô´';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TXNSRCORG
  is '¾ÉµÄ½»Ò×À´Ô´';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TXNCODE
  is '½»Ò×Âë£¨8583±¨ÎÄµÄÇ°2Î»£©
Í¨¹ý¸Ã×Ö¶Î¸úÆäËû×Ö¶ÎÇø·Ö½»Ò×£¬²Î¿¼ÏÂÃæÇþµÀÇø·Ö½»Ò×ÐÅÏ¢¡£
';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.TXNSTATUS
  is '½»Ò××´Ì¬
1 ²»ÄÜ½«½»Ò×·¢ËÍ¸øÄ¿µÄ·½
2 ½»Ò×²»´æÔÚ
3 ½»Ò×´¦ÀíÖÐ
4 µ±½»Ò×Î´Íê³ÉÊ±±»³åÕý
5  ½»Ò×Íê³É²¢ÇÒ±»¾Ü¾ø
6  ½»Ò×Íê³É±»¾Ü¾ø²¢ÇÒ±»³åÕý
7  ½»Ò×³É¹¦()+respcode
8  ½»Ò×³É¹¦²¢±»³åÕý
9  ÎÞÏìÓ¦
10  ½»Ò×Ã»ÓÐÏàÓ¦±»³åÕý
11  À´×ÔÅúÁ¿µÄ½»Ò×±»¼ÇÂ¼£¨Õë¶ÔVISA base II£©
12  ½»Ò×³É¹¦µ«ÊÇÃ»ÓÐÊÕµ½À´×Ô£Á£ÔMµÄÈ·ÈÏ¡¡£¨²»ÓÃ£©
13  À´×ÔPOS½»Ò×µÄ³·ÏúÍ¨Öª(³·Ïú³åÕý)
14  ½»Ò×ÔÝÍ£';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CURTXN
  is '½»Ò×±ÒÖÖ156';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AMTTXN
  is '½»Ò×½ð¶î£¨½»Ò××Ü½ð¶î£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AMTTXNFEE
  is '½»Ò×ÊÖÐø·Ñ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AMTPROCFEE
  is '´¦ÀíÊÖÐø·Ñ£¨ÍòÊÂ´ïÊÕµÄÇ®£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AMTTXNORG
  is 'Ô­Ê¼½»Ò×½ð¶î£¨³åÕý³·Ïú£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ACTYPE1
  is 'ÕË»§1ÀàÐÍ£¨ÍòÊÂ´ï½»Ò×ÕË»§ÀàÐÍ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ACNUM1
  is 'ÕË»§1ÕË»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ACTYPE2
  is 'ÕË»§2ÀàÐÍ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ACNUM2
  is 'ÕË»§2ÕË»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.RSPCODE
  is '"Ó¦´ðÂë
0£º³É¹¦
ÆäËûÊ§°Ü
"';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.REASONCODE
  is 'Ô­Òò´úÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.APRVLCODE
  is 'CortexÄÚ²¿Ê¹ÓÃÊÚÈ¨Âë£¨ÍòÊÂ´ïÊ¹ÓÃ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.SYSDATES
  is 'CortexÏµÍ³ÈÕÆÚ£¨CortextÇåËãÈÕÆÚ£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.RATEBILL
  is '×ª»»»ãÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.RATESET
  is '±ÒÖÖ×ª»»»ãÂÊ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.ADDDATA
  is '¸½¼ÓÊý¾Ý£¨½ð¶î*100£©
¸ñÊ½0100000001000002000000001000
';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.SUB_TXNCODE
  is '×Ó´¦ÀíÂë£¨¸ùtxncode½áºÏÊ¹ÓÃÇø·Ö½»Ò×£©';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.AMTBILL
  is 'ÇåËã½ð¶î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.CURBILL
  is 'ÇåËã±ÒÖÖ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.OLDTRANSDATE
  is '??????????????';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS.OLDTRANSTIME
  is '??????????????';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS
  add constraint TRANSACTIONRECORDS_HIS_PK primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANTNUMBER_TRANS_HIS on OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS (MERCHANTNUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_HIS_DATASOURCEID on OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS (DATASOURCEID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_HIS_REFERENCENUMBER on OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS (REFERENCENUMBER)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.TRANS_HIS_TRANSACTIONDATE on OPS$YUFU_CHINA_PS_RUN_BAK.T_TRANSACTIONRECORDS_HIS (TRANSACTIONDATE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table T_WANKE_MER_BOOK
prompt ===============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK
(
  ID            VARCHAR2(16) not null,
  MER_NO        VARCHAR2(16) not null,
  MER_NAME      VARCHAR2(200),
  MER_TYPE      VARCHAR2(3),
  MER_TYPE_NAME VARCHAR2(200),
  TER_NO        VARCHAR2(9),
  SCENE_ID      VARCHAR2(3),
  SCENE_NAME    VARCHAR2(30)
)
tablespace USERS
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on table OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK
  is 'Íò¿ÆÉÌ»§±í';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.ID
  is 'Ö÷¼üID';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.MER_NO
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.MER_NAME
  is 'ÉÌ»§Ãû³Æ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.MER_TYPE
  is ' Íò¿ÆÉÌ»§ÀàÐÍ(0-Íò¿Æ³µ³¡)';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.MER_TYPE_NAME
  is 'ÉÌ»§ÀàÐÍÃû³Æ(0-Íò¿Æ³µ³¡)';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.TER_NO
  is 'ÖÕ¶ËºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.SCENE_ID
  is '³¡¾°±àºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK.SCENE_NAME
  is '³¡¾°Ãû³Æ';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.T_WANKE_MER_BOOK
  add constraint PK_T_WANKE_MER_BOOK primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table UPLOAD
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  TLOGID       NUMBER(20) not null,
  HOSTNM       VARCHAR2(4) not null,
  ATTEMPTS     NUMBER(5) not null,
  TXNSTAT      NUMBER(5) not null,
  MSGCLS       CHAR(1) not null,
  AIID         VARCHAR2(11) not null,
  STAN         NUMBER(10) not null,
  DATELOCAL    DATE not null,
  TIMELOCAL    NUMBER(10) not null,
  CURTXN       CHAR(3) not null,
  AMTTXN       FLOAT not null,
  SRCBRANCH_ID NUMBER(10) default 0 not null,
  DSTBRANCH_ID NUMBER(10) default 0 not null,
  BLKAMT       FLOAT,
  FINTLOGID    NUMBER(20) not null,
  CTXDATE      DATE default TO_DATE('2263-08-31','YYYY-MM-DD') not null,
  AMTBILL      FLOAT default 0 not null,
  CURBILL      CHAR(3) not null,
  MSGCLSORG    CHAR(1) default ' ' not null,
  TXNCODE      NUMBER(5) default -1 not null,
  ACCDET_ID    NUMBER(10) default 0 not null,
  CRDDET_ID    NUMBER(10) default 0 not null,
  SUB_TXNCODE  CHAR(2) default '00' not null,
  UNCLRCREDIT  FLOAT default 0 not null,
  TRN          VARCHAR2(25) default ' ' not null,
  ITEMTYPE     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_UPLOAD on OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD (TLOGID, TXNSTAT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_UPLOAD_ACCDET on OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD (ACCDET_ID, TXNCODE)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_UPLOAD_BTREE on OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD (HOSTNM, FINTLOGID, DATELOCAL, TIMELOCAL, MSGCLS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_UPLOAD_CONTUPL on OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD (HOSTNM, TXNSTAT, MSGCLS, DATELOCAL, TIMELOCAL)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table UPLOADMERCHANTFTP
prompt ================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP
(
  MERCHANTNUMBER CHAR(15),
  MERCHANTNAME   VARCHAR2(200),
  FTPIP          VARCHAR2(15),
  FTPPORT        VARCHAR2(10),
  FTPPATH        VARCHAR2(100),
  FTPUSERID      VARCHAR2(100),
  FTPPASSWORD    VARCHAR2(100),
  UPLOADTABLE    VARCHAR2(100)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.MERCHANTNUMBER
  is 'ÉÌ»§ºÅ';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.MERCHANTNAME
  is 'ÉÌ»§Ãû';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.FTPIP
  is 'IP';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.FTPPORT
  is '¶Ë¿Ú';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.FTPPATH
  is 'µØÖ·';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.FTPUSERID
  is 'ÓÃ»§Ãû';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.FTPPASSWORD
  is 'ÃÜÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.UPLOADMERCHANTFTP.UPLOADTABLE
  is 'ÉÏ´«±í';

prompt
prompt Creating table USERINFO
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO
(
  LOGINNAME  VARCHAR2(50) not null,
  LOGINPWD   VARCHAR2(50) not null,
  USERTEL    VARCHAR2(20) not null,
  USERMAIL   VARCHAR2(50) not null,
  USERIDCARD VARCHAR2(20) default '',
  USERTYPE   INTEGER not null,
  YL1        VARCHAR2(1) default '',
  YL2        VARCHAR2(1) default '',
  YL3        VARCHAR2(1) default '',
  YL4        VARCHAR2(1) default '',
  YL5        VARCHAR2(1) default ''
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.LOGINNAME
  is 'µÇÂ¼Ãû';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.LOGINPWD
  is 'µÇÂ¼ÃÜÂë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.USERTEL
  is 'ÊÖ»ú';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.USERMAIL
  is 'ÓÊÏä';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.USERIDCARD
  is 'Éí·ÝÖ¤';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.USERTYPE
  is '1:³Ö¿¨ÓÃ»§,2:ÉÌ»§,3:ÖÕ¶Ë';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.YL1
  is 'Ô¤Áô1,±êÊ¶ÓÊÏäÊÇ·ñ¼¤»î';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.YL2
  is 'Ô¤Áô2';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.YL3
  is 'Ô¤Áô3';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.YL4
  is 'Ô¤Áô4';
comment on column OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO.YL5
  is 'Ô¤Áô5';
alter table OPS$YUFU_CHINA_PS_RUN_BAK.USERINFO
  add primary key (LOGINNAME)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table USERINFOWEBPAY
prompt =============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USERINFOWEBPAY
(
  ID                     NUMBER(20) not null,
  USERNAME               VARCHAR2(20),
  PHONE                  VARCHAR2(32),
  EMAIL                  VARCHAR2(70),
  CARD                   VARCHAR2(30),
  USERLOGINPWD           VARCHAR2(200),
  USERPAYPWD             VARCHAR2(200),
  TRUENAME               VARCHAR2(20),
  IDENTITYCARD           VARCHAR2(70),
  LOGNUMBERIME           DATE,
  REGISTERIP             VARCHAR2(19),
  LASTLOGINIP            VARCHAR2(19),
  COUNTRY                VARCHAR2(20),
  PROVINCE               VARCHAR2(10),
  CITY                   VARCHAR2(15),
  SEX                    NUMBER,
  BIRTHDAY               DATE,
  ISENTERPRISE           NUMBER,
  ERRORTIME              DATE,
  ERRORCOUNT             NUMBER,
  STATE                  NUMBER,
  REGISTERTIME           DATE,
  IDCARDAUTHENTICATETIME DATE,
  LOGNUMBERIMES          NUMBER,
  USERTRADEPWD           VARCHAR2(200),
  CARDSTATE              NUMBER,
  POSLOGINTIMES          NUMBER not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table USR
prompt ==================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USR
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ID             NUMBER(10) not null,
  PASSWORD       VARCHAR2(15),
  USR            VARCHAR2(15) not null,
  USRGRP         VARCHAR2(15) not null,
  DESCR          VARCHAR2(40) not null,
  CHGPASSWD      NUMBER(10) default 0 not null,
  PSWDSETDATE    DATE default sysdate,
  LSTLOGDATE     DATE default sysdate not null,
  LOCKED         NUMBER(10) default 0 not null,
  DEFAULT_LOCALE VARCHAR2(32) default ' ' not null,
  LSTLOGTIME     NUMBER(10) default 0 not null,
  UNSLOGDATE     DATE default sysdate not null,
  UNSLOGTIME     NUMBER(10) default 0 not null,
  EXTUSR         VARCHAR2(100 CHAR) not null,
  EMAIL_ADDRESS  VARCHAR2(64)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.USR
  add constraint UNQ_USR_EXTUSR unique (EXTUSR)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_USR on OPS$YUFU_CHINA_PS_RUN_BAK.USR (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table USRGRP
prompt =====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USRGRP
(
  ID        NUMBER(10) not null,
  VERNO_CTX NUMBER(10) default 1 not null,
  USRGRP    VARCHAR2(15) not null,
  DESCR     VARCHAR2(200 CHAR) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_USRGRP on OPS$YUFU_CHINA_PS_RUN_BAK.USRGRP (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table USRINST
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USRINST
(
  VERNO_CTX NUMBER(10) default 1 not null,
  USR       VARCHAR2(15) not null,
  INST_ID   NUMBER(10) default 0 not null,
  ID        NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_USRINST on OPS$YUFU_CHINA_PS_RUN_BAK.USRINST (USR, INST_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table USRPERM
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USRPERM
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACSITEM   VARCHAR2(15) not null,
  USR       VARCHAR2(15) not null,
  MASK      CHAR(1) not null,
  EXTPSWD   CHAR(1) not null,
  OPTAG     NUMBER(5) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table USR_BRANCH
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.USR_BRANCH
(
  ID        NUMBER(10) not null,
  VERNO_CTX NUMBER(10) default 1 not null,
  USER_ID   NUMBER(10) not null,
  BRANCH_ID NUMBER(10) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VCNREGISTINFO
prompt ============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VCNREGISTINFO
(
  VERNO_CTX    NUMBER(10) default 0 not null,
  ID           NUMBER(10) default 0 not null,
  MC_CRDPAN    VARCHAR2(19) default ' ' not null,
  MC_CRDDET_ID NUMBER(10) default 0 not null,
  MC_CRDSTAT   CHAR(2) default '  ' not null,
  EXPDATE      DATE,
  EFFDATE      DATE,
  ADDDATE      DATE not null,
  RESERVE_1    VARCHAR2(50) default ' ',
  RESERVE_2    VARCHAR2(50) default ' ',
  ENCRYPT_CVV2 VARCHAR2(16) default '0000000000000000',
  FLAG         CHAR(1) default '0' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.VCNREGISTINFO
  add constraint PK_VCNREGISTINFO primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.VCNREGISTINFO
  add constraint HASH_VCNREGISTINFO unique (MC_CRDPAN, MC_CRDDET_ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VCNRELATED
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VCNRELATED
(
  VERNO_CTX     NUMBER(10) default 0 not null,
  ID            NUMBER(10) default 0 not null,
  FU_CRDBTCH_ID NUMBER(10) default 0,
  FU_CRDPAN     VARCHAR2(20) default '',
  FU_CRDDET_ID  NUMBER(10) default 0,
  MC_CRDBTCH_ID NUMBER(10) default 0 not null,
  MC_CRDPAN     VARCHAR2(20) default '' not null,
  MC_CRDDET_ID  NUMBER(10) default 0 not null,
  MC_CRDSTAT    CHAR(2) default '  ' not null,
  EXPDATE       DATE,
  EFFDATE       DATE,
  ADDDATE       DATE not null,
  RESERVE_1     VARCHAR2(50) default ' ',
  RESERVE_2     VARCHAR2(50) default ' ',
  ENCRYPT_CVV2  VARCHAR2(16) default '0000000000000000',
  FLAG          CHAR(1) default '0' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.VCNRELATED
  add constraint PK_VCNRELATED primary key (ID)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.VCNRELATED
  add constraint HASH_VCNRELATED unique (FU_CRDPAN)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_VCNRELATED on OPS$YUFU_CHINA_PS_RUN_BAK.VCNRELATED (MC_CRDPAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VIDSPTXN
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN
(
  VERNO_CTX      NUMBER(10) default 1 not null,
  ID             NUMBER(10) not null,
  CBREF          NUMBER(10) not null,
  INST_ID        NUMBER(10) default 0 not null,
  ACCNO          VARCHAR2(28) not null,
  PAN            VARCHAR2(19) not null,
  SEQNO          NUMBER(5) not null,
  RRN            VARCHAR2(12) not null,
  AIID           VARCHAR2(11) not null,
  STAN           NUMBER(10) not null,
  DATE_TXN       DATE not null,
  AMTTXN         FLOAT not null,
  CURTXN         CHAR(3) not null,
  AMTBILL        FLOAT not null,
  CURBILL        CHAR(3) not null,
  SETFLAG        CHAR(1) not null,
  RET_REQ_DATE   DATE not null,
  RET_REQ_CODE   NUMBER(5) not null,
  RET_EXP_DATE   DATE not null,
  RET_REC_DATE   DATE not null,
  AMTCHB         FLOAT not null,
  CURCHB         CHAR(3) not null,
  NRET_CHB_DATE  DATE not null,
  NRET_REAS_CODE NUMBER(5) not null,
  NRET_EXP_DATE  DATE not null,
  FRST_CHB_DATE  DATE not null,
  FRST_CHB_REAS  NUMBER(5) not null,
  FRST_EXP_DATE  DATE not null,
  SCND_CHB_DATE  DATE not null,
  SCND_CHB_REAS  NUMBER(5) not null,
  SCND_EXP_DATE  DATE not null,
  REP_DATE       DATE not null,
  REP_REAS_CODE  NUMBER(5) not null,
  REP_EXP_DATE   DATE not null,
  SUSP_CR_DATE   DATE not null,
  DEF_CR_DATE    DATE not null,
  DATE_CHANGED   DATE not null,
  MEMO           CLOB
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VIDSPTXN on OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_VIDSPTXN_ACCNO on OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN (INST_ID, ACCNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_VIDSPTXN_AIID on OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN (AIID, RRN, PAN, DATE_TXN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_VIDSPTXN_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN (PAN, SEQNO)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VIEXPFILE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VIEXPFILE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  RRN       VARCHAR2(12) not null,
  INDATE    DATE not null,
  INTIME    NUMBER(10) not null,
  EXPDATE   DATE not null,
  VIRSPCODE CHAR(2) not null,
  CMD       CHAR(1) not null,
  REGION    VARCHAR2(8) not null,
  USERNM    VARCHAR2(15) not null,
  CRDSTAT   CHAR(2) not null,
  PURGEDATE DATE not null,
  AMTLIM    FLOAT not null,
  NUMLIM    NUMBER(5) not null,
  CRDDET_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create index OPS$YUFU_CHINA_PS_RUN_BAK.IDX_VIEXPFILE_PAN on OPS$YUFU_CHINA_PS_RUN_BAK.VIEXPFILE (CRDDET_ID, INDATE DESC, INTIME DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VIRAWDATA
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VIRAWDATA
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  DATESET     DATE not null,
  SIID        VARCHAR2(11) not null,
  COMPRESSION VARCHAR2(12) not null,
  RAWDATA     BLOB,
  DATATYPE    CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VISABIN
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VISABIN
(
  VERNO_CTX     NUMBER(10) default 1 not null,
  BIN           VARCHAR2(6) not null,
  PROCBIN       VARCHAR2(6) not null,
  REGION        NUMBER(5) not null,
  COUNTRYCODE   CHAR(2) not null,
  BINTYPE       CHAR(1) not null,
  PARTICIPATION CHAR(1) not null,
  TESTIND       CHAR(1) not null,
  OBOIND        CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VISABIN on OPS$YUFU_CHINA_PS_RUN_BAK.VISABIN (BIN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VISACRDBILL
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VISACRDBILL
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PANLOW    CHAR(19) not null,
  PANHIGH   CHAR(19) not null,
  CURBILL   CHAR(3) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VISACRDBILL on OPS$YUFU_CHINA_PS_RUN_BAK.VISACRDBILL (PANLOW, PANHIGH)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VISAPVV
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VISAPVV
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ID        NUMBER(10) not null,
  PAN       VARCHAR2(19) not null,
  SEQNO     NUMBER(5) not null,
  EXPDATE   DATE not null,
  PVV       VARCHAR2(4) not null,
  PVKI      CHAR(1) not null,
  DATEIN    DATE not null,
  TIMEIN    NUMBER(10) not null,
  CTXNEW    NUMBER(5) not null,
  DATESENT  DATE,
  TIMESENT  NUMBER(10),
  SENT      NUMBER(5) not null,
  ATTEMPTS  NUMBER(5) not null,
  ERRCODE   VARCHAR2(4) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VISAPVV on OPS$YUFU_CHINA_PS_RUN_BAK.VISAPVV (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VISAROUTE
prompt ========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VISAROUTE
(
  VERNO_CTX NUMBER(10) default 1 not null,
  ACLEN     VARCHAR2(2) not null,
  IIDLEN    VARCHAR2(2) not null,
  IID       VARCHAR2(12) not null,
  FROM_TYPE CHAR(1) not null,
  BIN_FLAG  CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VISAROUTE on OPS$YUFU_CHINA_PS_RUN_BAK.VISAROUTE (IIDLEN, IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_VISAROUTE_IID on OPS$YUFU_CHINA_PS_RUN_BAK.VISAROUTE (IID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VISATXTMSG
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VISATXTMSG
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  DATECPT     DATE not null,
  TIMECPT     NUMBER(10) not null,
  DATEXMIT    DATE not null,
  TIMEXMIT    NUMBER(10) not null,
  STAN        NUMBER(10) not null,
  RRN         VARCHAR2(12) not null,
  FIID        VARCHAR2(11) not null,
  FIIDCOUNTRY CHAR(3) not null,
  RIID        VARCHAR2(11) not null,
  RIIDCOUNTRY CHAR(3) not null,
  FNCODE      NUMBER(5) not null,
  TXTMSG      VARCHAR2(254) not null,
  RSPCODE     CHAR(2) not null,
  ORIGIN      CHAR(1) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VISATXTMSG on OPS$YUFU_CHINA_PS_RUN_BAK.VISATXTMSG (FIID, DATEXMIT, TIMEXMIT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.UNQ_VISATXTMSG_VITXTDATE on OPS$YUFU_CHINA_PS_RUN_BAK.VISATXTMSG (DATECPT DESC, TIMECPT DESC)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VPANDET
prompt ======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VPANDET
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(10) not null,
  VPAN_PROFILE_ID   NUMBER(10) not null,
  VPAN_BATCH_ID     NUMBER(10) not null,
  VPAN_STATUS_ID    NUMBER(10) not null,
  DATE_CREATED_ID   NUMBER(10) not null,
  DATE_EXTRACTED_ID NUMBER(10) not null,
  DATE_USED_ID      NUMBER(10) not null,
  PAN               VARCHAR2(19) not null,
  PAN_DISPLAY       VARCHAR2(19) not null,
  VPAN              VARCHAR2(19) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
alter table OPS$YUFU_CHINA_PS_RUN_BAK.VPANDET
  add constraint UNQ_VPANDET_VPAN unique (VPAN)
  using index 
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VPANDET on OPS$YUFU_CHINA_PS_RUN_BAK.VPANDET (PAN)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VPAN_BATCH
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_BATCH
(
  VERNO_CTX       NUMBER(10) default 1 not null,
  ID              NUMBER(10) not null,
  REQUESTED       NUMBER(10) not null,
  GENERATED       NUMBER(10) not null,
  BATCH_STATUS    NUMBER(5) not null,
  SOURCE          CHAR(1) not null,
  DT_START        VARCHAR2(17) not null,
  DT_END          VARCHAR2(17) not null,
  VPAN_PROFILE_ID NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VPAN_BATCH on OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_BATCH (ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VPAN_PROFILE
prompt ===========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_PROFILE
(
  VERNO_CTX        NUMBER(10) default 1 not null,
  ID               NUMBER(10) not null,
  CRDFORMAT_ID     NUMBER(10) default 0 not null,
  VPAN_PREFIX      VARCHAR2(11) not null,
  VPAN_SEQNO_ID    NUMBER(10) not null,
  MIN_THRESHOLD    NUMBER(10) default 0 not null,
  MAX_THRESHOLD    NUMBER(10) default 0 not null,
  DEFAULT_JOB_SIZE NUMBER(10) default 0 not null,
  ROUNDROBIN       NUMBER(5) not null,
  USELUHN          NUMBER(5) not null,
  DEFAULT_MAX_PANS NUMBER(10) not null,
  INST_ID          NUMBER(10) default 0 not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VPAN_PROFILE on OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_PROFILE (CRDFORMAT_ID)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VPAN_SEQNO
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_SEQNO
(
  VERNO_CTX    NUMBER(10) default 1 not null,
  ID           NUMBER(10) not null,
  NXTVPANSEQNO NUMBER(10) default 1 not null,
  DESCR        VARCHAR2(20) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VPAN_SEQNO on OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_SEQNO (DESCR)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VPAN_STATUS
prompt ==========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_STATUS
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  ID          NUMBER(10) not null,
  VPAN_STATUS NUMBER(5) not null,
  SHORT_DESCR VARCHAR2(10) not null,
  FULL_DESCR  VARCHAR2(80) not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VPAN_STATUS on OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_STATUS (VPAN_STATUS)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VRECTOTS
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VRECTOTS
(
  VERNO_CTX   NUMBER(10) default 1 not null,
  MSGTYP      NUMBER(5) not null,
  DATEXMIT    DATE not null,
  TIMEXMIT    INTEGER not null,
  STAN        INTEGER not null,
  DATESET     DATE not null,
  CURSET      CHAR(3) not null,
  RSPCODE     CHAR(2) not null,
  SIIDCOUNTRY CHAR(3) not null,
  FNCODE      NUMBER(5) not null,
  BATCH       NUMBER(10) not null,
  CREDNUM     INTEGER not null,
  CREDREVNUM  INTEGER not null,
  DEBNUM      INTEGER not null,
  DEBREVNUM   INTEGER not null,
  CREDAMT     FLOAT not null,
  CREDREVAMT  FLOAT not null,
  DEBAMT      FLOAT not null,
  DEBREVAMT   FLOAT not null,
  AMTNETSET   FLOAT not null,
  TOTTYP      CHAR(1) not null,
  SIID        VARCHAR2(11) not null,
  DATECPT     DATE not null,
  TIMECPT     INTEGER not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );
create unique index OPS$YUFU_CHINA_PS_RUN_BAK.HASH_VRECTOTS on OPS$YUFU_CHINA_PS_RUN_BAK.VRECTOTS (DATESET, SIID, CURSET, FNCODE, DATEXMIT, TIMEXMIT)
  tablespace CTXDB
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table VXFRTOTS
prompt =======================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.VXFRTOTS
(
  VERNO_CTX NUMBER(10) default 1 not null,
  IID       VARCHAR2(11) not null,
  DATEREC   DATE not null,
  TOTTYP    CHAR(1) not null,
  ACQGIVCNT NUMBER(5) not null,
  ACQGIVAMT FLOAT not null,
  ACQFEECNT NUMBER(5) not null,
  ACQFEEAMT FLOAT not null,
  ACQCHGCNT NUMBER(5) not null,
  ACQCHGAMT FLOAT not null,
  ISSGIVCNT NUMBER(5) not null,
  ISSGIVAMT FLOAT not null,
  ISSFEECNT NUMBER(5) not null,
  ISSFEEAMT FLOAT not null,
  ISSCHGCNT NUMBER(5) not null,
  ISSCHGAMT FLOAT not null,
  B2GIVCNT  NUMBER(5) not null,
  B2GIVAMT  FLOAT not null,
  B2FEECNT  NUMBER(5) not null,
  B2FEEAMT  FLOAT not null,
  B2CHGCNT  NUMBER(5) not null,
  B2CHGAMT  FLOAT not null,
  NETXFRAMT FLOAT not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table WANKE_SALES_NUM
prompt ==============================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.WANKE_SALES_NUM
(
  SALES_POINT      VARCHAR2(20) default '' not null,
  SALES_POINT_NAME VARCHAR2(200) default '' not null,
  SALES_WANKE_NUM  VARCHAR2(50) default '' not null,
  RESERVED1        VARCHAR2(100),
  RESERVED2        VARCHAR2(200),
  RESERVED3        VARCHAR2(200),
  RESERVED4        VARCHAR2(255),
  RESERVED5        VARCHAR2(255)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table WUHAO_TEST
prompt =========================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.WUHAO_TEST
(
  NAME CHAR(1024),
  AGE  INTEGER,
  ID   INTEGER
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table WULOG
prompt ====================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.WULOG
(
  VERNO_CTX         NUMBER(10) default 1 not null,
  ID                NUMBER(20) not null,
  TOPUPLOG_ID       NUMBER(10) default 0 not null,
  WHEN_CREATED      CHAR(17) default '22630831000000000' not null,
  STATUSCODE        VARCHAR2(4) default ' ' not null,
  STATUSMESSAGE     VARCHAR2(128) default ' ' not null,
  STATUSREFNO       VARCHAR2(48) default ' ' not null,
  DATETXN           DATE default to_date('2263-08-31','YYYY-MM-DD') not null,
  PAYMENTDIGEST     VARCHAR2(160) default ' ' not null,
  TXNDIGEST         VARCHAR2(80) default ' ' not null,
  TXNID             VARCHAR2(32) default ' ' not null,
  PICKUP_REF_NO     VARCHAR2(64) default ' ' not null,
  SENDER_FIRST_NAME VARCHAR2(64) default ' ' not null,
  SENDER_LAST_NAME  VARCHAR2(64) default ' ' not null,
  SENDER_COUNTRY    CHAR(3) default ' ' not null,
  ORG_COUNTRY       CHAR(3) default ' ' not null,
  ORG_CURRENCY      CHAR(3) default ' ' not null,
  ORG_PRINCIPAL_AMT FLOAT default 0.0 not null,
  ORG_GROSS_AMT     FLOAT default 0.0 not null,
  DST_COUNTRY       CHAR(3) default ' ' not null,
  DST_CURRENCY      CHAR(3) default ' ' not null,
  DST_EXPECTED_AMT  FLOAT default 0.0 not null,
  DST_ACTUAL_AMT    FLOAT default 0.0 not null,
  XRATE             FLOAT default 0.0 not null,
  AGENT_COUNTRY     CHAR(3) default ' ' not null,
  AGENT_CURRENCY    CHAR(3) default ' ' not null,
  AGENT_AMT         FLOAT default 0.0 not null,
  AGENT_XRATE       FLOAT default 0.0 not null,
  MESSAGE_1         VARCHAR2(700) default ' ' not null,
  MESSAGE_2         VARCHAR2(700) default ' ' not null,
  MESSAGE_3         VARCHAR2(700) default ' ' not null
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
  );

prompt
prompt Creating table YUFUPAYTRANSSTATISTICS
prompt =====================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.YUFUPAYTRANSSTATISTICS
(
  ID            NUMBER(10),
  YEAR          VARCHAR2(4),
  TRANSCOUNT    NUMBER(10),
  TRANSSUMMONEY NUMBER(15,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 8K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table YUFUPAYTRANSSTATISTICSMONTHS
prompt ===========================================
prompt
create table OPS$YUFU_CHINA_PS_RUN_BAK.YUFUPAYTRANSSTATISTICSMONTHS
(
  ID            NUMBER(10),
  YEARMONTHS    VARCHAR2(6),
  TRANSCOUNT    NUMBER(10),
  TRANSSUMMONEY NUMBER(15,2)
)
tablespace CTXDB
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    next 1M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating sequence ACCBALSLOG_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCBALSLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCDCSEQ_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCDCSEQ_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence ACCDET_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCDET_X_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCDET_X_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCEVENT_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCEVENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCITEMS_CHRGLNK_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS_CHRGLNK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCITEMS_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCITEMS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACCLOG_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACCLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACSITEM_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACSITEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACSLOG_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACSLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 8953
increment by 1
cache 20;

prompt
prompt Creating sequence ACTIVITY_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACTIVITY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACT_LOG_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACT_LOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ACT_PROC_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ACT_PROC_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AGGR_AGG_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_AGG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AGGR_DEF_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AGGR_DEF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AMXSEDEMO_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AMXSEDEMO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence APRVLCODE_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.APRVLCODE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence APRVLHIST_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.APRVLHIST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AREA_SEQUENCE
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AREA_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ATMSVCHST_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ATMSVCHST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AUDIT_ITEM_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AUDIT_ITEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AUTHCHECKREF_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AUTHCHECKREF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AUTHFINRECON_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AUTHFINRECON_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AUTHOVERLOG_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AUTHOVERLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence AUTO_ADD
prompt ==========================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.AUTO_ADD
minvalue 1
maxvalue 9999999999999999999999999999
start with 467178
increment by 1
cache 2;

prompt
prompt Creating sequence BALUPDERR_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDERR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BALUPDLOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BALUPDLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BARCODE_CONTEXT_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_CONTEXT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BARCODE_REF_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_REF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BARCODE_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BARCODE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BATCHCRDINFO_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BATCHCRDINFO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BATCHSUBTASK_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BATCHSUBTASK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BATCHTASK_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BATCHTASK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BIN_RANGE_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BIN_RANGE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence BRANCH_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.BRANCH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CACENT_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CACENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CACOPN_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CACOPN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CASHINBATCH_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CASHINBATCH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ACCTMRKUP_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTMRKUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ACCTRISK_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACCTRISK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ACQRISK_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ACQRISK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_CRDISS_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CRDISS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_CUSTSEG_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_CUSTSEG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ISSCOMM_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCOMM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ISSCYCFEE_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSCYCFEE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ISSFEE_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSFEE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ISSRISKCNTRL_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISKCNTRL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CAT_ISSRISK_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CAT_ISSRISK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCAPPL_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCAPPL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSACCDET_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSACCEVENT_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSACCEVENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSAPPRULE_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSAPPRULE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSBKITEMCFG_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEMCFG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSBKITEM_BKGROUP_SEQUENCE
prompt ============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEM_BKGROUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSBKITEM_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSBKITEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSITEMREF_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEMREF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSITEM_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSITEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPAYPLAN_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPAYPLAN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPPPROG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPPROG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPPSETAMT_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETAMT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPPSETNUMINST_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETNUMINST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPPSETRATE_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSETRATE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSPPSET_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSPPSET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSRECONSTATS_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSRECONSTATS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSSTATEMENT_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSSTATEMENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CCSUPLOAD_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CCSUPLOAD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CDSTHST1_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CDSTHST1_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CERTIFICATE_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CERTIFICATE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CHARGEDATA_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CHARGEDATA_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CHARGELOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CHARGELOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CHGCRD_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CHGCRD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CLMAGFMT_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CLMAGFMT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CO_CONTEXT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CO_CONTEXT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CO_EXE_NAME_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CO_EXE_NAME_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CO_SERVICE_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CO_SERVICE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDACCUPL_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDACCUPL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 74305
increment by 1
cache 20;

prompt
prompt Creating sequence CRDAUTHOVER_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDAUTHOVER_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDDESIGN_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDDESIGN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDDET_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDDET_X_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDDET_X_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_ACTLNK_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_ACTLNK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_DATALOG_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_DATALOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_EXTAUTH_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_EXTAUTH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_PINTYP_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_PINTYP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEVENT_USRLOG_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEVENT_USRLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDEV_STHSTLK_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDEV_STHSTLK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDFORMAT_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDFORMAT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDINFO_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDINFO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDLIMOVER_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDLIMOVER_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDMODLOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDMODLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 83503
increment by 1
cache 20;

prompt
prompt Creating sequence CRDMRCHB_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDMRCHB_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDNOTIFY_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDNOTIFY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDPRODPINTYP_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODPINTYP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDPRODUCT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDPRODUCT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDPROGRAM_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDPROGRAM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDSTATUSTRANSSET_SEQUENCE
prompt ============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANSSET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDSTATUSTRANS_SEQUENCE
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDSTATUSTRANS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDSUPDOC_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDSUPDOC_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDTELNOTE_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDTELNOTE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CRDTRACKFORMAT_SEQUENCE
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CRDTRACKFORMAT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CUPSCRDBILL_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUPSCRDBILL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CUPSPVV_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUPSPVV_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CUSTCODE_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUSTCODE_SEQUENCE
minvalue 1
maxvalue 999999999999
start with 100000000001
increment by 1
nocache;

prompt
prompt Creating sequence CUSTCRD_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUSTCRD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CUSTDET_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUSTDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 102229
increment by 1
cache 20;

prompt
prompt Creating sequence CUSTLOGIN_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CUSTLOGIN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence CYCLEDET_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.CYCLEDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence DATABASESYCN_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DATABASESYCN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1391
increment by 1
cache 20;

prompt
prompt Creating sequence DATE_DIM_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DATE_DIM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence DBAUDIT_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DBAUDIT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence DCC_CURR_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DCC_CURR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence DVCEVDET_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DVCEVDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence DVCEV_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.DVCEV_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence EMVCMDLOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.EMVCMDLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence ENCKEY_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.ENCKEY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence EPSTATS_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.EPSTATS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence EVLOG_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.EVLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FC_CARDTYPECYCLE_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FC_CARDTYPECYCLE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FC_CHARGEDET_OVRD_SEQUENCE
prompt ============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_OVRD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FC_CHARGEDET_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FC_CHARGEDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FDSRULES_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FDSRULES_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FDSUPLOAD_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FDSUPLOAD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FILEIMPHIST_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FILEIMPHIST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence FOREX_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.FOREX_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence INST_SEQUENCE
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.INST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence LCG_RANDOM_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.LCG_RANDOM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence LOCALDEF_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.LOCALDEF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence LOGINLOG_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.LOGINLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 101
increment by 1
cache 10;

prompt
prompt Creating sequence MARKUPDEF_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MARKUPDEF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MCCGROUPS_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MCCGROUPS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MERCHANT_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MRCHACCENT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCENT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MRCHACCITM_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCITM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MRCHACCOPN_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MRCHACCOPN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MRCHDRCR_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MRCHDRCR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MRCH_ACC_X_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.MRCH_ACC_X_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence NOTEMIXW_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTEMIXW_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence NOTIFMSG_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFMSG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence NOTIFYDEF_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYDEF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence NOTIFYFLDS_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYFLDS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence NOTIFYLOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence NOTIFYLOG_TLOG_LINK_SEQUENCE
prompt ==============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.NOTIFYLOG_TLOG_LINK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence OPENCRDBATCH_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.OPENCRDBATCH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PANMAP_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PANMAP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence POSINSTLMNT_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.POSINSTLMNT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence POSNONRECLOG_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.POSNONRECLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence POSPREAUTH_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.POSPREAUTH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence POSSCHED_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.POSSCHED_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PREAUTHBLK_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PREAUTHBLK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_CFGNM_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_CFGNM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_DEFR_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEFR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_DEF_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DEF_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_DFLTVAL_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_DFLTVAL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_ELEMR_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEMR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_ELEM_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ELEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_ENTITY_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_ENTITY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_STRUCTNM_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_STRUCTNM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_VALS_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRM_VALUE_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRM_VALUE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRNTTXNLOG_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRNTTXNLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRT_CM_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRT_CM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PRT_PARTY_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.PRT_PARTY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 62141
increment by 1
cache 20;

prompt
prompt Creating sequence QDATA_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.QDATA_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence QINFO_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.QINFO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence REDEEMBAL_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.REDEEMBAL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence REFUND_INFO_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.REFUND_INFO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence REGISTERINFO_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.REGISTERINFO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 10;

prompt
prompt Creating sequence RENEWCRD_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RENEWCRD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RE_ATTR_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RE_ATTR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RE_CONTEXT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RE_CONTEXT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RE_EXPR_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RE_EXPR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RISKPROFILE_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RISKPROFILE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RSAKEY_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RSAKEY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RSASIG_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RSASIG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_ATOM_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_ATOM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_CONTEXT_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_CONTEXT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_DIMENSION_SEQUENCE
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMENSION_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_DIMLVLLINK_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMLVLLINK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_DIMVALUE_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVALUE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_DIMVAL_SCOPEKEY_SEQUENCE
prompt ===============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_DIMVAL_SCOPEKEY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_EVALDIMLINK_SEQUENCE
prompt ===========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALDIMLINK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_EVALRULELINK_SEQUENCE
prompt ============================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALRULELINK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_EVALSET_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_EVALSET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence RULE_RULE_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.RULE_RULE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SALESTLOG_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SALESTLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence SCREENFIELD_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SCREENFIELD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_CLEAR_CARD_JUNL_ID
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_CLEAR_CARD_JUNL_ID
minvalue 1
maxvalue 999999999999
start with 71399
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_MERCHANT_FENRUN_ORG
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_MERCHANT_FENRUN_ORG
minvalue 1
maxvalue 999999999
start with 1
increment by 1
cache 10
cycle;

prompt
prompt Creating sequence SEQ_MONEMPLOYEE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_MONEMPLOYEE
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_MONLOGINFO
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_MONLOGINFO
minvalue 1
maxvalue 9999999999999999999999999999
start with 81
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_MONMARKETINFO
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_MONMARKETINFO
minvalue 1
maxvalue 9999999999999999999999999999
start with 10151
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_MONPROVINCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.SEQ_MONPROVINCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 301
increment by 1
cache 20;

prompt
prompt Creating sequence STAN_SEQUENCE
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.STAN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence STMT_FORMAT_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.STMT_FORMAT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence S_CARDKAR_ID
prompt ==============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_CARDKAR_ID
minvalue 1
maxvalue 9999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence S_SUBACCTRANS_ID
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_SUBACCTRANS_ID
minvalue 1
maxvalue 9999999999999999999999999
start with 95867
increment by 1
cache 20
order;

prompt
prompt Creating sequence S_S_YFPAYTRANS
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_S_YFPAYTRANS
minvalue 1
maxvalue 999999999999999
start with 882
increment by 1
cache 20
order;

prompt
prompt Creating sequence S_TRANSATIONWATER_PK
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_TRANSATIONWATER_PK
minvalue 1
maxvalue 9999999999999999999999999999
start with 100970
increment by 1
cache 20;

prompt
prompt Creating sequence S_TRANSRECORDS_ID
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_TRANSRECORDS_ID
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence S_TRANSR_ID
prompt =============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_TRANSR_ID
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20
cycle
order;

prompt
prompt Creating sequence S_USERINFO_PK
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.S_USERINFO_PK
minvalue 1
maxvalue 9999999999999999999999999999
start with 102021
increment by 1
cache 20;

prompt
prompt Creating sequence TERMATM_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TERMATM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TERMPOS_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TERMPOS_X_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TERMPOS_X_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence THRESHOLD_OVRD_SEQUENCE
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_OVRD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence THRESHOLD_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence THRESHOLD_SET_SEQUENCE
prompt ========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.THRESHOLD_SET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TLOGEXPORT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXPORT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TLOGEXTRACTLOG_SEQUENCE
prompt =========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOGEXTRACTLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TLOGLNKTXN_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOGLNKTXN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TLOGLNK_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOGLNK_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TLOGZX_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOGZX_SEQUENCE
minvalue 1
maxvalue 99999999999999999999
start with 1
increment by 1
cache 10
cycle
order;

prompt
prompt Creating sequence TLOG_SEQUENCE
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 246
increment by 1
cache 20;

prompt
prompt Creating sequence TOPUPDUMP_SEQUENCE
prompt ====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPDUMP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TOPUPLOG_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TOPUPLOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TRANSACTIONDICTIONARY_ID
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONDICTIONARY_ID
minvalue 1
maxvalue 9999999999999999999999999999
start with 55
increment by 1
cache 2;

prompt
prompt Creating sequence TSRS_SEQUENCE
prompt ===============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TSRS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 119485
increment by 1
cache 10;

prompt
prompt Creating sequence TU_COMPANY_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TU_COMPANY_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TU_PAYMENT_ITEM_SEQUENCE
prompt ==========================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TU_PAYMENT_ITEM_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TU_PRODUCT_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.TU_PRODUCT_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence UPLOAD_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.UPLOAD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence USRGRP_SEQUENCE
prompt =================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.USRGRP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence USRINST_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.USRINST_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence USR_BRANCH_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.USR_BRANCH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence USR_SEQUENCE
prompt ==============================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.USR_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VIDSPTXN_SEQUENCE
prompt ===================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VIDSPTXN_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VISACRDBILL_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VISACRDBILL_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VISAPVV_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VISAPVV_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VPANDET_SEQUENCE
prompt ==================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VPANDET_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VPAN_BATCH_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_BATCH_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VPAN_PROFILE_SEQUENCE
prompt =======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_PROFILE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VPAN_SEQNO_SEQUENCE
prompt =====================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_SEQNO_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence VPAN_STATUS_SEQUENCE
prompt ======================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.VPAN_STATUS_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence WULOG_SEQUENCE
prompt ================================
prompt
create sequence OPS$YUFU_CHINA_PS_RUN_BAK.WULOG_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating view ATMRPLNVIEW
prompt =========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.atmrplnview as
select B.termcode||A.replendate||A.replentime as atmreplenPK, B.termcode, A.replendate, A.replentype, I.instcode,
       BR.brncode, A.replentime, B.termno, A.tseq,A.cass1dnom, A.cass1load, A.cass1disp, A.cass1rem,
       A.cass2dnom, A.cass2load, A.cass2disp, A.cass2rem,A.cass3dnom, A.cass3load, A.cass3disp, A.cass3rem,
       A.cass4dnom, A.cass4load, A.cass4disp, A.cass4rem, 0 AS bnaload, 0 AS bnasum
    from ATMRPLN A, TERMATM B, BRANCH BR, INST I
    where A.termatm_id = B.id
    and A.REPLENTYPE in ('a','A','f','F')
    and B.branch_id = BR.id
    and BR.inst_id = I.id
  union
  select B.termcode||A.rplndate||A.rplntime as atmreplenPK, B.termcode, A.rplndate AS replendate, 'B' AS replentype,
       I.instcode, BR.brncode, A.rplntime AS replentime, B.termno, A.tseq, 0 AS cass1dnom, 0 AS cass1load, 0 AS cass1disp, 0 AS cass1rem,
       0 AS cass2dnom, 0 AS cass2load, 0 AS cass2disp, 0 AS cass2rem, 0 AS cass3dnom, 0 AS cass3load, 0 AS cass3disp, 0 AS cass3rem,
       0 AS cass4dnom, 0 AS cass4load, 0 AS cass4disp, 0 AS cass4rem, A.origload as bnaload,
       (select sum(C.origload * D.denom) from ATMADRPLN C, ATMNOTEID D where C.tseq = A.tseq AND C.noteid = D.noteid) AS bnasum
    from ATMADRPLN A, TERMATM B, BRANCH BR, INST I
    where A.termatm_id = B.id
    and B.branch_id = BR.id
    and BR.inst_id = I.id
    and A.origload<>0 and A.newload=0 and ecblevel=0 and noteid=0;

prompt
prompt Creating view CORPACC
prompt =====================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.corpacc as
select distinct a.inst_id , c.pan,c.seqno , a.accno, a.currcode
from corpcrdlnk l, crddet c, accdet a
where c.id = l.pri_crddet_id
and c.accdet_id = a.id;

prompt
prompt Creating view CORPAMTS
prompt ======================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.corpamts
(inst_id, corppan, corpseq, corpacc, currcode, cash_amt_td, cash_num_td, purch_amt_td, purch_num_td)
as
select  a2.inst_id, corp.pan,
corp.seqno, a2.accno, a2.currcode,
sum(cash_amt_td), sum(cash_num_td),
sum(purch_amt_td), sum(purch_num_td)
from crddet corp, corpacc c , acclimit l, accdet a, accdet a2
where corp.pan = c.pan
and   corp.seqno = c.seqno
and   a2.inst_id = c.inst_id
and   l.accdet_id  = a.id
and   c.accno  = a.accno
and   c.inst_id = a.inst_id
and   corp.accdet_id  = a2.id
group by a2.inst_id ,corp.pan, corp.seqno,
a2.accno, a2.currcode;

prompt
prompt Creating view CORPFINBAL
prompt ========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.corpfinbal
(inst_id, corppan, corpseq, corpacc, currcode, finbal)
as
select  a2.inst_id, c.pan, c.seqno,
a2.accno, a2.currcode, sum(l.avlbal    )
from corpacc c, crddet corp, accdet   l, accdet a2
where corp.pan = c.pan
and   corp.seqno = c.seqno
and   a2.inst_id = c.inst_id
and   c.accno  = l.accno
and   c.inst_id = l.inst_id
and   c.currcode = l.currcode
and   corp.accdet_id  = a2.id
group by a2.inst_id ,c.pan, c.seqno,
a2.accno, a2.currcode;

prompt
prompt Creating view CORPLIMITS
prompt ========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.corplimits
(inst_id, corppan, corpseq, corpacc, currcode, cashlim_amt, cashlim_num, purchlim_amt, purchlim_num, totlim_amt, totlim_num)
as
select  a2.inst_id, corp.pan, corp.seqno,
a2.accno, a2.currcode,
sum(cashlim_amt), sum(cashlim_num), sum(purchlim_amt), sum(purchlim_num),
sum(totlim_amt), sum(totlim_num)
from crddet corp, corpacc c, acclimit l, accdet a, accdet a2
where corp.pan = c.pan
and   corp.seqno = c.seqno
and   a2.inst_id = c.inst_id
and   l.accdet_id  = a.id
and   c.accno  = a.accno
and   c.inst_id = a.inst_id
and   corp.accdet_id  = a2.id
group by a2.inst_id ,corp.pan,
corp.seqno, a2.accno, a2.currcode;

prompt
prompt Creating view CRDRTEVIEW
prompt ========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.crdrteview
(iid, iidlen)
as
select x0.iid ,LENGTH (x0.iid )
from crdrouting x0;

prompt
prompt Creating view MENUELEMENT
prompt =========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.menuelement
(usrgrp, mitem, acsitem, morder, acstype, title, title_lang)
as
select m.usrgrp, m.mitem, m.acsitem, m.morder, m.acstype, d.descr, d.lang
		from menu m left join descr d
					on d.descrtag = m.descrtag;

prompt
prompt Creating view PANNAME
prompt =====================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.panname as
select x0.pan ,x0.seqno ,x1.inst_id ,x1.custcode ,x1.firstname,x1.lastname ,x0.date_birth ,x0.statcode ,x0.expdate ,x0.embossname, x0.pan_display, x0.iss_host_code, x0.iss_host_crdref
from crddet x0 ,custdet x1
where (((x0.custdet_id = x1.id ) )
AND (x0.seqno = (select max(x2.seqno ) from crddet x2 where (x2.pan = x0.pan ) ) ) )
with check option;

prompt
prompt Creating view PCODEVIEW
prompt =======================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.pcodeview
(pan, seqno, instcode, brncode, effdate, corp, custcode, firstname, lastname, city, postcode, po_box, batch, status, crdproduct, embossname, addrind, pinsmade)
as
select a.pan, a.seqno, i.instcode, br.brncode, a.effdate, a.corp,
b.custcode, b.firstname, b.lastname,
CASE
    WHEN c.city || '' != '' and c.addrl || '' != ''  THEN  CASE
                                                                                        WHEN c.purgedate >= SYSDATE and c.indate <= SYSDATE   THEN c.city
                                                                                        ELSE
                                                                                            CASE
                                                                                                 WHEN a.addrind = 0 THEN b.home_city
                                                                                                 WHEN a.addrind = 1 THEN  c.city
                                                                                                 WHEN a.addrind = 2 THEN CASE WHEN (b.work_addr1 || '' != '' and b.work_city || '' != '') THEN b.work_city ELSE b.home_city END
                                                                                                 ELSE ''
                                                                                            END
                                                                                       END
   ELSE
         CASE
             WHEN a.addrind = 0 THEN b.home_city
             WHEN a.addrind = 1 THEN CASE WHEN  (c.city || '' != '' and c.addrl || '' != '') THEN c.city ELSE b.home_city END
             WHEN a.addrind = 2 THEN CASE WHEN (b.work_addr1 || '' != '' and b.work_city || '' != '') THEN b.work_city ELSE b.home_city END
             ELSE ''
        END
END,
CASE
    WHEN c.city || '' != '' and c.addrl || '' != ''  THEN  CASE
                                                                                        WHEN c.purgedate >= SYSDATE and c.indate <= SYSDATE   THEN c.postcode
                                                                                        ELSE
                                                                                           CASE
                                                                                                WHEN a.addrind = 0 THEN b.postcode
                                                                                                WHEN a.addrind = 1 THEN c.city
     												WHEN a.addrind = 2 THEN CASE WHEN (b.work_addr1 || '' != '' and b.work_city || '' != '') THEN b.work_postcode ELSE b.postcode END
												ELSE ''
                                                                                            END
                                                                                       END
   ELSE
         CASE
	     WHEN a.addrind = 0 THEN b.postcode
     	     WHEN a.addrind = 1 THEN CASE WHEN  (c.city || '' != '' and c.addrl || '' != '') THEN c.postcode ELSE b.postcode END
     	     WHEN a.addrind = 2 THEN CASE WHEN (b.work_addr1 || '' != '' and b.work_city || '' != '') THEN b.work_postcode ELSE b.postcode END
             ELSE ''
        END
END,
b.po_box, d.batch, d.status , cpdt.crdproduct ,
case
when a.corp  not in ('0','2','4') THEN p.embossname
else a.embossname
end,
a.addrind,
a.pinsmade
FROM CRDDET a
INNER JOIN CUSTDET b
ON a.custdet_id = b.id
INNER JOIN BRANCH br
ON a.branch_id = br.id
INNER JOIN INST i
ON i.id= br.inst_id
INNER JOIN CRDPRODUCT cpdt
ON a.crdproduct_id = cpdt.id
INNER JOIN CRDBTCH d
ON a.batch = d.batch
LEFT OUTER JOIN ADDROVER c
ON b.id = c.custdet_id
LEFT OUTER JOIN CORPCRDLNK l
on a.id = l.crddet_id LEFT OUTER JOIN CRDDET p
on l.pri_crddet_id = p.ID
with check option;

prompt
prompt Creating view PCODEVIEW_BRANCH
prompt ==============================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.PCODEVIEW_BRANCH
(pan, seqno, instcode, brncode, effdate, corp, custcode, firstname, lastname, city, postcode, po_box, batch, status, crdproduct, embossname, addrind, pinsmade, branch_id, crddet_id)
AS
SELECT crd.pan
          , crd.seqno
	      , i.instcode
	      , br.brncode
   	      , crd.effdate
	      , crd.corp
	      , cust.custcode
	      , crd.firstname
	      , crd.lastname
	      , br.city
	      , br.postcode
	      , br.addrl1
	      , d.batch
	      , d.status
	      , cpdt.crdproduct
	      , crd.embossname
	      , crd.addrind
	      , crd.pinsmade
	      , br.id
	      , crd.id
  FROM CRDDET crd
     INNER JOIN CUSTDET cust
	 ON crd.custdet_id = cust.id
	 INNER JOIN CRDBTCH d
	 ON crd.batch = d.batch
	 INNER JOIN CRDPRODUCT cpdt
	 ON crd.crdproduct_id = cpdt.id
     INNER JOIN CRDFORMAT cf
	 ON cpdt.crdformat_id = cf.id
     INNER JOIN INST i
     ON i.id = cf.inst_id
     LEFT OUTER JOIN BRANCH br
	 ON (  ((crd.deliv_brncode is null OR substr(crd.deliv_brncode,1,1) =  ' ') AND crd.branch_id = br.id)
        OR ((crd.deliv_brncode is not null AND substr(crd.deliv_brncode,1,1) <> ' ') AND crd.deliv_brncode = br.brncode AND br.inst_id = cf.inst_id)
        )
  WITH CHECK OPTION;

prompt
prompt Creating function GET_ADDS_EMAIL_TEL_CM_ID
prompt ==========================================
prompt
CREATE OR REPLACE FUNCTION OPS$YUFU_CHINA_PS_RUN_BAK.get_adds_email_tel_cm_id (i_crddet_id	crddet.id%TYPE DEFAULT NULL,
						i_cmpt_id		prt_cmpt.id%TYPE,
						i_tab_nm		VARCHAR2,
						i_custdet_id	custdet.id%TYPE DEFAULT NULL)
RETURN NUMBER
IS
	r_cm_id	prt_cm.id%TYPE :=0 ;
	quary_str	VARCHAR2(5000);
	v_cmpt_dft_id	prt_cmpt.id%TYPE;
BEGIN
	IF	LENGTH(TO_CHAR(i_cmpt_id)) >= 4 THEN
		v_cmpt_dft_id := TO_NUMBER(SUBSTR(TO_CHAR(i_cmpt_id), 1, 2) || '00');
	ELSE
		v_cmpt_dft_id := 0;
	END IF;

	IF i_crddet_id IS NOT NULL AND i_crddet_id != 0 THEN
		BEGIN
			quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
				from '|| i_tab_nm || ',
				prt_pcm,
				prt_pcmp,
				prt_pcmp_media,
				prt_person,
				prt_cmpt,
				prt_prt,
				prt_cmt,
				custdet c,
				inst i,
				crddet crd
			where	c.inst_id = i.id
			and	prt_person.custdet_id = c.id
			and prt_pcm.prt_prt_id = prt_prt.id
			and prt_pcm.prt_party_id = prt_person.prt_party_id
			and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
			and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
			and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
			and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
			and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
			and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
			and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
			and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
			and prt_pcmp_media.mediatype_id = 0
			and prt_pcmp_media.prt_cmpt_id = prt_pcmp.prt_cmpt_id
			and prt_pcmp_media.prt_party_id = prt_pcmp.prt_party_id
			and prt_pcmp_media.prt_cm_id = prt_pcmp.prt_cm_id
			and prt_pcmp_media.prt_cmt_id = prt_pcmp.prt_cmt_id
			and prt_pcmp_media.media_id = crd.id
			and prt_pcmp_media.prt_prt_id = prt_pcmp.prt_prt_id
			and prt_pcmp_media.prt_pcm_from_date = prt_pcmp.prt_pcm_from_date
			and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
			and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
			and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
			and prt_pcm.from_date <= (select trunc(sysdate) from dual)
			and prt_pcm.until_date >= (select trunc(sysdate) from dual)
			and prt_pcmp.from_date = (select max(prt_pcmp_from_date) from prt_pcmp_media t
						where prt_pcmp_media.mediatype_id = t.mediatype_id
						and prt_pcmp_media.prt_cmpt_id = t.prt_cmpt_id
						and prt_pcmp_media.prt_party_id = t.prt_party_id
						and prt_pcmp_media.prt_cm_id = t.prt_cm_id
						and prt_pcmp_media.prt_cmt_id = t.prt_cmt_id
						and prt_pcmp_media.media_id = t.media_id
						and prt_pcmp_media.prt_prt_id = t.prt_prt_id
										group by t.media_id, t.prt_cmpt_id)
			and prt_pcmp.usage_type_id = 0
			and	prt_pcmp.prt_cmpt_id = '|| i_cmpt_id ||'
			and	crd.id = '|| i_crddet_id;

			EXECUTE IMMEDIATE quary_str INTO r_cm_id;
		  RETURN r_cm_id;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			BEGIN
				quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
					from '|| i_tab_nm || ',
					prt_pcm,
					prt_pcmp,
					prt_pcmp_media,
					prt_person,
					prt_cmpt,
					prt_prt,
					prt_cmt,
					custdet c,
					inst i,
					crddet crd
				where	c.inst_id = i.id
				and	prt_person.custdet_id = c.id
				and prt_pcm.prt_prt_id = prt_prt.id
				and prt_pcm.prt_party_id = prt_person.prt_party_id
				and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
				and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
				and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
				and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
				and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
				and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
				and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
				and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
				and prt_pcmp_media.mediatype_id = 0
				and prt_pcmp_media.prt_cmpt_id = prt_pcmp.prt_cmpt_id
				and prt_pcmp_media.prt_party_id = prt_pcmp.prt_party_id
				and prt_pcmp_media.prt_cm_id = prt_pcmp.prt_cm_id
				and prt_pcmp_media.prt_cmt_id = prt_pcmp.prt_cmt_id
				and prt_pcmp_media.media_id = crd.id
				and prt_pcmp_media.prt_prt_id = prt_pcmp.prt_prt_id
				and prt_pcmp_media.prt_pcm_from_date = prt_pcmp.prt_pcm_from_date
				and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
				and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
				and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
				and prt_pcm.from_date <= (select trunc(sysdate) from dual)
				and prt_pcm.until_date >= (select trunc(sysdate) from dual)
				and prt_pcmp.usage_type_id = 0
				and	prt_pcmp.prt_cmpt_id = '|| v_cmpt_dft_id ||'
				and	crd.id = '|| i_crddet_id;

				EXECUTE IMMEDIATE quary_str INTO r_cm_id;
				RETURN r_cm_id;
			EXCEPTION WHEN NO_DATA_FOUND THEN
				BEGIN
					quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
						from '|| i_tab_nm || ',
						prt_pcm,
						prt_pcmp,
						prt_person,
						prt_cmpt,
						prt_prt,
						prt_cmt,
						custdet c,
						inst i,
						crddet crd
					where	c.inst_id = i.id
					and	crd.custdet_id = c.id
					and	prt_person.custdet_id = c.id
					and prt_pcm.prt_prt_id = prt_prt.id
					and prt_pcm.prt_party_id = prt_person.prt_party_id
					and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
					and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
					and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
					and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
					and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
					and prt_pcmp.prt_cmpt_id = prt_cmpt.id
					and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
					and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
					and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
					and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
					and prt_pcm.from_date <= (select trunc(sysdate) from dual)
					and prt_pcm.until_date >= (select trunc(sysdate) from dual)
					and prt_pcmp.from_date = (select max(from_date) from prt_pcmp t
											where prt_pcmp.prt_cmpt_id = t.prt_cmpt_id
											and prt_pcmp.prt_party_id = t.prt_party_id
											and prt_pcmp.prt_cm_id = t.prt_cm_id
											and prt_pcmp.prt_cmt_id = t.prt_cmt_id
											and prt_pcmp.prt_prt_id = t.prt_prt_id
											group by t.prt_party_id, t.prt_cmpt_id)
					and prt_pcmp.usage_type_id <> 0
					and	prt_pcmp.prt_cmpt_id = '|| i_cmpt_id ||'
					and	crd.id = '|| i_crddet_id;

					EXECUTE IMMEDIATE quary_str INTO r_cm_id;
					RETURN r_cm_id;
				EXCEPTION WHEN NO_DATA_FOUND THEN
					BEGIN
						quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
							from '|| i_tab_nm || ',
							prt_pcm,
							prt_pcmp,
							prt_person,
							prt_cmpt,
							prt_prt,
							prt_cmt,
							custdet c,
							inst i,
							crddet crd
						where	c.inst_id = i.id
						and	crd.custdet_id = c.id
						and	prt_person.custdet_id = c.id
						and prt_pcm.prt_prt_id = prt_prt.id
						and prt_pcm.prt_party_id = prt_person.prt_party_id
						and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
						and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
						and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
						and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
						and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
						and prt_pcmp.prt_cmpt_id = prt_cmpt.id
						and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
						and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
						and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
						and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
						and prt_pcm.from_date <= (select trunc(sysdate) from dual)
						and prt_pcm.until_date >= (select trunc(sysdate) from dual)
						and prt_pcmp.usage_type_id <> 0
						and	prt_pcmp.prt_cmpt_id = '|| v_cmpt_dft_id ||'
						and	crd.id = '|| i_crddet_id;

						EXECUTE IMMEDIATE quary_str INTO r_cm_id;
						RETURN r_cm_id;
					EXCEPTION WHEN OTHERS THEN
						RETURN 0;
					END;
				WHEN OTHERS THEN
					RETURN 0;
				END;
			WHEN OTHERS THEN
				RETURN 0;
			END;
		WHEN OTHERS THEN
			RETURN 0;
		END;
	ELSE
		IF i_custdet_id IS NOT NULL AND i_custdet_id != 0 THEN
			BEGIN
				quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
					from '|| i_tab_nm || ',
					prt_pcm,
					prt_pcmp,
					prt_person,
					prt_cmpt,
					prt_prt,
					prt_cmt,
					custdet c,
					inst i
				where	c.inst_id = i.id
				and	prt_person.custdet_id = c.id
				and prt_pcm.prt_prt_id = prt_prt.id
				and prt_pcm.prt_party_id = prt_person.prt_party_id
				and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
				and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
				and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
				and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
				and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
				and prt_pcmp.prt_cmpt_id = prt_cmpt.id
				and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
				and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
				and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
				and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
				and prt_pcm.from_date <= (select trunc(sysdate) from dual)
				and prt_pcm.until_date >= (select trunc(sysdate) from dual)
				and prt_pcmp.from_date = (select max(from_date) from prt_pcmp t
										where prt_pcmp.prt_cmpt_id = t.prt_cmpt_id
										and prt_pcmp.prt_party_id = t.prt_party_id
										and prt_pcmp.prt_cm_id = t.prt_cm_id
										and prt_pcmp.prt_cmt_id = t.prt_cmt_id
										and prt_pcmp.prt_prt_id = t.prt_prt_id
										group by t.prt_party_id, t.prt_cmpt_id)
				and prt_pcmp.usage_type_id <> 0
				and	prt_pcmp.prt_cmpt_id = '|| i_cmpt_id ||'
				and	c.id = '|| i_custdet_id;

				EXECUTE IMMEDIATE quary_str INTO r_cm_id;
				RETURN r_cm_id;
			EXCEPTION WHEN NO_DATA_FOUND THEN
				BEGIN
					quary_str := ' select '|| i_tab_nm ||'.prt_cm_id
						from '|| i_tab_nm || ',
						prt_pcm,
						prt_pcmp,
						prt_person,
						prt_cmpt,
						prt_prt,
						prt_cmt,
						custdet c,
						inst i
					where	c.inst_id = i.id
					and	prt_person.custdet_id = c.id
					and prt_pcm.prt_prt_id = prt_prt.id
					and prt_pcm.prt_party_id = prt_person.prt_party_id
					and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
					and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
					and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
					and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
					and prt_pcmp.prt_pcm_from_date = prt_pcm.from_date
					and prt_pcmp.prt_cmpt_id = prt_cmpt.id
					and prt_cmt.id = '|| i_tab_nm ||'.prt_cmt_id
					and prt_pcm.prt_cm_id = '|| i_tab_nm ||'.prt_cm_id
					and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
					and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
					and prt_pcm.from_date <= (select trunc(sysdate) from dual)
					and prt_pcm.until_date >= (select trunc(sysdate) from dual)
					and prt_pcmp.usage_type_id <> 0
					and	prt_pcmp.prt_cmpt_id = '|| v_cmpt_dft_id ||'
					and	c.id = '|| i_custdet_id;

					EXECUTE IMMEDIATE quary_str INTO r_cm_id;
					RETURN r_cm_id;
				EXCEPTION WHEN OTHERS THEN
					RETURN 0;
				END;
			WHEN OTHERS THEN
				RETURN 0;
			END;
		END IF;
	END IF;
EXCEPTION WHEN OTHERS THEN
  RETURN 0;
END;
/

prompt
prompt Creating view PCODEVIEW_PARTY
prompt =============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.pcodeview_party
(pan, seqno, instcode, brncode, effdate, corp, custcode, firstname, lastname, city, postcode, po_box, batch, status, crdproduct, embossname, addrind, pinsmade, cmpt_id, cm_id, crddet_id)
as
select crd.pan, crd.seqno, i.instcode, br.brncode, crd.effdate, crd.corp,
cust.custcode, cust.firstname, cust.lastname,
addr.city,
addr.postal_code,
addr.address_1, d.batch, d.status , cpdt.crdproduct ,
case
when crd.corp  not in ('0','2','4') THEN crd1.embossname
else crd.embossname
end,
crd.addrind,
crd.pinsmade,
cmpt.id,
addr.prt_cm_id,
crd.id
FROM CRDDET crd
INNER JOIN CUSTDET cust
ON crd.custdet_id = cust.id
INNER JOIN BRANCH br
ON crd.branch_id = br.id
INNER JOIN INST i
ON i.id= br.inst_id
INNER JOIN CRDPRODUCT cpdt
ON crd.crdproduct_id = cpdt.id
INNER JOIN CRDBTCH d
ON crd.batch = d.batch
LEFT OUTER JOIN CORPCRDLNK clink
on crd.id = clink.crddet_id
LEFT OUTER JOIN CRDDET crd1
on clink.pri_crddet_id = crd1.ID
INNER JOIN prt_cmpt cmpt
ON cmpt.id in (30, 40)
LEFT OUTER JOIN prt_cm_p_addr addr
ON addr.prt_cm_id = get_adds_email_tel_cm_id(crd.id, cmpt.id, 'prt_cm_p_addr', NULL)
with check option;

prompt
prompt Creating view PERSON_E_ADDRESS
prompt ==============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.person_e_address
(inst_id, instcode, custdet_id, custcode, title, firstname, lastname, date_birth, electronic_address, accdet_id, accno, currcode, crddet_id, pan, seqno, cm_type_id, cm_type, cm_purpose_type_id, cm_purpose_type, party_type_id, party_type, pcm_f_date, pcm_u_date, pcmp_f_date, pcmp_u_date, pcmp_usage_type)
as
select	i.id,
	i.instcode,
	c.id,
	c.custcode,
	c.title,
	c.firstname,
	c.lastname,
	c.date_birth,
	e.electronic_address,
	a.id,
	a.accno,
	a.currcode,
	crd.id,
	crd.pan,
	crd.seqno,
	cmt.id,
	cmt.short_descr,
	cmpt.id,
	cmpt.short_descr,
	prt.id,
	prt.short_descr,
	pcm.from_date,
	pcm.until_date,
	pcmp.from_date,
	pcmp.until_date,
	pcmp.usage_type_id
from	prt_person person,
	custdet c,
	prt_prt prt,
	prt_pcm pcm,
	prt_cm_e_addr e,
	prt_cmt cmt,
	prt_pcmp pcmp,
	prt_cmpt cmpt,
	prt_pcmp_media media,
	crddet crd,
	accdet a,
	inst i
where	person.custdet_id = c.id
and	pcm.prt_prt_id = prt.id
and	pcm.prt_party_id = person.prt_party_id
and e.prt_cmt_id  = cmt.id
and pcmp.prt_cmpt_id = cmpt.id
and	pcm.prt_cm_id = e.prt_cm_id
and	pcmp.prt_cm_id (+) = pcm.prt_cm_id
and	pcmp.prt_cmt_id (+) = pcm.prt_cmt_id
and	pcmp.prt_prt_id (+) = pcm.prt_prt_id
and	pcmp.prt_party_id (+) = pcm.prt_party_id
and	media.prt_cmpt_id (+) = pcmp.prt_cmpt_id
and	media.prt_party_id (+) = pcmp.prt_party_id
and	media.prt_cm_id (+) = pcmp.prt_cm_id
and	media.prt_cmt_id (+) = pcmp.prt_cmt_id
and	media.prt_prt_id (+) = pcmp.prt_prt_id
and	media.media_id = crd.id (+)
and	crd.accdet_id = a.id (+)
and	c.inst_id = i.id;

prompt
prompt Creating view PERSON_P_ADDRESS
prompt ==============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.person_p_address
(inst_id, instcode, custdet_id, custcode, title, firstname, lastname, date_birth, country_isocode, postal_code, city, address_1, address_2, address_3, address_4, address_5, province, ctxterritory, ctxstate, country, region, accdet_id, accno, currcode, crddet_id, pan, seqno, cm_type_id, cm_type, cm_purpose_type_id, cm_purpose_type, party_type_id, party_type, pcm_f_date, pcm_u_date, pcmp_f_date, pcmp_u_date, pcmp_usage_type)
as
select	i.id,
	i.instcode,
	c.id,
	c.custcode,
	c.title,
	c.firstname,
	c.lastname,
	c.date_birth,
	p.country_isocode,
	p.postal_code,
	p.city,
	p.address_1,
	p.address_2,
	p.address_3,
	p.address_4,
	p.address_5,
	p.province,
	p.ctxterritory,
	p.ctxstate,
	p.county,
	p.region,
	a.id,
	a.accno,
	a.currcode,
	crd.id,
	crd.pan,
	crd.seqno,
	cmt.id,
	cmt.short_descr,
	cmpt.id,
	cmpt.short_descr,
	prt.id,
	prt.short_descr,
	pcm.from_date,
	pcm.until_date,
	pcmp.from_date,
	pcmp.until_date,
	pcmp.usage_type_id
from	prt_person person,
	custdet c,
	prt_prt prt,
	prt_pcm pcm,
	prt_cm_p_addr p,
	prt_cmt cmt,
	prt_pcmp pcmp,
	prt_cmpt cmpt,
	prt_pcmp_media media,
	crddet crd,
	accdet a,
	inst i
where	person.custdet_id = c.id
and	pcm.prt_prt_id = prt.id
and	pcm.prt_party_id = person.prt_party_id
and	p.prt_cmt_id  = cmt.id
and	pcmp.prt_cmpt_id = cmpt.id
and	pcm.prt_cm_id (+) = p.prt_cm_id
and	pcmp.prt_cm_id (+) = pcm.prt_cm_id
and	pcmp.prt_cmt_id (+) = pcm.prt_cmt_id
and	pcmp.prt_prt_id (+) = pcm.prt_prt_id
and	pcmp.prt_party_id (+) = pcm.prt_party_id
and	media.prt_cmpt_id (+) = pcmp.prt_cmpt_id
and	media.prt_party_id (+) = pcmp.prt_party_id
and	media.prt_cm_id (+) = pcmp.prt_cm_id
and	media.prt_cmt_id (+) = pcmp.prt_cmt_id
and	media.prt_prt_id (+) = pcmp.prt_prt_id
and	media.media_id = crd.id (+)
and	crd.accdet_id = a.id (+)
and	c.inst_id = i.id;

prompt
prompt Creating view PERSON_TELCO
prompt ==========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.person_telco
(inst_id, instcode, custdet_id, custcode, title, firstname, lastname, date_birth, area_code, contact_no, country_prefix, extension_no, accdet_id, accno, currcode, crddet_id, pan, seqno, cm_type_id, cm_type, cm_purpose_type_id, cm_purpose_type, party_type_id, party_type, pcm_f_date, pcm_u_date, pcmp_f_date, pcmp_u_date, pcmp_usage_type)
as
select	i.id,
	i.instcode,
	c.id,
	c.custcode,
	c.title,
	c.firstname,
	c.lastname,
	c.date_birth,
	t.area_code,
	t.contact_no,
	t.country_prefix,
	t.extension_no,
	a.id,
	a.accno,
	a.currcode,
	crd.id,
	crd.pan,
	crd.seqno,
	cmt.id,
	cmt.short_descr,
	cmpt.id,
	cmpt.short_descr,
	prt.id,
	prt.short_descr,
	pcm.from_date,
	pcm.until_date,
	pcmp.from_date,
	pcmp.until_date,
	pcmp.usage_type_id
from	prt_person person,
	custdet c,
	prt_prt prt,
	prt_pcm pcm,
	prt_cm_telco_no t,
	prt_cmt cmt,
	prt_pcmp pcmp,
	prt_cmpt cmpt,
	prt_pcmp_media media,
	crddet crd,
	accdet a,
	inst i
where	person.custdet_id = c.id
and	pcm.prt_prt_id = prt.id
and	pcm.prt_party_id = person.prt_party_id
and t.prt_cmt_id  = cmt.id
and	pcm.prt_cm_id = t.prt_cm_id
and	pcmp.prt_cmpt_id = cmpt.id
and	pcmp.prt_cm_id (+) = pcm.prt_cm_id
and	pcmp.prt_cmt_id (+) = pcm.prt_cmt_id
and	pcmp.prt_prt_id (+) = pcm.prt_prt_id
and	pcmp.prt_party_id (+) = pcm.prt_party_id
and	media.prt_cmpt_id (+) = pcmp.prt_cmpt_id
and	media.prt_party_id (+) = pcmp.prt_party_id
and	media.prt_cm_id (+) = pcmp.prt_cm_id
and	media.prt_cmt_id (+) = pcmp.prt_cmt_id
and	media.prt_prt_id (+) = pcmp.prt_prt_id
and	media.media_id = crd.id (+)
and	crd.accdet_id = a.id (+)
and	c.inst_id = i.id;

prompt
prompt Creating view PERSON_TEL_MAIL_ACT_CUST_CARD
prompt ===========================================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.person_tel_mail_act_cust_card
(inst_id, custdet_id, crddet_id, pan, seqno, party_id, instcode, custcode, title, firstname, lastname, date_birth, email, phone, fax, sms)
as
select  distinct i.id inst_id,
	c.id custdet_id,
	crd.id,
	crd.pan,
	crd.seqno,
	person.prt_party_id,
	i.instcode,
	c.custcode,
	c.title,
	c.firstname,
	c.lastname,
	c.date_birth,
	nvl(
		(select max(email.electronic_address)
		from prt_cm_e_addr email, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_pcmp_media, prt_cmpt
		where prt_cmt.id in (2000,2010)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmt.id = email.prt_cmt_id
		and prt_pcm.prt_cm_id = email.prt_cm_id
		and prt_pcmp_media.mediatype_id = 0
		and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 1000	-- Email
		and prt_pcmp_media.prt_party_id = person.prt_party_id
		and prt_pcmp_media.prt_cm_id = email.prt_cm_id
		and prt_pcmp_media.prt_cmt_id = prt_cmt.id
		and prt_pcmp_media.prt_prt_id = prt_prt.id
		and prt_pcmp_media.prt_pcm_from_date = prt_pcm.from_date
		and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
		and prt_pcmp_media.media_id = crd.id
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id),
		(select max(email.electronic_address)
		from prt_cm_e_addr email, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_cmpt
		where prt_cmt.id in (2000,2010)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id (+) = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id (+) = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id (+) = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id (+) = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 1000	-- Email
		and prt_cmt.id = email.prt_cmt_id
		and prt_pcm.prt_cm_id = email.prt_cm_id
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id)
	) as email,
	nvl(
		(select max(phone.country_prefix || phone.area_code || phone.contact_no || phone.extension_no)
		from prt_cm_telco_no phone, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_pcmp_media, prt_cmpt
		where prt_cmt.id in (1000,1010,1100, 1110)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmt.id = phone.prt_cmt_id
		and prt_pcm.prt_cm_id = phone.prt_cm_id
		and prt_pcmp_media.mediatype_id = 0
		and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id in (2000, 2100)	-- Tel
		and prt_pcmp_media.prt_party_id = person.prt_party_id
		and prt_pcmp_media.prt_cm_id = phone.prt_cm_id
		and prt_pcmp_media.prt_cmt_id = prt_cmt.id
		and prt_pcmp_media.prt_prt_id = prt_prt.id
		and prt_pcmp_media.media_id = crd.id
		and prt_pcmp_media.prt_pcm_from_date = prt_pcm.from_date
		and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id),
		(select max(phone.country_prefix || phone.area_code || phone.contact_no || phone.extension_no)
		from prt_cm_telco_no phone, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_cmpt
		where prt_cmt.id in (1000,1010,1100, 1110)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id (+) = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id (+) = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id (+) = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id (+) = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id in (2000, 2100)	-- Tel
		and prt_cmt.id = phone.prt_cmt_id
		and prt_pcm.prt_cm_id = phone.prt_cm_id
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id)
	) as phone,
	nvl(
		(select max(fax.country_prefix || fax.area_code || fax.contact_no || fax.extension_no)
		from prt_cm_telco_no fax, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_pcmp_media, prt_cmpt
		where prt_cmt.id in (1030,1130)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmt.id = fax.prt_cmt_id
		and prt_pcm.prt_cm_id = fax.prt_cm_id
		and prt_pcmp_media.mediatype_id = 0
		and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 2300	-- Fax
		and prt_pcmp_media.prt_party_id = person.prt_party_id
		and prt_pcmp_media.prt_cm_id = fax.prt_cm_id
		and prt_pcmp_media.prt_cmt_id = prt_cmt.id
		and prt_pcmp_media.prt_prt_id = prt_prt.id
		and prt_pcmp_media.media_id = crd.id
		and prt_pcmp_media.prt_pcm_from_date = prt_pcm.from_date
		and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id),
		(select max(fax.country_prefix || fax.area_code || fax.contact_no || fax.extension_no)
		from prt_cm_telco_no fax, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_cmpt
		where prt_cmt.id in (1030,1130)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id (+) = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id (+) = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id (+) = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id (+) = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 2300	-- Fax
		and prt_cmt.id = fax.prt_cmt_id
		and prt_pcm.prt_cm_id = fax.prt_cm_id
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id)
	)as fax,
	nvl(
		(select max(sms.country_prefix || sms.area_code || sms.contact_no || sms.extension_no)
		from prt_cm_telco_no sms, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_pcmp_media, prt_cmpt
		where prt_cmt.id in (1020,1120)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmt.id = sms.prt_cmt_id
		and prt_pcm.prt_cm_id = sms.prt_cm_id
		and prt_pcmp_media.mediatype_id = 0
		and prt_pcmp_media.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 2200	-- SMS
		and prt_pcmp_media.prt_party_id = person.prt_party_id
		and prt_pcmp_media.prt_cm_id = sms.prt_cm_id
		and prt_pcmp_media.prt_cmt_id = prt_cmt.id
		and prt_pcmp_media.prt_prt_id = prt_prt.id
		and prt_pcmp_media.media_id = crd.id
		and prt_pcmp_media.prt_pcm_from_date = prt_pcm.from_date
		and prt_pcmp_media.prt_pcmp_from_date = prt_pcmp.from_date
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id),
		(select max(sms.country_prefix || sms.area_code || sms.contact_no || sms.extension_no)
		from prt_cm_telco_no sms, prt_cmt, prt_pcm, prt_pcmp, prt_prt, prt_cmpt
		where prt_cmt.id in (1020,1120)
		and prt_pcm.prt_prt_id = prt_prt.id
		and prt_pcm.prt_party_id = person.prt_party_id
		and prt_pcmp.prt_cm_id (+) = prt_pcm.prt_cm_id
		and prt_pcmp.prt_cmt_id (+) = prt_pcm.prt_cmt_id
		and prt_pcmp.prt_prt_id (+) = prt_pcm.prt_prt_id
		and prt_pcmp.prt_party_id (+) = prt_pcm.prt_party_id
		and prt_pcmp.prt_cmpt_id = prt_cmpt.id
		and prt_cmpt.id = 2200	-- SMS
		and prt_cmt.id = sms.prt_cmt_id
		and prt_pcm.prt_cm_id = sms.prt_cm_id
		and prt_pcmp.from_date <= (select trunc(sysdate) from dual)
		and prt_pcmp.until_date >= (select trunc(sysdate) from dual)
		and prt_pcm.from_date <= (select trunc(sysdate) from dual)
		and prt_pcm.until_date >= (select trunc(sysdate) from dual)
		and prt_pcmp.usage_type_id = 0
		group by prt_pcm.prt_party_id)
	) as sms
from	prt_person person,
	custdet c,
	inst i,
	crddet crd
where	person.custdet_id = c.id
and	c.inst_id = i.id
and crd.custdet_id (+) = c.id;

prompt
prompt Creating function GET_PRM_RULES
prompt ===============================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.get_prm_rules(i_prm_def_id prm_def.id%type,
							i_prm_deft_id prm_def.prm_deft_id%type,
							i_prm_valt_id prm_def.prm_valt_id%type)
							return varchar2 is
x_prm_rules varchar2(5000);

begin
	x_prm_rules := '';
	for v1 in (
				select to_char(prm_rulet_id) || '(' || prm_rulet.short_descr|| ')'|| ':'|| decode(to_char(long_value), NULL, '', to_char(long_value))
						|| decode(to_char(double_value), NULL, '', '-' || to_char(double_value))
						|| decode(to_char(date_time_value), NULL, '', '-' || to_char(date_time_value))
						|| decode (string_value, NULL, '', decode(to_char(long_value), NULL, '', '-') || string_value)  prm_r
				from prm_defr, prm_rulet
				where prm_defr.prm_def_id = i_prm_def_id
				and prm_defr.prm_deft_id = i_prm_deft_id
				and prm_defr.prm_valt_id = i_prm_valt_id
				and prm_defr.prm_rulet_id = prm_rulet.id
			)
		loop
			x_prm_rules := x_prm_rules || v1.prm_r || ';';
		end loop;

	return x_prm_rules;
end;
/

prompt
prompt Creating view PRM_INFO
prompt ======================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.prm_info
(value_id, value_from_date, value_until_date, value_long_value, value_double_value, value_date_time_value, value_string_value, status_id, status_from_date, status_until_date, status_type_id, status_type_short_descr, dflt_value_id, dflt_value_from_date, dflt_value_until_date, dflt_value_long_value, dflt_value_double_value, dflt_value_date_time_value, dflt_value_string_value, elem_id, elem_from_date, elem_until_date, elem_elem_order, structnm_id, structnm_short_descr, cfgnm_short_descr, cfgenntity_type_id, cfgenntity_from_date, cfgenntity_until_date, entity_id, entity_type_id, card_id, card_pan, card_seqno, card_expdate, product_id, product_emvencsch, product_scriptset, product_emviccver, inst_id, instcode, context_id, context_short_descr, elemr_id, elemr_long_value, elemr_double_value, elemr_date_time_value, elemr_string_value, elems_from_date, elems_until_date, elems_type_id, elems_type_short_descr, def_from_id, def_from_sizeprecision, def_from_scale, def_from_short_name, def_to_id, def_to_sizeprecision, def_to_scale, def_to_short_name, defr_from, defr_to, valtype_from_id, valtype_from_short_descr, valtype_to_id, valtype_to_short_descr, deftype_from_id, deftype_from_short_descr, deftype_to_id, deftype_to_short_descr)
as
select	distinct pvalue.id,
	pvalue.from_date,
	pvalue.until_date,
	pvalue.long_value,
	pvalue.double_value,
	pvalue.date_time_value,
	pvalue.string_value,
	pvals.id,
	pvals.from_date,
	pvals.until_date,
	pvalst.id,
	pvalst.short_descr,
	pdfltval.id,
	pdfltval.from_date,
	pdfltval.until_date,
	pdfltval.long_value,
	pdfltval.double_value,
	pdfltval.date_time_value,
	pdfltval.string_value,
	pelem.id,
	pelem.from_date,
	pelem.until_date,
	pelem.elem_order,
	pstruct.id,
	pstruct.short_descr,
	pcfgnm.short_descr,
	pcfgen.entity_type_id,
	pcfgen.from_date,
	pcfgen.until_date,
	pentity.id,
	pentity.entity_type_id,
	card.id,
	card.pan,
	card.seqno,
	card.expdate,
	cp.id,
	cp.emvencsch,
	cp.scriptset,
	cp.emviccver,
	i.id,
	i.instcode,
	pcontxt.id,
	pcontxt.short_descr,
	pelemr.id,
	pelemr.long_value,
	pelemr.double_value,
	pelemr.date_time_value,
	pelemr.string_value,
	pelems.from_date,
	pelems.until_date,
	pelemst.id,
	pelemst.short_descr,
	pdeff.id,
	pdeff.prm_size_or_precision,
	pdeff.prm_scale_of_number,
	pdeff.short_name,
	pdeft.id,
	pdeft.prm_size_or_precision,
	pdeft.prm_scale_of_number,
	pdeft.short_name,
	get_prm_rules(pdeff.id, pdeff.prm_deft_id, pdeff.prm_valt_id),
	get_prm_rules(pdeft.id, pdeft.prm_deft_id, pdeft.prm_valt_id),
	pvaltf.id,
	pvaltf.short_descr,
	pvaltt.id,
	pvaltt.short_descr,
	pdeftf.id,
	pdeftf.short_descr,
	pdeftt.id,
	pdeftt.short_descr
from	prm_vals pvals,
		prm_value pvalue,
		prm_valst pvalst,
		prm_dfltval pdfltval,
		prm_elem pelem,
		prm_cfgnm pcfgnm,
		prm_cfg_entity pcfgen,
		prm_entity pentity,
		crddet card,
		crdproduct cp,
		inst i,
		prm_structnm pstruct,
		prm_context pcontxt,
		prm_elemr pelemr,
		prm_elems pelems,
		prm_elemst pelemst,
		prm_def pdeff,
		prm_def pdeft,
		prm_defr pdefrf,
		prm_defr pdefrt,
		prm_rulet pruletf,
		prm_rulet prulett,
		prm_valt pvaltf,
		prm_valt pvaltt,
		prm_deft pdeftf,
		prm_deft pdeftt,
		prm_defp pdefpf,
		prm_defp pdefpt,
		prm_context pcontxtf,
		prm_context pcontxtt
where	pvals.prm_value_id = pvalue.id
and		pvals.prm_value_from_date = pvalue.from_date
and		pvals.prm_valst_id = pvalst.id
and		pvalue.prm_dfltval_id = pdfltval.id
and		pvalue.prm_dfltval_from_date = pdfltval.from_date
and		pvalue.prm_entity_id = pentity.id
and		pdfltval.prm_cfgnm_id = pcfgnm.id
and		pdfltval.prt_party_id = pcfgnm.prt_party_id
and		pdfltval.prm_context_id = pcfgnm.prm_context_id
and		pdfltval.prm_structnm_id = pcfgnm.prm_structnm_id
and		pdfltval.prm_elem_id = pelem.id
and		pdfltval.prm_elem_from_date = pelem.from_date
and		pcfgen.prm_cfgnm_id = pcfgnm.id
and		pcfgen.prt_party_id = pcfgnm.prt_party_id
and		pcfgen.prm_context_id = pcfgnm.prm_context_id
and		pcfgen.prm_structnm_id = pcfgnm.prm_structnm_id
and		pentity.prm_cfgnm_id = pcfgnm.id
and		pentity.prt_party_id = pcfgnm.prt_party_id
and		pentity.prm_context_id = pcfgnm.prm_context_id
and		pentity.prm_structnm_id = pcfgnm.prm_structnm_id
and		pcfgen.entity_id = cp.id (+)
and		pentity.entity_id = card.id (+)
and		card.crdproduct_id = cp.id
and		pcfgnm.prt_party_id = pstruct.prt_party_id
and		pcfgnm.prm_context_id = pstruct.prm_context_id
and		pcfgnm.prm_structnm_id = pstruct.id
and		pstruct.prt_party_id = i.id
and		pstruct.prm_context_id = pcontxt.id
and		pelemr.prm_elem_id (+) = pelem.id
and		pelemr.prm_elem_from_date (+) = pelem.from_date
and		pelems.prm_elem_id (+) = pelem.id
and		pelems.prm_elem_from_date (+) = pelem.from_date
and		pelems.prm_elemst_id = pelemst.id (+)
and		pelem.prt_party_id = pstruct.prt_party_id
and		pelem.prm_context_id = pstruct.prm_context_id
and		pelem.prm_structnm_id = pstruct.id
and		pelem.prm_def_id_from = pdeff.id
and		pelem.prm_deft_id_from = pdeff.prm_deft_id
and		pelem.prm_valt_id_from = pdeff.prm_valt_id
and		pelem.prm_def_id_to = pdeft.id (+)
and		pelem.prm_deft_id_to = pdeft.prm_deft_id (+)
and		pelem.prm_valt_id_to = pdeft.prm_valt_id (+)
and		pdefrf.prm_def_id = pdeff.id
and		pdefrf.prm_deft_id = pdeff.prm_deft_id
and		pdefrf.prm_valt_id = pdeff.prm_valt_id
and		pdefrt.prm_def_id (+) = pdeft.id
and		pdefrt.prm_deft_id (+) = pdeft.prm_deft_id
and		pdefrt.prm_valt_id (+) = pdeft.prm_valt_id
and		pruletf.id = pdefrf.prm_rulet_id
and		prulett.id (+) = pdefrt.prm_rulet_id
and		pdeff.prm_deft_id = pdeftf.id
and		pdeff.prm_valt_id = pvaltf.id
and		pdeft.prm_deft_id = pdeftt.id (+)
and		pdeft.prm_valt_id = pvaltt.id (+)
and		pdefpf.prm_def_id = pdeff.id
and		pdefpf.prm_deft_id = pdeff.prm_deft_id
and		pdefpf.prm_valt_id = pdeff.prm_valt_id
and		pdefpt.prm_def_id (+) = pdeft.id
and		pdefpt.prm_deft_id (+) = pdeft.prm_deft_id
and		pdefpt.prm_valt_id (+) = pdeft.prm_valt_id
and		pcontxt.id = pcontxtf.id
and		pcontxt.id = pcontxtt.id (+);

prompt
prompt Creating view RULE_EVALDIMVALVW
prompt ===============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.rule_evaldimvalvw as
select 	DIM.context_id, DIM.Dimlvl, DIM.id dimension_id,
		DIMVAL.inst_id, EVAL.id evalset_id, EVAL.evalcode,
		DIMVAL.id dimvalue_id, DIMVAL.dimvalue
	from	rule_evalset EVAL, rule_dimension DIM,
			rule_dimvalue DIMVAL, rule_evaldimlink EDL
	where 	EVAL.id = EDL.evalset_id and
		DIMVAL.id = EDL.dimvalue_id and
		DIM.id = DIMVAL.dimension_id;

prompt
prompt Creating view RULE_COUNTGROUPVW
prompt ===============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.rule_countgroupvw as
select distinct EDVV.inst_id, EDVV.context_id, EDVV.evalset_id
	from RULE_EVALDIMVALVW EDVV, RULE_EVALSET EVSET
	where EDVV.evalset_id = EVSET.id and EVSET.enabled = 1;

prompt
prompt Creating view RULE_DIMLVLVALVW
prompt ==============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.rule_dimlvlvalvw as
select 	DIM.context_id, DIM.Dimlvl, DIM.id dimension_id,
		EVAL.id evalset_id, EVAL.evalcode,
		DIMVAL.id dimvalue_id, DIMVAL.dimvalue
	from 	rule_evalset EVAL, rule_dimension DIM,
			rule_dimvalue DIMVAL, rule_dimlvllink DLL
	where
		EVAL.id = DLL.evalset_id and
		DIMVAL.id = DLL.dimvalue_id and
 		DIM.id 	= DIMVAL.Dimension_id;

prompt
prompt Creating view RULE_EVALRULESVW
prompt ==============================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.rule_evalrulesvw as
select EVAL.id evalset_id, EVAL.evalCode,
		RULE.context_id, RULE.id rule_id, RULE.ruleName,
		RULE.descr ruleDescr, RULE.ruleExpr
	from rule_rule RULE, rule_evalset EVAL, rule_evalrulelink ERL
	where ERL.rule_id = RULE.id and ERL.evalset_id = EVAL.id;

prompt
prompt Creating view TRANSACTIONRECORDS_HIS
prompt ====================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.TRANSACTIONRECORDS_HIS AS
SELECT T.ID,
       T.MERCHANTNUMBER,
       T.TERMINALNUMBER,
       T.CARDNUMBER,
       T.TRANSACTIONMONEY,
       T.CARDACCOUNTMONEY,
       T.TRUEACCOUNTMONEY,
       T.INTEGRATIONACCOUNTMONEY,
       T.SERIALNUMBER,
       T.LOTNO,
       T.REFERENCENUMBER,
       T.RETURNPOINTS,
       T.TRANSACTIONTYPE,
       T.TRANSACTIONSTATUS,
       T.CARDTYPE,
       T.CARDTYPENAME,
       T.MERCHANTTYPE,
       T.MERCHANTSECTORS,
       T.PROVINCE,
       T.CITY,
       T.AREA,
       T.DATASOURCEID,
       T.ADDDATE,
       T1.ID SETTLEMENTACCOUNT,
       --T.SETTLEMENTACCOUNT,
       T.PERFEE,
       T.TRANSACTIONDATE,
       T.TRANSACTIONTIME,
       T.TERMINALLOCATION,
       T.DATASOURCE,
       T.TLOGID,
       T.TLOGADDDATE,
       T.SETTLEMENTDATE,
       T.ISEXCLUSIVE,
       T.CONSUMETYPE,
       T.STANORG,
       T.RRN,
       T.TERMTYPE,
       T.TERMSEQ,
       T.PAN,
       T.AIID,
       T.TXNSRC,
       T.TXNSRCORG,
       T.TXNCODE,
       T.TXNSTATUS,
       T.CURTXN,
       T.AMTTXN,
       T.AMTTXNFEE,
       T.AMTPROCFEE,
       T.AMTTXNORG,
       T.ACTYPE1,
       T.ACNUM1,
       T.ACTYPE2,
       T.ACNUM2,
       T.RSPCODE,
       T.REASONCODE,
       T.APRVLCODE,
       T.SYSDATES,
       T.RATEBILL,
       T.RATESET,
       T.ADDDATA,
       T.SUB_TXNCODE,
       T.FLAG,
       T.AGETINEGRAL,
       T.ORDERNUMBER,
       T.AMTBILL,
       T.CURBILL,
       T.OLDSERIALNUMBER,
       T.OLDLOTNO,
       T.OLDREFERENCENUMBER,
       T.OLDTRANSDATE,
       T.OLDTRANSTIME
  FROM T_TRANSACTIONRECORDS_HIS T, MRCH_ACC_X T1
 WHERE T.MERCHANTNUMBER = T1.MRCHNO(+);

prompt
prompt Creating view VIEW_ACCDET_STAT
prompt ==============================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_ACCDET_STAT AS
SELECT V.IID CARD_BIN, --¿¨bin
       V.CRDPRODUCT CARD_PRODUCT, --¿¨²úÆ·
       V.DESCR CARD_PRODUCT_NAME, --¿¨²úÆ·Ãû³Æ
       V.CARD_STATUS CARD_STATUS, --¿¨×´Ì¬
       V1.DESCR CARD_STATUS_NAME, --¿¨×´Ì¬±íÊö
       COUNT(DISTINCT(V.ID)) CARD_CNT, --¿¨ÕÅÊý
       SUM(V.CARD_BAL) CARD_BAL, --¿¨ÕË»§Óà¶î
       SUM(V.TRUE_BAL) TRUE_BAL, --ÊµÃûÕË»§Óà¶î
       SUM(V.INST_BAL) INST_BAL, --»ý·ÖÕË»§Óà¶î
       SUM(V.CARD_BAL) + SUM(V.TRUE_BAL) + SUM(V.INST_BAL) TOTAL_BAL --ÕË»§×ÜÓà¶î
  FROM (SELECT T4.IID IID,
               T3.CRDPRODUCT CRDPRODUCT,
               T3.DESCR DESCR,
               T2.STATCODE CARD_STATUS,
               T2.ID ID,
               DECODE(T1.TYPECODE, '01', T1.AVLBAL, 0) CARD_BAL,
               DECODE(T1.TYPECODE, '02', T1.AVLBAL, 0) TRUE_BAL,
               DECODE(T1.TYPECODE, '03', T1.AVLBAL, 0) INST_BAL
          FROM ACCDET T1, ACCDET T11, CRDDET T2, CRDPRODUCT T3, CRDFORMAT T4
         WHERE SUBSTR(T1.ACCNO, 0, 16) = SUBSTR(T11.ACCNO, 0, 16)
           AND T11.ID = T2.ACCDET_ID
           AND T1.CUSTDET_ID = T2.CUSTDET_ID
           AND T2.CRDPRODUCT_ID = T3.ID
           AND T3.CRDFORMAT_ID = T4.ID
           AND T1.INST_ID = 1
           AND T1.AVLBAL > 0
           AND (T1.TYPECODE = '01' OR T1.TYPECODE = '02' OR
                T1.TYPECODE = '03')) V,
       CRDSTATUS V1
 WHERE V.CARD_STATUS = V1.STATCODE
 GROUP BY V.IID, V.CRDPRODUCT, V.DESCR, V.CARD_STATUS, V1.DESCR;

prompt
prompt Creating view VIEW_ACCNO_AVLBAL
prompt ===============================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_ACCNO_AVLBAL AS
SELECT
  v.CARDBIN,   --¿¨BIN
  v.pan,       --¿¨ºÅ
  v.statcode,  -- ¿¨×´Ì¬  00 ¼¤»î
  t11.avlbal AS av01,      --¿¨ÕË»§Óà¶î
  t12.avlbal AS av02,      --ÊµÃûÕË»§Óà¶î
  t14.avlbal AS av04,      --¹ºÎï·µ»ý·ÖÕË»§Óà¶î
  t19.avlbal AS av09,      --ÁªÃû¿¨ËÍ»ý·ÖÕË»§Óà¶î
  (t11.avlbal + t12.avlbal + t14.avlbal + t19.avlbal) AS TOTAL_BAL --ÕË»§×ÜÓà¶î

   FROM accdet t11,accdet t12,accdet t14,accdet t19,
        (SELECT t.pan, SUBSTR(t.pan, 1, 9) AS CARDBIN,t1.statcode,
                substr(t1.accno, 1, 16) || '01' AS acc01,
                substr(t1.accno, 1, 16) || '02' AS acc02,
                substr(t1.accno, 1, 16) || '04' AS acc04,
                substr(t1.accno, 1, 16) || '09' AS acc09
          FROM crddet t, accdet t1
          WHERE t.accdet_id = t1.id  ) v
  WHERE  t11.accno = v.acc01
    AND  t12.accno = v.acc02
    AND  t14.accno = v.acc04
    AND  t19.accno = v.acc09
WITH READ ONLY;

prompt
prompt Creating view VIEW_APPLY_NEW_JUNL
prompt =================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_APPLY_NEW_JUNL AS
SELECT V.CRDACPTID MERCHANTNUMBER,         --ÉÌ»§ºÅ
       V.TERMCODE TERMINALNUMBER,          --ÖÕ¶ËºÅ
       V2.LOCATION TERMINALLOCATION,       --ÖÕ¶ËÎ»ÖÃ
       TRIM(V.PAN) CARDNUMBER,             --¿¨ºÅ
       V1.AMT_FLAG * V.AMTTXN TRANSACTIONMONEY, --½»Ò×½ð¶î
       V.STAN SERIALNUMBER,            --Á÷Ë®ºÅ
       '0' LOTNO,--ÐÂ¿¨ÏµÍ³Ã»ÓÐÅú´ÎºÅ   Åú´ÎºÅ
       V.RRN REFERENCENUMBER,          --²Î¿¼ºÅ
       TO_CHAR(V.DATELOCAL, 'YYYYMMDD') TRANSACTIONDATE,    --½»Ò×ÈÕÆÚ
       V.TIMELOCAL TRANSACTIONTIME,   --½»Ò×Ê±¼ä
       V.CRDPRODUCT KIND_ID,         --¿¨²úÆ·
       'Cortex¿â' DATASOURCE,
       V.ID TLOGID,
       V.AMTTXN,      -- ÊÖÐø·Ñ
      decode(substr(V.MSGHDR ,7,1) ,1,91,0,90,90) CONSUMETYPE    --ÖÐÊ¯»¯½»Ò×ÀàÐÍ
  FROM TLOG V,
       T_TRAN_TYPE@CORTEXS V1,
       TERMPOS_X V2
 WHERE V.TXNSRC IN (2, 8, 9, 6, 5)
   AND V.TXNSTATUS IN (7,8)
   AND V.RSPCODE = '00'
   AND V.TXNCODE = V1.TXNCODE
   AND V.SUB_TXNCODE = V1.SUB_TXNCODE
   AND V.FNCODE = V1.FNCODE
   AND V1.CLEAR_FLAG = 1
   AND V.CRDACPTID = V2.MRCHNO
   AND V.TERMCODE = V2.TERMCODE
WITH READ ONLY;

prompt
prompt Creating view VIEW_CRDINFO_REAL_NAME_MBER
prompt =========================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_CRDINFO_REAL_NAME_MBER AS
SELECT
a.FATHER_ORDER, a.PAN_START, a.PAN_END, a.OPERATOR,

b.ID, b.PAN, b.CUST_NAME, b.ID_NUM, b.MAIL_BOX, b.CELL_PHONE, b.ADDRESS, b.RESERVED3,

c.MEMBER_NAME, c.CARD_BIN

FROM OPENCRDBATCH@CORTEXS a
LEFT JOIN CRDINFO b ON  b.PAN BETWEEN CONCAT(a.PAN_START,'0') AND CONCAT(a.PAN_END,'9')
LEFT JOIN CRDMEMBER@CORTEXS c ON c.CARD_BIN = SUBSTR(b.PAN,0,9);

prompt
prompt Creating view VIEW_FKCORE_OLD_JUNL
prompt ==================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_FKCORE_OLD_JUNL AS
SELECT T.LRUID MERCHANTNUMBER, --ÉÌ»§ºÅ
       T."sSerialNum" TERMINALNUMBER, --ÖÕ¶ËºÅ
       T."aSaleMon" CARDNUMBER, --¿¨ºÅ
       T."aSaleInegral" TRANSACTIONMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."Cardmoney" CARDACCOUNTMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."MemberMoney" TRUEACCOUNTMONEY, --ÊµÃûÕÊ»§Ïû·Ñ½ð¶î
       T."interestMoney" INTEGRATIONACCOUNTMONEY, --ÀûÏ¢¿Û¿î½ð¶î
       T."lInvNum" SERIALNUMBER, --ÖÕ¶ËÁ÷Ë®
       T."lOrdNum" LOTNO, --ÖÕ¶ËÅú´ÎºÅ
       T."id" REFERENCENUMBER, --²Î¿¼Á÷Ë®ºÅ
       T."agetInegral" RETURNPOINTS, --±¾´Î»ñµÃ»ý·Ö
       T."type" TRANSACTIONTYPE, --½»Ò×ÀàÐÍ
       DECODE(T."bstate",1,8,7) TRANSACTIONSTATUS, --×´Ì¬
       T1."kindid" KINDID, --¿¨±íflag
       1 DATASOURCEID, --Êý¾ÝÀ´Ô´
       --T."aSaleInegral" PERFEE, --* T221.TIMEZONE / 100, --µ¥±ÊÊÖÐø·Ñ
       T."aRegDate" TRANSACTIONDATE, --Ïû·ÑÈÕÆÚ
       T."aRegTime" TRANSACTIONTIME, --Ïû·ÑÊ±¼ä
       --'yufu¿â1' DATASOURCE, --Êý¾ÝÀ´Ô´ÃèÊö
       T."id" TLOGID, --Ô´±íID
       T."aRegDate" TLOGADDDATE, --Ô´±íÊý¾ÝÌí¼ÓÈÕÆÚ
       T."BlanDate" SETTLEMENTDATE, --ÖÐÊ¯»¯½áËãÈÕÆÚ
       T."sFlag" CONSUMETYPE, --¼ÓÓÍ0R¹ºÎï
       T."LOldordNum" OLDSERIALNUMBER, --Ô­Á÷Ë®ºÅ
       T."LOldinvNum" OLDLOTNO, --Ô­Åú´ÎºÅ
       T."LOldID" OLDREFERENCENUMBER, --Ô­²Î¿¼ºÅ
       T."aResidualInegral" BAL1,
       T."aReMemberInegral" BAL2,
       T."interestReMoney" BAL3
  from MEMBERCARDSALE@GW T, CARDREG@GW T1
 where T."aCardnum" = T1."aCardNum"
UNION
SELECT T.LRUID MERCHANTNUMBER, --ÉÌ»§ºÅ
       T."sSerialNum" TERMINALNUMBER, --ÖÕ¶ËºÅ
       T."aSaleMon" CARDNUMBER, --¿¨ºÅ
       T."aSaleInegral" TRANSACTIONMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."Cardmoney" CARDACCOUNTMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."MemberMoney" TRUEACCOUNTMONEY, --ÊµÃûÕÊ»§Ïû·Ñ½ð¶î
       T."interestMoney" INTEGRATIONACCOUNTMONEY, --ÀûÏ¢¿Û¿î½ð¶î
       T."lInvNum" SERIALNUMBER, --ÖÕ¶ËÁ÷Ë®
       T."lOrdNum" LOTNO, --ÖÕ¶ËÅú´ÎºÅ
       T."id" REFERENCENUMBER, --²Î¿¼Á÷Ë®ºÅ
       T."agetInegral" RETURNPOINTS, --±¾´Î»ñµÃ»ý·Ö
       T."type" TRANSACTIONTYPE, --½»Ò×ÀàÐÍ
       DECODE(T."bstate",1,8,7) TRANSACTIONSTATUS, --×´Ì¬
       T1."kindid" KINDID, --¿¨±íflag
       2 DATASOURCEID, --Êý¾ÝÀ´Ô´
       --T."aSaleInegral" PERFEE, --* T221.TIMEZONE / 100, --µ¥±ÊÊÖÐø·Ñ
       T."aRegDate" TRANSACTIONDATE, --Ïû·ÑÈÕÆÚ
       T."aRegTime" TRANSACTIONTIME, --Ïû·ÑÊ±¼ä
       --'yufu¿â2' DATASOURCE, --Êý¾ÝÀ´Ô´ÃèÊö
       T."id" TLOGID, --Ô´±íID
       T."aRegDate" TLOGADDDATE, --Ô´±íÊý¾ÝÌí¼ÓÈÕÆÚ
       T."BlanDate" SETTLEMENTDATE, --ÖÐÊ¯»¯½áËãÈÕÆÚ
       T."sFlag" CONSUMETYPE, --¼ÓÓÍ0R¹ºÎï
       T."LOldordNum" OLDSERIALNUMBER, --Ô­Á÷Ë®ºÅ
       T."LOldinvNum" OLDLOTNO, --Ô­Åú´ÎºÅ
       T."LOldID" OLDREFERENCENUMBER, --Ô­²Î¿¼ºÅ
       T."aResidualInegral" BAL1,
       T."aReMemberInegral" BAL2,
       T."interestReMoney" BAL3
  from MEMBERCARDSALE@GW1 T, CARDREG@GW1 T1
 where T."aCardnum" = T1."aCardNum"
UNION
SELECT T.LRUID MERCHANTNUMBER, --ÉÌ»§ºÅ
       T."sSerialNum" TERMINALNUMBER, --ÖÕ¶ËºÅ
       T."aSaleMon" CARDNUMBER, --¿¨ºÅ
       T."aSaleInegral" TRANSACTIONMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."Cardmoney" CARDACCOUNTMONEY, --¿¨ÕË»§Ïû·Ñ½ð¶î
       T."MemberMoney" TRUEACCOUNTMONEY, --ÊµÃûÕÊ»§Ïû·Ñ½ð¶î
       T."interestMoney" INTEGRATIONACCOUNTMONEY, --ÀûÏ¢¿Û¿î½ð¶î
       T."lInvNum" SERIALNUMBER, --ÖÕ¶ËÁ÷Ë®
       T."lOrdNum" LOTNO, --ÖÕ¶ËÅú´ÎºÅ
       T."id" REFERENCENUMBER, --²Î¿¼Á÷Ë®ºÅ
       T."agetInegral" RETURNPOINTS, --±¾´Î»ñµÃ»ý·Ö
       T."type" TRANSACTIONTYPE, --½»Ò×ÀàÐÍ
       DECODE(T."bstate",1,8,7) TRANSACTIONSTATUS, --×´Ì¬
       T1."kindid" KINDID, --¿¨±íflag
       4 DATASOURCEID, --Êý¾ÝÀ´Ô´
       --T."aSaleInegral" PERFEE, --* T221.TIMEZONE / 100, --µ¥±ÊÊÖÐø·Ñ
       T."aRegDate" TRANSACTIONDATE, --Ïû·ÑÈÕÆÚ
       T."aRegTime" TRANSACTIONTIME, --Ïû·ÑÊ±¼ä
       --'yufu¿â3'  DATASOURCE, --Êý¾ÝÀ´Ô´ÃèÊö
       T."id" TLOGID, --Ô´±íID
       T."aRegDate" TLOGADDDATE, --Ô´±íÊý¾ÝÌí¼ÓÈÕÆÚ
       T."BlanDate" SETTLEMENTDATE, --ÖÐÊ¯»¯½áËãÈÕÆÚ
       T."sFlag" CONSUMETYPE, --¼ÓÓÍ0R¹ºÎï
       T."LOldordNum" OLDSERIALNUMBER, --Ô­Á÷Ë®ºÅ
       T."LOldinvNum" OLDLOTNO, --Ô­Åú´ÎºÅ
       T."LOldID" OLDREFERENCENUMBER, --Ô­²Î¿¼ºÅ
       T."aResidualInegral" BAL1,
       T."aReMemberInegral" BAL2,
       T."interestReMoney" BAL3
  from MEMBERCARDSALE@GW2 T, CARDREG@GW2 T1
 where T."aCardnum" = T1."aCardNum"
WITH READ ONLY;

prompt
prompt Creating view VIEW_MERCH_TERMINAL_LOC
prompt =====================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_MERCH_TERMINAL_LOC AS
SELECT                 -- ¿ÉËæÒâÔö¼Ó×Ö¶Î
       V.MRCHNO,
       V1.MRCHT_NAME,
       V2.TERMCODE,
       V2.LOCATION,      --ÖÕ¶ËÎ»ÖÃ
       V1.IS_BJ  --ÊÇ·ñÊôÓÚ±±¾©£¬0·ñ£¬1ÊÇ

  FROM MERCHANT V
  LEFT JOIN MERCHANT_X V1 ON V.MRCHNO = V1.MRCHNO
  LEFT JOIN TERMPOS_X V2 ON V.MRCHNO = V2.MRCHNO    -- AND V.CRDACPTID = V1.MRCHNO



WITH READ ONLY;

prompt
prompt Creating view VIEW_REAL_NAME_ACCNO_AVLBAL
prompt =========================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_REAL_NAME_ACCNO_AVLBAL AS
SELECT
  v.CARDBIN,   --¿¨BIN
  v.pan,       --¿¨ºÅ
  v.statcode,  -- ¿¨×´Ì¬  00 ¼¤»î
  t20.cell_phone AS phone, --ÊÖ»úºÅ
  t11.avlbal AS av01,      --¿¨ÕË»§Óà¶î
  t12.avlbal AS av02,      --ÊµÃûÕË»§Óà¶î
  t14.avlbal AS av04,      --¹ºÎï·µ»ý·ÖÕË»§Óà¶î
  t19.avlbal AS av09,      --ÁªÃû¿¨ËÍ»ý·ÖÕË»§Óà¶î
  (t11.avlbal + t12.avlbal + t14.avlbal + t19.avlbal) AS TOTAL_BAL --ÕË»§×ÜÓà¶î

   FROM accdet t11,accdet t12,accdet t14,accdet t19,crdinfo  t20 ,
        (SELECT t.pan, SUBSTR(t.pan, 1, 9) AS CARDBIN,t1.statcode,
                substr(t1.accno, 1, 16) || '01' AS acc01,
                substr(t1.accno, 1, 16) || '02' AS acc02,
                substr(t1.accno, 1, 16) || '04' AS acc04,
                substr(t1.accno, 1, 16) || '09' AS acc09
          FROM crddet t, accdet t1
          WHERE t.accdet_id = t1.id  ) v
  WHERE  t11.accno = v.acc01
    AND  t12.accno = v.acc02
    AND  t14.accno = v.acc04
    AND  t19.accno = v.acc09
    AND  t20.pan = v.pan
WITH READ ONLY;

prompt
prompt Creating view VIEW_TLOG_REAL_TIME
prompt =================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_TLOG_REAL_TIME AS
SELECT V.CRDACPTID AS MERCHANTNUMBER,         --ÉÌ»§ºÅ
       V2.MRCHT_NAME AS MERCHANTNAME,          --ÉÌ»§Ãû³Æ
       V.TERMCODE AS TERMINALNUMBER,          --ÖÕ¶ËºÅ
       V1.LOCATION AS TERMINALLOCATION,       --ÖÕ¶ËÎ»ÖÃ
       TRIM(V.PAN) AS CARDNUMBER,             --¿¨ºÅ
       V3.ORDER_ID,                           --Ö§¸¶Çåµ¥µ¥ºÅ
       V3.ORG_ORDER_ID,                       --Ö§¸¶Ô­ÇåËãµ¥ºÅ
       V3.CASH_SOURCE,                        --³äÖµÀ´Ô´
       (V4.AMT_FLAG * V.AMTTXN) AS TRANSACTIONMONEY, --½»Ò×½ð¶î
       V.STAN AS SERIALNUMBER,            --Á÷Ë®ºÅ
       '0' AS LOTNO,--ÐÂ¿¨ÏµÍ³Ã»ÓÐÅú´ÎºÅ   Åú´ÎºÅ
       V.RRN AS REFERENCENUMBER,          --²Î¿¼ºÅ
       TO_CHAR(V.DATELOCAL, 'YYYYMMDD') AS TRANSACTIONDATE,    --½»Ò×ÈÕÆÚ
       V.TIMELOCAL AS TRANSACTIONTIME,   --½»Ò×Ê±¼ä
       V.CRDPRODUCT AS KIND_ID,         --¿¨²úÆ·
       'Cortex¿â' AS DATASOURCE,
       V.ID AS TLOGID,
       V.AMTTAX AS AMTTXN,      -- ÊÖÐø·Ñ
       decode(substr(V.MSGHDR ,7,1) ,1,91,0,90,90) CONSUMETYPE,    --ÖÐÊ¯»¯½»Ò×ÀàÐÍ
       V4.TRAN_TYPE_DESC
  FROM TLOG V
  LEFT JOIN TERMPOS_X V1 ON V.TERMCODE = V1.TERMCODE    -- AND V.CRDACPTID = V1.MRCHNO
  LEFT JOIN MERCHANT_X V2 ON V1.MRCHNO = V2.MRCHNO
  LEFT JOIN NEWPAYORDER@CORTEXS V3 ON V.ID = V3.TLOG_ID
  LEFT JOIN T_TRAN_TYPE@CORTEXS V4 ON V.TXNCODE = V4.TXNCODE AND V.SUB_TXNCODE = V4.SUB_TXNCODE AND V.FNCODE = V4.FNCODE
 WHERE V.TXNSRC IN (2, 8, 9, 6, 5, 4)
   AND V.TXNSTATUS IN (7,8)
   AND V.RSPCODE = '00'
   AND V4.CLEAR_FLAG = 1
WITH READ ONLY;

prompt
prompt Creating view VIEW_TRANSACTIONRECORDS
prompt =====================================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.view_transactionrecords as
select id,
       merchantnumber,
       terminalnumber,
       cardnumber,
       transactionmoney,
       cardaccountmoney,
       trueaccountmoney,
       integrationaccountmoney,
       serialnumber,
       lotno,
       referencenumber,
       returnpoints,
       transactiontype,
       transactionstatus,
       cardtype,
       cardtypename,
       merchanttype,
       merchantsectors,
       province,
       city,
       area,
       datasourceid,
       adddate,
       settlementaccount,
       perfee,
       transactiondate,
       transactiontime,
       terminallocation,
       datasource,
       tlogid,
       tlogadddate,
       settlementdate,
       isexclusive,
       consumetype,
       stanorg,
       rrn,
       termtype,
       termseq,
       pan,
       aiid,
       txnsrc,
       txnsrcorg,
       txncode,
       txnstatus,
       curtxn,
       amttxn,
       amttxnfee,
       amtprocfee,
       amttxnorg,
       actype1,
       acnum1,
       actype2,
       acnum2,
       rspcode,
       reasoncode,
       aprvlcode,
       sysdates,
       ratebill,
       rateset,
       adddata,
       sub_txncode,
       flag,
       agetinegral,
       ordernumber,
       amtbill,
       curbill,
       oldserialnumber,
       oldlotno,
       oldreferencenumber,
       oldtransdate,
       oldtranstime,
       fncode,
       trace_no,
       batch_no,
       tran_rrn,
       free_field
  from transactionrecords
union all
select id,
       merchantnumber,
       terminalnumber,
       cardnumber,
       transactionmoney,
       cardaccountmoney,
       trueaccountmoney,
       integrationaccountmoney,
       serialnumber,
       lotno,
       referencenumber,
       returnpoints,
       transactiontype,
       transactionstatus,
       cardtype,
       cardtypename,
       merchanttype,
       merchantsectors,
       province,
       city,
       area,
       datasourceid,
       adddate,
       settlementaccount,
       perfee,
       transactiondate,
       transactiontime,
       terminallocation,
       datasource,
       tlogid,
       tlogadddate,
       settlementdate,
       isexclusive,
       consumetype,
       stanorg,
       rrn,
       termtype,
       termseq,
       pan,
       aiid,
       txnsrc,
       txnsrcorg,
       txncode,
       txnstatus,
       curtxn,
       amttxn,
       amttxnfee,
       amtprocfee,
       amttxnorg,
       actype1,
       acnum1,
       actype2,
       acnum2,
       rspcode,
       reasoncode,
       aprvlcode,
       sysdates,
       ratebill,
       rateset,
       adddata,
       sub_txncode,
       flag,
       agetinegral,
       ordernumber,
       amtbill,
       curbill,
       oldserialnumber,
       oldlotno,
       oldreferencenumber,
       oldtransdate,
       oldtranstime,
       fncode,
       trace_no,
       batch_no,
       tran_rrn,
       free_field
  from transactionrecords_alipay
WITH READ ONLY;

prompt
prompt Creating view VIEW_TRANSANDMERCHANT_X
prompt =====================================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_TRANSANDMERCHANT_X AS
SELECT     MERCHANT_X.mrcht_name, TRANSACTIONRECORDS.id, TRANSACTIONRECORDS.merchantnumber, TRANSACTIONRECORDS.terminalnumber,
                      TRANSACTIONRECORDS.cardnumber, TRANSACTIONRECORDS.transactionmoney, TRANSACTIONRECORDS.cardaccountmoney, TRANSACTIONRECORDS.trueaccountmoney,
                      TRANSACTIONRECORDS.integrationaccountmoney, TRANSACTIONRECORDS.serialnumber, TRANSACTIONRECORDS.lotno, TRANSACTIONRECORDS.referencenumber,
                      TRANSACTIONRECORDS.returnpoints, TRANSACTIONRECORDS.transactiontype, TRANSACTIONRECORDS.transactionstatus, TRANSACTIONRECORDS.cardtype,
                      TRANSACTIONRECORDS.cardtypename, TRANSACTIONRECORDS.merchanttype, TRANSACTIONRECORDS.merchantsectors, TRANSACTIONRECORDS.province,
                      TRANSACTIONRECORDS.city, TRANSACTIONRECORDS.area, TRANSACTIONRECORDS.datasourceid, TRANSACTIONRECORDS.adddate,
                      TRANSACTIONRECORDS.settlementaccount, TRANSACTIONRECORDS.perfee, TRANSACTIONRECORDS.transactiondate, TRANSACTIONRECORDS.transactiontime,
                      TRANSACTIONRECORDS.terminallocation, TRANSACTIONRECORDS.datasource, TRANSACTIONRECORDS.tlogid, TRANSACTIONRECORDS.tlogadddate,
                      TRANSACTIONRECORDS.settlementdate, TRANSACTIONRECORDS.isexclusive, TRANSACTIONRECORDS.consumetype, TRANSACTIONRECORDS.stanorg,
                      TRANSACTIONRECORDS.rrn, TRANSACTIONRECORDS.termtype, TRANSACTIONRECORDS.termseq, TRANSACTIONRECORDS.pan, TRANSACTIONRECORDS.aiid,
                      TRANSACTIONRECORDS.txnsrc, TRANSACTIONRECORDS.txnsrcorg, TRANSACTIONRECORDS.txncode, TRANSACTIONRECORDS.txnstatus, TRANSACTIONRECORDS.curtxn,
                      TRANSACTIONRECORDS.amttxn, TRANSACTIONRECORDS.amttxnfee, TRANSACTIONRECORDS.amtprocfee, TRANSACTIONRECORDS.amttxnorg,
                      TRANSACTIONRECORDS.actype1, TRANSACTIONRECORDS.acnum1, TRANSACTIONRECORDS.actype2, TRANSACTIONRECORDS.acnum2, TRANSACTIONRECORDS.rspcode,
                      TRANSACTIONRECORDS.reasoncode, TRANSACTIONRECORDS.aprvlcode, TRANSACTIONRECORDS.sysdates, TRANSACTIONRECORDS.ratebill,
                      TRANSACTIONRECORDS.rateset, TRANSACTIONRECORDS.adddata, TRANSACTIONRECORDS.sub_txncode, TRANSACTIONRECORDS.flag, TRANSACTIONRECORDS.agetinegral,
                      TRANSACTIONRECORDS.ordernumber
FROM         TRANSACTIONRECORDS INNER JOIN
                      MERCHANT_X ON TRANSACTIONRECORDS.merchantnumber = MERCHANT_X.mrchno;

prompt
prompt Creating view VIEW_T_LOG_MRCHNO
prompt ===============================
prompt
CREATE OR REPLACE VIEW OPS$YUFU_CHINA_PS_RUN_BAK.VIEW_T_LOG_MRCHNO AS
SELECT
  A.ID,         --Ö÷¼üID
  D.MRCHNO,         -- ÉÌ»§ºÅ
  D.MRCHT_NAME,     --ÉÌ»§Ãû³Æ
  A.TERMCODE,       --ÖÕ¶ËºÅ
  A.PAN,            --¿¨ºÅ
  A.STAN,           --Á÷Ë®ºÅ
  A.RRN,            --²Î¿¼ºÅ
  A.AMTTXN,         --½»Ò×½ð¶î
  to_char(A.DATELOCAL, 'yyyyMMdd') AS TRANSACTIONDATE,  --½»Ò×ÈÕÆÚ
  lpad(A.TIMELOCAL, 6, '0') AS TRANSACTIONTIME,         --½»Ò×Ê±¼ä
  A.TXNSTATUS,      --½»Ò××´Ì¬
  A.TXNCODE         --½»Ò×Âë, ÊÖ¹¤µ÷ÕËÊ±£¬Ö±½Ó×öÎª½»Ò×ÀàÐÍ²åÈë
  --A.FNCODE,         --¹¦ÄÜÂë
  --A.SUB_TXNCODE,    --×Ó´¦ÀíÂë
  --B.AMT_FLAG,       --½ð¶î·ûºÅ
  --B.SHOW_FLAG,      --ÊÇ·ñÐèÒªÏÔÊ¾
  --B.CLEAR_FLAG,      --ÊÇ·ñÐèÒªÏÔÊ¾
  --B.TRAN_TYPE_DESC,  --½»Ò×ÀàÐÍ
FROM TLOG A
  --LEFT JOIN T_TRAN_TYPE@CORTEXS B ON A.TXNCODE = B.TXNCODE AND A.SUB_TXNCODE = B.SUB_TXNCODE AND A.FNCODE = B.FNCODE
  LEFT JOIN TERMPOS_X C ON A.TERMCODE = C.TERMCODE
  LEFT JOIN MERCHANT_X D ON C.MRCHNO = D.MRCHNO
WITH READ ONLY;

prompt
prompt Creating view VIEW_USERINFO
prompt ===========================
prompt
create or replace view OPS$YUFU_CHINA_PS_RUN_BAK.view_userinfo as
select u."LOGINNAME",u."LOGINPWD",u."USERTEL",u."USERMAIL",u."USERIDCARD",u."USERTYPE",u."YL1",u."YL2",u."YL3",u."YL4",u."YL5",m.state mstate,t.state tstate
from UserInfo u left join Merchant_x m on u.loginname=m.mrchno left join Termpos_x t
on u.loginname = (t.mrchno||t.termcode);

prompt
prompt Creating package CCS_EOD_PKG
prompt ============================
prompt
CREATE OR REPLACE PACKAGE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_eod_pkg
AS
    FUNCTION get_processing_date RETURN DATE;
    PROCEDURE set_processing_date(processing_date_var DATE);
END ccs_eod_pkg;
/

prompt
prompt Creating package GLOBALPKG
prompt ==========================
prompt
CREATE OR REPLACE PACKAGE OPS$YUFU_CHINA_PS_RUN_BAK.globalPkg as
	g_applno NUMBER(10,0) := 0;
END globalPkg;
/

prompt
prompt Creating function AMXBTCHEXC_MAX_MSGNO
prompt ======================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.amxbtchexc_max_msgno return number
is
	maxno number(10,0);
begin
	select NVL(max(msgno), 0) into maxno from amxbtchexc where fileseq=0;
	return maxno+1;
end;
/

prompt
prompt Creating function AMXFRDREP_MAX_MSGNO
prompt =====================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.amxfrdrep_max_msgno return number
is
	maxno number(10,0);
begin
	select NVL(max(msgno), 0) into maxno from amxfrdrep where fileseq=0;
	return maxno+1;
end;
/

prompt
prompt Creating procedure ATMAD_CPYATM
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_cpyatm(
		idestatm	TERMATM.id%type,
		isrcatm		TERMATM.id%type) is
	-- for ATMTNID (ATM Terminal Note ID)
	xnoteid		ATMNOTEID.noteid%type;
	xactstate	ATMTNID.actstate%type;
	xreqstate	ATMTNID.reqstate%type;

	-- for ATMBIN (Cash in bins)
	xbin		ATMBIN.bin%type;
	xdescr		ATMBIN.descr%type;
	xmaxload	ATMBIN.maxload%type;
	xhighload	ATMBIN.highload%type;

	-- for ATMNOTEBIN
	xecblevel	ATMNOTEBIN.ecblevel%type;
	-- (all duplicated above)

	-- for ATMDRUM
	xdrum		ATMDRUM.drum%type;
	xcasstype	ATMDRUM.casstype%type;

	-- for TERMATM
	xnotecfg	TERMATM.notecfg%type;

	xcount	NUMBER(10,0);
	indes_termatm_id	TERMATM.id%type := idestatm;
	insrc_termatm_id	TERMATM.id%type := isrcatm;
begin

	if indes_termatm_id is null then
				indes_termatm_id := 0;
    end if;

	if insrc_termatm_id is null then
				insrc_termatm_id := 0;
    end if;

	select count(*) into xcount from TERMATM where id = insrc_termatm_id;
	if (xcount<=0) then
		return;
	end if;
	select count(*) into xcount from TERMATM where id = indes_termatm_id;
	if (xcount<=0) then
		return;
	end if;

	-- copy ATMNOTECFG
	select notecfg into xnotecfg
		from TERMATM
		where id = insrc_termatm_id;

	update TERMATM
		set notecfg = xnotecfg
		where id = indes_termatm_id;


	-- copy ATMTNID (ATMTERMNOTEID)
	for v1 in (
		select noteid,  reqstate
		-- into  xnoteid, xreqstate
		from ATMTNID
		where
			termatm_id = insrc_termatm_id
	) loop
		xnoteid := v1.noteid;
		xreqstate := v1.reqstate;
		-- for every record duplicate for new ATM with actstate='U'
		insert into ATMTNID (termatm_id, noteid, actstate, reqstate)
		values (indes_termatm_id, xnoteid, 'U', xreqstate);
	end loop;


	-- copy ATMBIN
	for v2 in (
		select bin, descr, maxload, highload
		-- into xbin, xdescr, xmaxload, xhighload
		from ATMBIN
		where termatm_id = insrc_termatm_id
	) loop
		xbin := v2.bin;
		xdescr := v2.descr;
		xmaxload := v2.maxload;
		xhighload := v2.highload;
		-- for every record duplicate for new ATM with:
		-- status '1' (DVC_UNSET) and load=0
		insert into ATMBIN
			(termatm_id, bin, descr, status, maxload, load, highload)
		values (indes_termatm_id, xbin, xdescr, '1', xmaxload, 0, xhighload);
	end loop;

	-- copy ATMNOTEBIN
	for v3 in (
		select bin, noteid, ecblevel
		-- into xbin, xnoteid, xecblevel
		from ATMNOTEBIN
		where termatm_id = insrc_termatm_id
	) loop
		xbin := v3.bin;
		xnoteid := v3.noteid;
		xecblevel := v3.ecblevel;
		-- duplicate for new ATM with load zero
		insert into ATMNOTEBIN (termatm_id, bin, noteid, ecblevel, load)
		values (indes_termatm_id, xbin, xnoteid, xecblevel, 0);
	end loop;

	-- copy ATMDRUM
	for v4 in (
		select drum, descr, maxload, highload, casstype, noteid
	--	into xdrum, xdescr, xmaxload, xhighload, xcasstype, xnoteid
		from ATMDRUM
		where
			termatm_id = insrc_termatm_id
	) loop
		xdrum := v4.drum;
		xdescr := v4.descr;
		xmaxload := v4.maxload;
		xhighload := v4.highload;
		xcasstype := v4.casstype;
		xnoteid := v4.noteid;
		-- duplicate for new ATM, with load=0 and status='1' (UNSET)
		insert into ATMDRUM
			(termatm_id, drum, descr, status, maxload,
			load, highload, casstype, noteid)
		values (indes_termatm_id, xdrum, xdescr, '1', xmaxload, 0,
			xhighload, xcasstype, xnoteid);
	end loop;
end;
/

prompt
prompt Creating function ATMAD_CPYATMS
prompt ===============================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.atmad_cpyatms( isrcatm TERMATM.id%type,
                                idestbegin TERMATM.id%type,
                                idestend   TERMATM.id%type)
                        return number is

        xtermatm_id  TERMATM.id%type;
        xnotecfg TERMATM.notecfg%type;
        xupdated number(10,0);
begin
        xupdated := 0;

        for v1 in (
                select id
                from TERMATM
                where id between idestbegin and idestend
                and   id <> isrcatm
        )
        loop
                xtermatm_id := v1.id;
                xupdated := xupdated + 1;

                atmad_cpyatm(xtermatm_id, isrcatm);
        end loop;

        return xupdated;
end;
/

prompt
prompt Creating function ATMAD_LEVELDRUMSUM
prompt ====================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.atmad_leveldrumsum(i_termatm_id in ATMDRUM.termatm_id%type)
return number
is

	x_level4sum  	number(10,0);
	x_level4count 	number(10,0);
begin

	select SUM(added),COUNT(added) into x_level4sum, x_level4count
		from ATMDRUM where termatm_id = i_termatm_id;

	-- if no records, sums are undefined
	-- so if count is zero for any above, set sum to zero
	if (x_level4count = 0) then
		x_level4sum:=0;
	end if;

	return x_level4sum;
end;
/

prompt
prompt Creating function ATMAD_NOTEIDDRUMSUM
prompt =====================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.atmad_noteiddrumsum(
		i_termatm_id	ATMDRUM.termatm_id%type,
		i_noteid	ATMDRUM.noteid%type)
return number
is
	x_noteidsum	number(10,0);
	x_noteidcount	number(10,0);
begin
	select SUM(load),COUNT(added) into x_noteidsum, x_noteidcount
		from ATMDRUM
			where termatm_id = i_termatm_id and noteid = i_noteid;

	if ( x_noteidcount = 0) then
		x_noteidsum := 0;
	end if;

	return x_noteidsum;
end;
/

prompt
prompt Creating function ATMAD_NOTEIDSUM
prompt =================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.atmad_noteidsum(
		i_termatm_id	ATMNOTEBIN.termatm_id%type,
		i_noteid	ATMNOTEBIN.noteid%type)
return number
is
	x_noteidsum	number(10,0);
begin
	select SUM(load) into x_noteidsum
		from ATMNOTEBIN
			where termatm_id = i_termatm_id and noteid = i_noteid;

	return x_noteidsum;
end;
/

prompt
prompt Creating function ATMAD_UPDHIGHFULL
prompt ===================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.atmad_updhighfull(
		iload		ATMBIN.load%type,
		imaxload	ATMBIN.maxload%type,
		ihighload	ATMBIN.highload%type,
		istatus		ATMBIN.status%type)
return	char
is
	newstatus	ATMBIN.status%type;
	bindrum_ok	number(5,0);	-- =1 bin/drum ok, =0 error
begin
	-- assume bin/drum invalid status until otherwise confirmed ok
	bindrum_ok:=0;

	-- test for full bin/drum
	if (     istatus='3'  -- DVC_PRESENT
	      OR istatus='6'  -- DVC_LOW
	      OR istatus='7'  -- DVC_OUT
	      OR istatus='8'  -- DVC_OVER
	      OR istatus='9'  -- DVC_HIGH
	      OR istatus='A') -- DVC_FULL
	then
		-- bin/drum is ok
		bindrum_ok:=1;
	end if;

	-- test for over full bin/drum
	if ( (iload > imaxload) and bindrum_ok=1) then
		return '8'; -- overfill
	end if;

	-- test for full bin/drum and ok
	-- if IP gets here, iload <= imaxload
	if (  (iload = imaxload) and bindrum_ok=1) then
		return 'A';	-- full
	end if;

	-- test for high and ok
	-- if IP gets iload < imaxload
	if (  (iload >= ihighload) and bindrum_ok=1) then
		return '9';	-- high
	end if;

	-- otherwise if bin/drum ok must be ok (present)
	if (  bindrum_ok=1) then
		return '3';	-- present (ok)
	end if;

	-- otherwise (bindrum_ok=0) return what came in
	return istatus;
end;
/

prompt
prompt Creating function CCS_LOG_MOVEMENTS
prompt ===================================
prompt
CREATE OR REPLACE FUNCTION OPS$YUFU_CHINA_PS_RUN_BAK.ccs_log_movements
	(
		a_mrkdate	DATE,
		a_credit_limit	FLOAT,
		a_balance	FLOAT,
		a_dlnqlvl	NUMBER,
		a_acc_id	NUMBER,
		-- CCS 1.2, NMR011127 WLi 26/3/2004
		a_balnd		FLOAT
	)
	RETURN DATE AS

	authover_amt	FLOAT;
	log_date	DATE;
	prv_bal		FLOAT;
BEGIN

	log_date := TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD');

	IF (a_mrkdate <> log_date) THEN
		-- CCS 1.2, NMR011127 WLi 26/3/2004
		prv_bal := a_balance;
		-- Authover may be NULL after this select, but no matter
		SELECT authover.amt
			INTO authover_amt
			FROM authover
			WHERE
				accdet_id = a_acc_id
				AND effdate <= (log_date - 1)
				AND purgedate > (log_date - 1);

		if (authover_amt IS NULL) THEN
			authover_amt := 0;
		END IF;

		INSERT INTO ccsmvlog
		(
			verno_ctx,
			acc_id,
			mvdate,
			cur_credit_limit,
			cur_balance,
			cur_authovr,
			cur_dlnqlvl,
			prv_credit_limit,
			prv_balance,
			prv_authovr,
			prv_dlnqlvl,
			posted,
			prv_balactual	-- CCS 1.2, NMR011127 WLi 26/3/2004
		)
		VALUES
		(
			1,			-- verno_ctx
			a_acc_id,		-- acc_id
			log_date,		-- mvdate
			0,			-- cur_credit_limit
			0,			-- cur_balance
			0,			-- cur_authovr
			0,			-- cur_dlnqlvl
			a_credit_limit,		-- prv_credit_limit
			prv_bal,		-- prv_balance, CCS 1.2 WLi
			authover_amt,		-- prv_authovr
			a_dlnqlvl,		-- prv_dlnqlvl
			0,			-- posted
			-- CCS 1.2, NMR011127 WLi 26/3/2004
			a_balance		-- prv_balactual
		);
	END IF;

	RETURN log_date;
exception
	when no_data_found then
		authover_amt := 0;
		INSERT INTO ccsmvlog
		(
			verno_ctx,
			acc_id,
			mvdate,
			cur_credit_limit,
			cur_balance,
			cur_authovr,
			cur_dlnqlvl,
			prv_credit_limit,
			prv_balance,
			prv_authovr,
			prv_dlnqlvl,
			posted,
			prv_balactual	-- CCS 1.2, NMR011127 WLi 26/3/2004
		)
		VALUES
		(
			1,			-- verno_ctx
			a_acc_id,		-- acc_id
			log_date,		-- mvdate
			0,			-- cur_credit_limit
			0,			-- cur_balance
			0,			-- cur_authovr
			0,			-- cur_dlnqlvl
			a_credit_limit,		-- prv_credit_limit
			prv_bal,		-- prv_balance, CCS 1.2
			authover_amt,		-- prv_authovr
			a_dlnqlvl,		-- prv_dlnqlvl
			0,			-- posted
			-- CCS 1.2, NMR011127 WLi 26/3/2004
			a_balance               -- prv_balactual
		);
		RETURN log_date;
END;
/

prompt
prompt Creating function CCS_SET_COMP_CODE
prompt ===================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.ccs_set_comp_code( itemtype IN number,
			comp_code IN number, txncode IN number )
	return number as
	result	number(5,0);
BEGIN
	IF (comp_code = -1) then
		IF (txncode = 1 AND itemtype = 1) then  -- Cash
			result := 0;  --CASH
		ELSIF (itemtype = 1) then        -- Sale
			result := 1;		--SALE
		ELSIF (itemtype = 2) then  --Fee
			result := 2;           	-- FEE
		ELSIF (itemtype = 3) then  --Commission
			result := 3;           	--COMMISSION
		--Type 4 commission component defined in ccschrgprof
		--and are applied by the program that generated them.
		--Type 5 Payments hence N/A
		--Type 6/7 Penalties defined in  ccschrgprof and are
		--applied by program that generates them
		ELSE            -- ALL OTHERS
			result := 1; --Sales
		END IF;
	ELSE
		result := comp_code;
	END IF;
	RETURN result;
END;
/

prompt
prompt Creating function GENERATE_TIMESTAMP
prompt ====================================
prompt
CREATE OR REPLACE FUNCTION OPS$YUFU_CHINA_PS_RUN_BAK.generate_timestamp
   RETURN NUMBER
   IS stampnow FLOAT(126);
   BEGIN
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))
        INTO stampnow
        FROM DUAL;
   RETURN(stampnow);
END;
/

prompt
prompt Creating function GETSYSDATE
prompt ============================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.getsysdate
return date
is
        result date;
begin
	select	date_t into result
	from	msc
	where	tag='cursysdate';
        return result;
end;
/

prompt
prompt Creating function GET_AMTCOM
prompt ============================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.get_amtcom(ctxdate IN date, id1 IN number)
	return float
	as
	result float(126);
	cr char(1);
begin
	cr     := '0';
	result := 0.0;
	select charge, credit into result, cr from chargelog
		where	chargelog.ctxdate = ctxdate
		and	chargelog.tlgid  = id1;
	if cr is null then
		cr := '0';
	end if;
	if result is null then
		result := 0.0;
	elsif cr = '1' then
		result := 0 - result;
	end if;
	return result;
exception
	when no_data_found then
	        return 0.0;
end;
/

prompt
prompt Creating function GET_CRDPROGRAM_ID_BY_PAN
prompt ==========================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.get_crdprogram_id_by_pan
(
	in_pan CRDDET.pan%TYPE
)
return number
as
	ret	CRDDET.crdprogram_id%TYPE;
	tmp	CRDDET.seqno%TYPE;
	cursor sel_cur is
		select seqno, crdprogram_id
			from crddet where pan=in_pan order by seqno;
begin
	ret := 0;
	open sel_cur;
	fetch sel_cur into tmp, ret;
	if sel_cur%NOTFOUND then
		close sel_cur;
		return 0;
	else
		close sel_cur;
		return ret;
	end if;
end;
/

prompt
prompt Creating function MONTHS_BETWEEN_DATES
prompt ======================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.months_between_dates(todate date, fromdate date)
return number
is
	m	number(10);
begin
	m := trunc(months_between(todate, fromdate), 0);

	return m;
end;
/

prompt
prompt Creating function POSMRCHBTCH_COUNT_NONREC
prompt ==========================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.posmrchbtch_count_nonrec
	(
		itermpos_id IN number,
		itermbtchdate IN date,
		ibtchid IN number,
		itermbtchno IN number
	)
        return number as
        result number(10,0);
BEGIN
	select count(*) into result
		from POSNONREC p
		where p.termpos_id = itermpos_id
			and p.termbtchdate = itermbtchdate
			and p.btchid = ibtchid
			and p.termbtchno = itermbtchno;

	RETURN result;
END;
/

prompt
prompt Creating function SET_INTEGER_TO
prompt ================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.set_integer_to(val IN number)
return number
is
	result	number(10,0);
begin
	result := val;
	return result;
end;
/

prompt
prompt Creating function SQUIRREL_GET_ERROR_OFFSET
prompt ===========================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.SQUIRREL_GET_ERROR_OFFSET (query IN varchar2) return number authid current_user is      l_theCursor     integer default dbms_sql.open_cursor;      l_status        integer; begin          begin          dbms_sql.parse(  l_theCursor, query, dbms_sql.native );          exception                  when others then l_status := dbms_sql.last_error_position;          end;          dbms_sql.close_cursor( l_theCursor );          return l_status; end;
/

prompt
prompt Creating function STRING_TO_INTEGER
prompt ===================================
prompt
create or replace function OPS$YUFU_CHINA_PS_RUN_BAK.string_to_integer(str char)
return number
is
	i	number(10);
begin
	i := to_number(str);

	return i;
exception when others then
	return 0;
end;
/

prompt
prompt Creating procedure ACCBALSLOG_ADD
prompt =================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.accbalslog_add
(
	in_accdet_id    in accitems.accdet_id%TYPE,
	in_accitems_id  in accitems.id%TYPE,
	in_ctxdate      in accitems.ctxdate%TYPE,
	in_curbill      in accitems.curbill%TYPE,
	in_avlbal       in accitems.avlbal%TYPE,
	in_blkamt       in accitems.blkamt%TYPE,
	in_txntype      in accitems.txntype%TYPE,
	in_rev          in accitems.rev%TYPE,
	in_txncode      in accitems.txncode%TYPE,
	in_amtbill      in accitems.amtbill%TYPE
)
is
	adjavlbal accbalslog.avlbal%TYPE;
	adjblkamt accbalslog.blkamt%TYPE;
	crdb number(5,0);
begin

	crdb := 1;

	adjblkamt := 0;
	adjavlbal := 0;

	-- Load or auth (debit is increase on blkamt
	if in_txntype in (0,3) then
		crdb := crdb * -1;
	end if;

		-- Reversals
	if (in_rev = '1') then
		crdb := crdb * -1;
	end if;

		-- credit transactioned
	if in_txncode > 20 and in_txncode < 29 then
		crdb := crdb * -1;
	end if;

	-- check if we're adjusting the blocked or available balance
	if in_txntype in (3,4) then
		adjblkamt := in_amtbill;
	else
		adjavlbal := in_amtbill;
	end if;

	dbms_output.put_line( 'in accdet_id [' || in_accdet_id || ']');
	dbms_output.put_line( 'in accitems_id [' || in_accitems_id || ']');


		insert into
		accbalslog
		(
			accdet_id,
			accitems_id,
			ctxdate,
			currcode,
			avlbal,
			blkamt,
			logtype
		)
		select
				in_accdet_id,
				in_accitems_id,
				in_ctxdate,
				in_curbill,
				in_avlbal - adjavlbal,
				in_blkamt - adjblkamt,
				1
			from
				dual
			where not exists
			(
				select *
				from accbalslog
				where in_accdet_id = accbalslog.accdet_id
				  and in_ctxdate = accbalslog.ctxdate
			);

end;
/

prompt
prompt Creating procedure ADDSCOPEDET
prompt ==============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addscopedet
(
	i_id		scopedet.id%type,
	i_descr		scopedet.descr%type,
	i_keyfmtstr	scopedet.keyfmtstr%type,
	i_currfld	scopedet.currfld%type,
	i_descr_full	scopedet.descr_full%type,
	i_scope_type	scopedet.scope_type%type,
	i_priority	scopedet.priority%type
) is
begin
	insert into SCOPEDET (id, descr, keyfmtstr, currfld, descr_full,
			scope_Type, priority) values
		(i_id, i_descr, i_keyfmtstr, i_currfld, i_descr_full,
			i_scope_type, i_priority);
end;
/

prompt
prompt Creating procedure ADDUPD_ACCCONTRA
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_acccontra
(
--	in_inst_id	in accdet.inst_id%TYPE,
--	in_pan		in crddet.pan%TYPE,	-- NMR014859 WLi 16/12/2005
--	in_seqno	in crddet.seqno%TYPE,	-- NMR014859 WLi 16/12/2005
	in_currcode	in accdet.currcode%TYPE,
--	in_accno	in accdet.accno%TYPE,
	in_amtblk	in accitems.amtblk%TYPE,
	in_amtavl	in accitems.amtavl%TYPE,
	in_accdet_id	in accitems.accdet_id%TYPE,
	in_crddet_id	in accitems.crddet_id%TYPE,
	contra_accno	out acccontra.accno%TYPE
)
is
	tmp_pan		crddet.pan%TYPE;	-- NMR014859 WLi 16/12/2005
	tmp_seqno	crddet.seqno%TYPE;	-- NMR014859 WLi 16/12/2005
	contra_inst_id acccontra.inst_id%TYPE;
	in_accdet_id_cp      accdet.id%type := in_accdet_id;
	contra_blkamt	acccontra.blkamt%TYPE;
	contra_avlbal	acccontra.avlbal%TYPE;
begin
	if in_accdet_id_cp is null then
                in_accdet_id_cp := 0;
    end if;
	-- if no branch code, get it from cardholder account
	if (in_crddet_id is NULL or in_crddet_id = 0) then
		begin
			select pan, seqno into tmp_pan, tmp_seqno from crddet
				where accdet_id = in_accdet_id_cp
					and rownum = 1;
		exception when NO_DATA_FOUND then
				contra_accno := 'No Contra Account';
				contra_blkamt := 0.0;
				contra_avlbal := 0.0;
				return;
		end;
	else
		begin
                        select pan, seqno into tmp_pan, tmp_seqno from crddet
                                where id = in_crddet_id
                                        and rownum = 1;
                exception when NO_DATA_FOUND then
                                contra_accno := 'No Contra Account';
                                contra_blkamt := 0.0;
                                contra_avlbal := 0.0;
                                return;
                end;
	end if;
	begin
		select p.progref into contra_accno from crddet c, crdprogram p
			where c.pan = tmp_pan and c.seqno = tmp_seqno
				and c.crdprogram_id = p.id;
	exception when NO_DATA_FOUND then
		contra_accno := ' ';
		contra_blkamt := 0.0;
		contra_avlbal := 0.0;
		return;
	end;
	-- get contra account
	begin
		select acccontra.blkamt, acccontra.avlbal,acccontra.inst_id
			into contra_blkamt, contra_avlbal,contra_inst_id
			from acccontra, accdet
			where accdet.inst_id = acccontra.inst_id
				and accdet.accno = acccontra.accno
				and accdet.currcode = acccontra.currcode
				and accdet.id = in_accdet_id_cp;
	exception when NO_DATA_FOUND then
		insert into acccontra
		(
			inst_id,
			accno,
			currcode,
			blkamt,
			avlbal
		)
		values
		(
			contra_inst_id,		-- inst_id
			contra_accno,		-- accno
			in_currcode,		-- currcode
			0.0,			-- blkamt
			0.0			-- avlbal
		);
		contra_blkamt := 0.0;
		contra_avlbal := 0.0;
	end;
	-- update contra account
	contra_blkamt := contra_blkamt - in_amtblk;
	contra_avlbal := contra_avlbal - in_amtavl;
	update acccontra set
			blkamt = contra_blkamt,
			avlbal = contra_avlbal
		where inst_id = contra_inst_id and accno = contra_accno
			and currcode = in_currcode;
	return;
end;
/

prompt
prompt Creating procedure ADDUPD_CRDDETMISC
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_crddetmisc( crddet_id_IN IN number) is
	isintable number(10,0);
	in_crddet_id      NUMBER(10,0) := crddet_id_IN;
begin
	if in_crddet_id is null then
                in_crddet_id := 0;
    end if;
	SELECT count(*)
        	INTO isintable
	        FROM crddetmisc
	        WHERE crddetmisc.crddet_id=in_crddet_id;
	if isintable = 0 then
		insert into crddetmisc (crddet_id, export, pvvold) values
			(in_crddet_id, 1, NULL);
	else
		update  crddetmisc
		set     export = 1
		where   crddetmisc.crddet_id = in_crddet_id;
	end if;
end;
/

prompt
prompt Creating procedure ADDUPD_DESCR
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_descr(ilang DESCR.lang%TYPE,
				  idescrtag DESCR.descrtag%TYPE,
				  idescr DESCR.descr%TYPE)
as
	icount number;
begin
	select count(*) into icount from DESCR
		where lang=ilang and descrtag=idescrtag;

	if icount = 1 then
		-- Found existing entry
		update DESCR
			set descr=idescr
			where lang=ilang
			and   descrtag=idescrtag;
	else
		-- Not found
		-- So create new
		insert into descr (lang, descrtag, descr)
			values(ilang, idescrtag, idescr);
	end if;
end;
/

prompt
prompt Creating procedure ADDUPD_NUMDESCR
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_numdescr(ilang NUMDESCR.lang%TYPE,
				  idescrtype NUMDESCR.descrtype%TYPE,
				  iid NUMDESCR.id%TYPE,
				  idescr NUMDESCR.descr%TYPE)
as
	icount number;
begin
	select count(*) into icount from NUMDESCR
		where lang=ilang and descrtype=idescrtype and id=iid;

	if icount = 1 then
		-- Found existing entry
		update NUMDESCR
			set descr=idescr
			where lang=ilang
			and   descrtype=idescrtype
			and   id=iid;
	else
		-- Not found
		-- So create new
		insert into numdescr (lang, descrtype, id, descr)
			values(ilang, idescrtype, iid, idescr);
	end if;
end;
/

prompt
prompt Creating procedure ADDUPD_EVENT
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_event
(
	ievent		EVENTCAT.event%type,
	iseverity	EVENTCAT.severity%type,
	ifmtdescr	NUMDESCR.descr%type,
	idescr		DESCR.descr%type,
	ilang		NUMDESCR.lang%type
)
as
	tfrmtref	NUMDESCR.id%type;
	tdescrtag	DESCR.descrtag%type;
	tcount		number;
begin
	select count(*) into tcount
	from eventcat
	where event = ievent;

	if (tcount = 0) then
		select nvl(max(descrtag),0)+1 into tdescrtag
		from DESCR
		where lang=ilang;

		select nvl(max(id),0)+1 into tfrmtref
		from NUMDESCR
		where lang=ilang and descrtype='ef';

		insert into descr (descrtag, descr, lang)
			values(tdescrtag, idescr, ilang);
		insert into numdescr (lang, descrtype, id, descr)
			values(ilang, 'ef', tfrmtref, ifmtdescr);

		insert into eventcat (event, descrtag, severity, frmtref)
			values(ievent, tdescrtag, iseverity, tfrmtref);
	else
		select descrtag, frmtref into tdescrtag, tfrmtref
		from EVENTCAT
		where event = ievent;

		-- now insert/update NUMDESCR/DESCR
                -- before updating eventcat
                addupd_numdescr(ilang, 'ef', tfrmtref, ifmtdescr);
                addupd_descr(ilang, tdescrtag, idescr);

		update eventcat set descrtag = tdescrtag,
				severity = iseverity,
				frmtref = tfrmtref
			where event = ievent;
	end if;
end;
/

prompt
prompt Creating procedure ADDUPD_STRDESCR
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.addupd_strdescr(ilang STRDESCR.lang%TYPE,
				  idescrtype STRDESCR.descrtype%TYPE,
				  itag STRDESCR.tag%TYPE,
				  idescr STRDESCR.descr%TYPE)
as
	icount number;
begin
	select count(*) into icount from STRDESCR
		where lang=ilang and descrtype=idescrtype and tag=itag;

	if icount = 1 then
		-- Found existing entry
		update STRDESCR
			set descr=idescr
			where lang=ilang
			and   descrtype=idescrtype
			and   tag=itag;
	else
		-- Not found
		-- So create new
		insert into strdescr (lang, descrtype, tag, descr)
			values(ilang, idescrtype, itag, idescr);
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_FORCEBIN
prompt =================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_forcebin (
		itermatm_id	TERMATM.id%type,
		ibin		ATMBIN.bin%type) is
	icount	number(10,0);
begin
	select count(termatm_id) into icount
		from ATMBIN where termatm_id = itermatm_id and bin = ibin;

	if (icount = 0) then
		-- record does not exist, create it
		insert into atmbin
			(termatm_id, bin, descr, status, maxload, load, highload)
		values
			(itermatm_id, ibin,
	'Setup by forcebin - notes for unsetup bin received - Check ASAP',
			'1', 999999999, 0, 999999999);

		--creating event for Administratorl
		insert into evlog (id, event, fmodule, fprg, fdate, ftime, evdata,
			ackdate, acktime, ackusr, ackdescr)
		values (0, 'newcashinbin', 'aa', 'ATMSV',
			TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'), 'YYYYMMDD'),
			TO_NUMBER(TO_CHAR(sysdate, 'HH24MISS')), ' ',
			TO_DATE('2263/08/31', 'YYYY/MM/DD'), 0, ' ', ' ');
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_FORCENOTEBIN
prompt =====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_forcenotebin(
		itermatm_id	TERMATM.id%type,
		ibin		ATMBIN.bin%type,
		inoteid		ATMNOTEBIN.noteid%type,
		iecblevel	ATMNOTEBIN.ecblevel%type) is
	icount	number(10,0);
begin
	select count(termatm_id) into icount
		from atmnotebin
			where termatm_id = itermatm_id
				and bin = ibin
				and noteid = inoteid
				and ecblevel = iecblevel;

	if (icount = 0) then
		-- record does not exist, create it
		insert into atmnotebin
			(termatm_id, bin, noteid, ecblevel, load)
		values
			(itermatm_id, ibin, inoteid, iecblevel, 0);
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_INBIN
prompt ==============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_inbin(
		itermatm_id	TERMATM.id%type,
		ibin		ATMBIN.bin%type,
		inoteid		ATMNOTEBIN.noteid%type,
		iecblevel	ATMNOTEBIN.ecblevel%type,
		inotes		ATMNOTEBIN.load%type) is
begin
	-- ensure ATMBIN record is there, if not create
	atmad_forcebin(itermatm_id, ibin);

	update ATMBIN set load = load + inotes
		where termatm_id = itermatm_id and bin = ibin;


	-- ensure ATMNOTEBIN record is there, if not create
	atmad_forcenotebin(itermatm_id, ibin, inoteid, iecblevel);

	update ATMNOTEBIN set load = load + inotes
		where termatm_id = itermatm_id
			and   bin = ibin
			and   noteid = inoteid
			and   ecblevel = iecblevel;
end;
/

prompt
prompt Creating procedure ATMAD_FORCEDRUM
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_forcedrum(
		itermatm_id	TERMATM.id%type,
		idrum		ATMDRUM.drum%type) is
	icount	number(10,0);
begin
	select count(termatm_id) into icount
		from atmdrum where termatm_id = itermatm_id and drum = idrum;

	if (icount = 0) then
		-- record does not exist, create it
		insert into atmdrum
			(termatm_id, drum, descr, status, maxload,
			load, highload, casstype, noteid, added, disp)
		values (itermatm_id, idrum,
		'Setup by forcedrum - Drum not setup but notes received',
			'1', 400, 0, 380, '?', 0, 0, 0);
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_INDRUM
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_indrum(
		itermatm_id	TERMATM.id%type,
		idrum		ATMDRUM.drum%type,
		inotes		ATMNOTEBIN.load%type) is
begin
	-- ensure ATMDRUM record is there, if not create
	atmad_forcedrum(itermatm_id, idrum);

	update ATMDRUM set load = load + inotes, added = added + inotes
		where termatm_id = itermatm_id and drum = idrum;
end;
/

prompt
prompt Creating procedure ATMAD_CASHIN
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_cashin(
				itermatm_id TERMATM.id%type,
				inoteid ATMNOTEID.noteid%type,
				iecblevel ATMNOTEBIN.ecblevel%type,
				iaction ATMNOTECFG.action%type,
				ibincount ATMNOTEBIN.load%type,
				idrum ATMDRUM.drum%type,
				idrumcount ATMDRUM.load%type) is
	-- Convention: everything starting with "x" is local
	xbin		ATMNOTECFG.bin%type;
	xload		ATMBIN.load%type;
	xmaxload	ATMBIN.maxload%type;
	xbinnotes	ATMBIN.load%type;
	xfreespace	ATMBIN.load%type;
	xpriority	ATMNOTECFG.priority%type;
begin
	-- binnotes holds the current number of notes still to
	-- place in a bin
	xbinnotes := ibincount;

	-- Add drumcount notes to the drums
	if (idrumcount > 0)
	then
		-- addcashd adds cash to a drum
		atmad_indrum(itermatm_id, idrum, idrumcount);
	null;
	end if;

	-- get note destinations where
	-- bin status 3 (DVC_PRESENT)
	--            6 (DVC_LOW)
	--            7 (DVC_OUT)
	--            9 (DVC_HIGH)
	for v in (
		select ns.bin bin, cb.load load, cb.maxload maxload,
			ns.priority priority
	--	into xbin, xload, xmaxload, xpriority
		from ATMNOTECFG ns, ATMBIN cb, TERMATM atm
		where atm.id = itermatm_id
		and   atm.notecfg  = ns.notecfg
		and   ns.noteid   = inoteid
		and   ns.ecblevel    = iecblevel
		and   ns.action  = iaction
		and   ns.bin      = cb.bin
		and   cb.termatm_id = atm.id
		and   cb.status in ('3','6','7','9')
		and   cb.load < cb.maxload
		order by ns.priority
	) loop
		xbin := v.bin;
		xload := v.load;
		xmaxload := v.maxload;
		xpriority := v.priority;
		xfreespace := xmaxload - xload;
		if (xbinnotes <= xfreespace) then
			-- all can fit in this bin
			atmad_inbin(itermatm_id, xbin,
					  inoteid, iecblevel, xbinnotes);

			xbinnotes:=0;
			-- jump out of loop
			exit;
		else
			-- more notes than freespace
			-- all to fill up bin
			xbinnotes := xbinnotes - xfreespace;

			atmad_inbin(itermatm_id, xbin,
					  inoteid, iecblevel, xfreespace);
		end if;
	end loop;

	-- if the above algorithm cannot post all the
	-- notes, then add to xbin = 1000 (indicates unknown bin)
	if (xbinnotes > 0) then
		atmad_inbin(itermatm_id, 1000, inoteid, iecblevel, xbinnotes);
	end if;


	-- bin statuses will be updated by the triggers
end;
/

prompt
prompt Creating procedure ATMAD_CHKBIN
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_chkbin(
		i_termatm_id	TERMATM.id%type,
		i_rplndate	ATMADRPLN.rplndate%type,
		i_rplntime	ATMADRPLN.rplntime%type,
		i_bin	 	ATMBIN.bin%type,
		i_tseq    	ATMADRPLN.tseq%type,
		i_newload 	ATMADRPLN.newload%type) is
	x_ctxdate	BATCH.ctxdate%type;
	x_load		ATMBIN.load%type;

	-- defines for local ATMNOTEBIN stuff
	n_bin		ATMNOTEBIN.bin%type;
	n_noteid	ATMNOTEBIN.noteid%type;
	n_ecblevel	ATMNOTEBIN.ecblevel%type;
	n_load		ATMNOTEBIN.load%type;
	n_valid		ATMNOTEBIN.valid%type;
	in_termatm_id	TERMATM.id%type := i_termatm_id;
begin
	if in_termatm_id is null then
		in_termatm_id := 0;
	end if;
        -- ensure ATMBIN record is there, if not create
	atmad_forcebin(in_termatm_id, i_bin);

	-- get existing bin load
	select load into x_load
		from ATMBIN where termatm_id = in_termatm_id and bin = i_bin;

	if (x_load <> i_newload) then
		-- not as expected
		-- must create ATMADRPLN then update ATMDRUM

		-- first get ctxdate
		select date_t into x_ctxdate from msc where tag = 'cursysdate';

		-- now insert ATMADRPLN record for every
		-- note id corresponding to this bin
		for v in (
			select noteid, ecblevel, load, valid
		--	into n_noteid, n_ecblevel, n_load, n_valid
			from ATMNOTEBIN
			where termatm_id = in_termatm_id
			and   bin      = i_bin
		) loop
			n_noteid := v.noteid;
			n_ecblevel := v.ecblevel;
			n_load := v.load;
			n_valid := v.valid;
			-- for noteid+ecblevel specific, put record
			-- in ATMADRPLN to say ATMNOTEBIN cleared to 0
			-- (since counts on noteid/ecblevel are not available)
			-- IG 10Feb2010. REcord unchanged counters if not 0
			if (i_newload <> 0) then
			    insert into ATMADRPLN
				(termatm_id, rplndate, rplntime, bindrum,
				 id, noteid, ecblevel, ctxdate,
				 tseq, origload,newload, valid)
			    values  (in_termatm_id, i_rplndate, i_rplntime, 'B',
				 i_bin, n_noteid, n_ecblevel, x_ctxdate,
				 i_tseq, n_load, i_newload, n_valid);
			else
			    insert into ATMADRPLN
				(termatm_id, rplndate, rplntime, bindrum,
				 id, noteid, ecblevel, ctxdate,
				 tseq, origload,newload, valid)
			values  (in_termatm_id, i_rplndate, i_rplntime, 'B',
				 i_bin, n_noteid, n_ecblevel, x_ctxdate,
				 i_tseq, n_load, 0, n_valid);
			end if;
		end loop;

		n_valid := 1;
		-- if loads are different and newload is non-zero
		-- then ATMNOTEBIN for this atm + bin is
		-- no longer reliable (so set valid=0)
		if (i_newload <> 0) then
			n_valid := 0;
		end if;

		if(((999 = i_bin) or (1000 = i_bin)) and (0 = i_newload)) then
			-- delete ATMNOTEBIN records if bin in (999,1000)
			-- so we will not get these bins to ATMNOTEBINRP
			-- and replenishment report
			delete from ATMNOTEBIN
				where termatm_id = in_termatm_id and bin = i_bin;
		else
			-- now update ATMNOTEBIN to clear
			-- every count for this bin to zero
			-- IG 10Feb2010. Do not change counters if not 0
			if (i_newload <> 0) then
			    update ATMNOTEBIN
				set valid=n_valid
				where termatm_id = in_termatm_id and bin = i_bin;
			else
			    update ATMNOTEBIN
				set load=0, valid=n_valid
				where termatm_id = in_termatm_id and bin = i_bin;
			end if;
		end if;

		-- now add record to ATMADRPLN stating the
		-- change in the total counts
		-- (stored in ATMADRPLN as noteid=0 and ecblevel=0)
		insert into ATMADRPLN
			(termatm_id, rplndate, rplntime, bindrum,
			 id, noteid, ecblevel, ctxdate,
			 tseq, origload, newload, valid)
		values  (in_termatm_id, i_rplndate, i_rplntime, 'B',
			 i_bin, 0, 0, x_ctxdate,
			 i_tseq, x_load, i_newload, 1);

		-- now must update ATMBIN
		update ATMBIN
			set load = i_newload
			where termatm_id = in_termatm_id and bin = i_bin;
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_CHKDRUM
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_chkdrum(
		i_termatm_id	TERMATM.id%type,
		i_rplndate	ATMADRPLN.rplndate%type,
		i_rplntime	ATMADRPLN.rplntime%type,
		i_drum		ATMDRUM.drum%type,
		i_tseq		ATMADRPLN.tseq%type,
		i_newload	ATMADRPLN.newload%type) is
	x_ctxdate	BATCH.ctxdate%type;
	x_load		ATMDRUM.load%type;
	x_disp		ATMDRUM.disp%type;
	x_noteid	ATMDRUM.noteid%type;
	in_termatm_id	TERMATM.id%type := i_termatm_id;
begin
	if in_termatm_id is null then
				in_termatm_id := 0;
    end if;
        -- ensure ATMDRUM record is there, if not create
	atmad_forcedrum(in_termatm_id, i_drum);

	-- get existing drum load
	select load, noteid, disp into x_load, x_noteid, x_disp
		from ATMDRUM where termatm_id = in_termatm_id and drum = i_drum;

	if ((x_load) <> i_newload) then
		-- not as expected
		-- must create ATMADRPLN then update ATMDRUM

		-- first get ctxdate
		select date_t into x_ctxdate from msc where tag = 'cursysdate';

		-- now insert ATMADRPLN record
		-- (ecblevel is always 4 for drums)
		insert into ATMADRPLN
			(termatm_id, rplndate, rplntime, bindrum,
			 id, noteid, ecblevel, ctxdate,
			 tseq, origload, newload, valid)
		values  (in_termatm_id, i_rplndate, i_rplntime, 'D',
			 i_drum, x_noteid, 4, x_ctxdate,
			 i_tseq, x_load, i_newload, 1);

		-- now must update ATMDRUM
		-- NMR022458 D. Fourkiotis
		-- A difference in the counters detected, so columns "added" and "disp"
		-- must be set to 0
		update ATMDRUM
			set load = i_newload, added = 0, disp = 0
			where termatm_id = in_termatm_id and drum = i_drum;
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_DRUMCFG
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_drumcfg(
		i_termatm_id	ATMDRUM.termatm_id%type,
		i_drum		ATMDRUM.drum%type,
		i_noteid	ATMDRUM.noteid%type,
		i_casstype	ATMDRUM.casstype%type,
		i_status	ATMDRUM.status%type) is
	in_termatm_id	ATMDRUM.termatm_id%type := i_termatm_id;
begin
	-- if drum does not exist, create it
	atmad_forcedrum(in_termatm_id, i_drum);

	-- now update the config
	update ATMDRUM
		set	noteid=i_noteid,
			casstype=i_casstype,
			status=i_status
		where termatm_id = in_termatm_id and	drum = i_drum;
end;
/

prompt
prompt Creating procedure ATMAD_FORCETNID
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_forcetnid(
		i_termatm_id	ATMTNID.termatm_id%type,
		i_noteid	ATMTNID.noteid%type) is
	x_count		number(10,0);
	x_count2	number(10,0);
	x_inst_id	ATMNOTEID.inst_id%type;
begin
	select count(termatm_id) into x_count
		from atmtnid where termatm_id = i_termatm_id and noteid = i_noteid;

	if (x_count = 0) then
		-- see if it is in ATMNOTE
		select count(ATMNOTEID.noteid) into x_count2
			from ATMNOTEID, TERMATM, BRANCH
				where ATMNOTEID.inst_id = BRANCH.inst_id
					and   BRANCH.id = TERMATM.branch_id
					and   TERMATM.id = i_termatm_id;
		if (x_count2 = 0) then
			-- get the inst_id
			select BRANCH.inst_id into x_inst_id
				from TERMATM, BRANCH
				where TERMATM.id = i_termatm_id
				and BRANCH.id = TERMATM.branch_id;
			-- create in ATMNOTEID
			insert into atmnoteid
				(inst_id, noteid, currcode, denom, reqstate)
				values (x_inst_id, i_noteid, '000', 0, 'U');
		end if;
		-- record does not exist, create it
		insert into atmtnid (termatm_id, noteid, reqstate, actstate)
			values (i_termatm_id, i_noteid, 'U', 'U');
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_LEVELSUM
prompt =================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_levelsum(
		i_termatm_id in ATMNOTEBIN.termatm_id%type,
		x_level4sum out	ATMNOTEBIN.load%type,
		x_level3sum out	ATMNOTEBIN.load%type,
		x_level2sum out	ATMNOTEBIN.load%type) is
	x_level4count number(10,0);
	x_level3count number(10,0);
	x_level2count number(10,0);
begin

	-- note: retract bin (bin 999) is included here

	select SUM(load),COUNT(load) into x_level4sum, x_level4count
		from ATMNOTEBIN where termatm_id = i_termatm_id and ecblevel = 4;

	select SUM(load),COUNT(load) into x_level3sum, x_level3count
		from ATMNOTEBIN where termatm_id = i_termatm_id and ecblevel = 3;

	select SUM(load),COUNT(load) into x_level2sum, x_level2count
		from ATMNOTEBIN where termatm_id = i_termatm_id and ecblevel=2;

	-- if no records, sums are undefined
	-- so if count is zero for any above, set sum to zero
	if (x_level4count = 0) then
		x_level4sum:=0;
	end if;
	if (x_level3count = 0) then
		x_level3sum:=0;
	end if;
	if (x_level2count = 0) then
		x_level2sum:=0;
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_NOTEID_XMIT
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_noteid_xmit(
		inoteid		ATMNOTEID.noteid%type,
		inewreqstate	ATMNOTEID.reqstate%type,
		ioldreqstate	ATMNOTEID.reqstate%type,
		iinst_id	ATMNOTEID.inst_id%type) is
		in_inst_id	ATMNOTEID.inst_id%type := iinst_id;
begin
	if in_inst_id is null then
				in_inst_id := 0;
    end if;
	if (inewreqstate != ioldreqstate )
	then
		update ATMTNID
		set ATMTNID.reqstate = inewreqstate
		where ATMTNID.noteid = inoteid
		and   ATMTNID.termatm_id
			in (select TERMATM.id from TERMATM, BRANCH
				where BRANCH.inst_id = in_inst_id
				and TERMATM.branch_id = BRANCH.id);
	end if;
end;
/

prompt
prompt Creating procedure ATMAD_UPDBINSTAT
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_updbinstat(
		i_termatm_id	ATMBIN.termatm_id%type,
		i_bin		ATMBIN.bin%type,
		i_status	ATMBIN.status%type) is
		in_termatm_id	TERMATM.id%type := i_termatm_id;
begin
	if in_termatm_id is null then
				in_termatm_id := 0;
    end if;
	-- if atm bin record does not exist,
	-- create it
	atmad_forcebin(in_termatm_id, i_bin);

	-- now update the config
	update ATMBIN
		set	status=i_status
		where termatm_id = in_termatm_id and	bin = i_bin;
end;
/

prompt
prompt Creating procedure ATMAD_UPDNOTEID
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_updnoteid (
		i_termatm_id	TERMATM.id%type,
		i_noteid	ATMNOTEID.noteid%type,
		i_currcode	ATMNOTEID.currcode%type,
		i_denom		ATMNOTEID.denom%type,
		i_reqstate	ATMNOTEID.reqstate%type,
		i_release_num	ATMNOTEID.release_num%type) is
	x_inst_id	ATMNOTEID.inst_id%type;
	in_termatm_id	TERMATM.id%type := i_termatm_id;
begin
	if in_termatm_id is null then
				in_termatm_id := 0;
    end if;

	select BRANCH.inst_id
	into x_inst_id
	from TERMATM, BRANCH
	where TERMATM.id = in_termatm_id
	and TERMATM.branch_id = BRANCH.id;

	-- if atm terminal note id record does not exist,
	-- create it
	atmad_forcetnid(in_termatm_id, i_noteid);

	-- now update the config
	update ATMNOTEID
	set	currcode=i_currcode, denom=i_denom, release_num=i_release_num, reqstate=i_reqstate
	where inst_id = x_inst_id
	and	noteid = i_noteid;
end;
/

prompt
prompt Creating procedure ATMAD_UPDNOTESTAT
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_updnotestat(
		i_termatm_id	ATMTNID.termatm_id%type,
		i_noteid	ATMTNID.noteid%type,
		i_actstate	ATMTNID.actstate%type) is
		in_termatm_id      ATMTNID.termatm_id%type := i_termatm_id;
begin
	if in_termatm_id is null then
				in_termatm_id := 0;
    end if;
	-- if atm terminal note id record does not exist,
	-- create it
	atmad_forcetnid(in_termatm_id, i_noteid);

	-- now update the config
	update ATMTNID
		set	actstate=i_actstate
		where termatm_id = in_termatm_id and	noteid = i_noteid;
end;
/

prompt
prompt Creating procedure ATMAD_UPDNOTESTATES
prompt ======================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.atmad_updnotestates (
		i_termatm_id	ATMTNID.termatm_id%type,
		i_noteid	ATMTNID.noteid%type,
		i_actstate	ATMTNID.actstate%type,
		i_reqstate	ATMTNID.reqstate%type) is
	in_termatm_id	ATMTNID.termatm_id%type := i_termatm_id;
begin
	if in_termatm_id is null then
				in_termatm_id := 0;
    end if;
	-- if atm terminal note id record does not exist,
	-- create it
	atmad_forcetnid(in_termatm_id, i_noteid);

	-- now update the config
	update ATMTNID
	set	actstate = i_actstate, reqstate = i_reqstate
	where
		termatm_id = in_termatm_id
	and	noteid = i_noteid;
end;
/

prompt
prompt Creating procedure CCS_CREATE_CCSJ_RECORDS
prompt ==========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.ccs_create_ccsj_records (
        accid    in CCSACCDET.acc_id%type) AS

BEGIN
	insert into CCSDUECMP (acc_id) values (accid);
	insert into CCSNOTDUECMP (acc_id) values (accid);
	insert into CCSDUEAGECMP (acc_id) values (accid);
	insert into CCSDUEAGEDET (acc_id) values (accid);
END;
/

prompt
prompt Creating procedure CCS_INS_CCSACCEVENT
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_ccsaccevent
	(
		in_acc_id	NUMBER,
		in_amt1		FLOAT,
		in_amt2		FLOAT,
		in_evdata	VARCHAR2,
		in_evtype 	NUMBER
	)
AS
	in_ctxdate DATE;
BEGIN
	SELECT ccs_eod_pkg.get_processing_date() INTO in_ctxdate FROM dual;

	INSERT INTO ccsaccevent
	(
		verno_ctx,
		acc_id,
		evtype,
		pending,
		amtfee,
		feeapply,
		data,
		amt1,
		amt2,
		evdate,
		ctxdate,
		localdate,
		glposted
	)
	VALUES
	(
		1,			-- verno_ctx
		in_acc_id,		-- acc_id
		in_evtype,			-- evtype
		0,			-- pending
		0,			-- amtfee
		0,			-- feeapply
		in_evdata,		-- data
		in_amt1,		-- amt1
		in_amt2,		-- amt2
		TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'), 'YYYYMMDD'), -- evdate
		in_ctxdate,		-- sysdate
		TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'), 'YYYYMMDD'), -- localdate
		0			-- glposted
	);
END;
/

prompt
prompt Creating procedure CCS_INS_CLEDATE_CHANGE
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_cledate_change
	(
		acc_id		NUMBER,
		cledate1		DATE,
		cledate2		DATE
	)
	AS
		evdata VARCHAR2(128);
	BEGIN
		IF (cledate1 IS NULL) THEN
			evdata := '0~' || cledate2;
		ELSE
			evdata := cledate1 || '~' || cledate2;
		END IF;

		ccs_ins_ccsaccevent(acc_id , 0, 0, evdata, 15);
END;
/

prompt
prompt Creating procedure CCS_INS_CREDIT_CHANGE
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_credit_change
	(
		in_acc_id	NUMBER,
		in_amt1		FLOAT,
		in_amt2		FLOAT
	)
AS
	in_evdata VARCHAR2(128);
BEGIN
	-- Set up the event data to this
	-- 3 decimals only, NMR010401 WLi 22/3/2004
	in_evdata := trunc(in_amt1,3) || '~' || trunc(in_amt2,3);

	-- Call the main function to add the data
	ccs_ins_ccsaccevent(in_acc_id, in_amt1, in_amt2, in_evdata, 4);

END;
/

prompt
prompt Creating procedure CCS_INS_DLNQ_CHANGE
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_dlnq_change
	(
		in_acc_id	NUMBER,
		in_amt1		FLOAT,
		in_amt2		FLOAT,
		in_dlnqval1	FLOAT,
		in_dlnqval2	FLOAT,
		in_balance	FLOAT,
		in_payments	FLOAT
	)
AS
	in_evdata VARCHAR2(128);

BEGIN
	-- Set up the event data to this
	-- 3 decimals only, NMR010401 WLi 22/3/2004
	in_evdata := in_dlnqval1 || '~' || in_dlnqval2 || '~' || trunc(in_balance,3) || '~' || trunc(in_payments,3);

	-- Call the main function to add the data
	ccs_ins_ccsaccevent(in_acc_id, in_amt1, in_amt2, in_evdata, 3);

END;
/

prompt
prompt Creating procedure CCS_INS_LIMITGRANTED_CHANGE
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_limitgranted_change
	(
		in_acc_id	NUMBER,
		in_amt1		FLOAT,
		in_amt2		FLOAT
	)
AS
	in_evdata VARCHAR2(128);
BEGIN
	in_evdata := trunc(in_amt1,3) || '~' || trunc(in_amt2,3);

	ccs_ins_ccsaccevent(in_acc_id, in_amt1, in_amt2, in_evdata, 14);

END;
/

prompt
prompt Creating procedure CCS_INS_LIMIT_CHANGE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_limit_change
	(
		l_evtype	NUMBER,		-- CCS 1.2
		l_acc_id	NUMBER,
		l_limit		FLOAT,
		l_balance	FLOAT,
		l_chrgprfid	CHAR,
		l_scheme	CHAR,
		l_inst_id	NUMBER
	)
AS
	-- Note in this stored procedure the values
	-- passed in start l_ to avoid confusion
	-- in select statements later on

	in_evdata 	VARCHAR2(128);
	amt1		FLOAT(126);
	amt2		FLOAT(126);
	authover_amt	FLOAT(126);
	ovrlim 	FLOAT(126);
	ovrlim_count	NUMBER(10,0);
	authover_count	NUMBER(10,0);
BEGIN
	-- Check that we have results so that
	-- we don't terminate too early
	SELECT 	count(*)
	INTO 	ovrlim_count
	FROM	CCSSCHEME
	WHERE	CCSSCHEME.inst_id   = l_inst_id
	AND	CCSSCHEME.chrgprfid  = l_chrgprfid
	AND	CCSSCHEME.scheme     = l_scheme;

	-- Provided we have results - get the value
	IF (ovrlim_count = 1) THEN
		SELECT 	ovrlimtol
		INTO	ovrlim
		FROM	CCSSCHEME
		WHERE	CCSSCHEME.inst_id   = l_inst_id
		AND	CCSSCHEME.chrgprfid  = l_chrgprfid
		AND	CCSSCHEME.scheme     = l_scheme;

	-- Otherwise set the value to 0
	ELSE
		ovrlim := 0;
	END IF;


	-- Check the we have results so that
	-- we don't terminate too early
	SELECT 	count(*)
	INTO	authover_count
	FROM	AUTHOVER
	WHERE	AUTHOVER.accdet_id = l_acc_id;

	-- Provided we have restuls - get the value
	IF (authover_count = 1) THEN
		SELECT 	AUTHOVER.amt
		INTO	authover_amt
		FROM	AUTHOVER
		WHERE	AUTHOVER.accdet_id	= l_acc_id;

	-- Otherwise set the value to 0
	ELSE
		authover_amt := 0;
	END IF;

	-- Set up these values
	amt1   := l_limit + ovrlim + authover_amt;
	amt2   := l_balance;
	-- 3 decimals only, NMR010401 WLi 22/3/2004
	in_evdata := trunc(l_limit,3) || '~' || trunc(l_balance,3) || '~' || trunc(ovrlim,3) || '~' || trunc(authover_amt,3);

	-- Call the function to add the data
	ccs_ins_ccsaccevent(l_acc_id, amt1, amt2, in_evdata, l_evtype);

END;
/

prompt
prompt Creating procedure CCS_INS_NEW_ACCOUNT
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_new_account
	(
		in_acc_id	NUMBER,
		in_amt		FLOAT
	)
AS
	in_evdata VARCHAR2(128);
BEGIN
	-- Set up the event data to this
	in_evdata := trunc(in_amt,3);

	-- Call the main function to add the data
	ccs_ins_ccsaccevent(in_acc_id, in_amt, 0,
				in_evdata, 10);

END;
/

prompt
prompt Creating procedure CCS_INS_PHASE_CHANGE
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ccs_ins_phase_change
	(
		in_evtype	NUMBER,		-- CCS 1.2
		in_acc_id	NUMBER,
		in_limit	FLOAT,
		in_amt2		FLOAT,
		in_amt1		FLOAT
	)
AS
	in_evdata VARCHAR2(128);
BEGIN
	-- Set up the event data to this
	-- 3 decimals only, NMR010401 WLi 22/3/2004
	in_evdata := in_amt1 || '~' || trunc(in_amt2,3) || '~' || trunc(in_limit,3);

	-- Call the main function to add the data
	ccs_ins_ccsaccevent(in_acc_id, in_amt1, in_amt2, in_evdata, in_evtype);

END;
/

prompt
prompt Creating procedure CHANGE_CCYCLE_CNT
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.change_ccycle_cnt(
	cyccode IN ccycle.cyclecode%type,
	amt IN ccycle.accs_in_cycle%type)
is
begin
	update	ccycle
		set	accs_in_cycle =  accs_in_cycle + amt
		where	cyclecode = cyccode;
end;
/

prompt
prompt Creating procedure CHECK_AND_COPY_ATMNOTEBIN
prompt ============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.check_and_copy_atmnotebin(
		itermatm_id	ATMNOTEBINRP.termatm_id%type,
		ictxdate	ATMNOTEBINRP.ctxdate%type,
		iadddate	ATMNOTEBINRP.adddate%type,
		iaddtime	ATMNOTEBINRP.addtime%type) is

	-- Convention: everything starting with "x" is local
	xbin		ATMNOTEBIN.bin%type;
	xnoteid		ATMNOTEBIN.noteid%type;
	xecblevel	ATMNOTEBIN.ecblevel%type;
	xload		ATMNOTEBIN.load%type;
	xvalid		ATMNOTEBIN.valid%type;
	xcount		number(10,0);
begin
	for r in (
		select nb.bin, nb.noteid, nb.ecblevel, nb.load, nb.valid
		from ATMNOTEBIN nb
		where nb.termatm_id = itermatm_id
	) loop
		xbin := r.bin;
		xnoteid := r.noteid;
		xecblevel := r.ecblevel;
		xload := r.load;
		xvalid := r.valid;

		select count(termatm_id) into xcount
		from ATMNOTEBINRP
		where termatm_id = itermatm_id and
			ctxdate = ictxdate and
			noteid = xnoteid and
			ecblevel = xecblevel and
			bin = xbin;

		if (xcount = 0) then
			insert into ATMNOTEBINRP
				(termatm_id, ctxdate, adddate, addtime,
				bin, noteid, ecblevel, load, valid)
			values (itermatm_id, ictxdate, iadddate, iaddtime,
				xbin, xnoteid, xecblevel, xload, xvalid);
		end if;
	end loop;
end;
/

prompt
prompt Creating procedure CHG_ACCDET_CRED
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.chg_accdet_cred(accdet_id IN accdet.id%type,
				   acclim IN accdet.credit_limit%type)
--Ensure that changes to acclimit.totlim_amt are refected in the accdet
is
	in_accdet_id      accdet.id%type := accdet_id;
begin
	if in_accdet_id is null then
                in_accdet_id := 0;
    end if;
update	accdet
set	credit_limit = acclim
where	id = accdet_id
and     classid = 3;
end;
/

prompt
prompt Creating procedure CLOSE_CRDBTCH
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.close_crdbtch( batch   number)
as
        in_batch           number(10,0) := batch;
begin
	NULL;
end;
/

prompt
prompt Creating procedure COPY_REPLACED_CARD_ADDRESS
prompt =============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.copy_replaced_card_address(old_crddet_id_IN IN number,
                                                new_crddet_id_IN IN number)
   is
    old_in_crddet_id       NUMBER(10,0) := old_crddet_id_IN;
    new_in_crddet_id       NUMBER(10,0) := new_crddet_id_IN;

begin

    FOR prt_pcmp_media_res IN(
        SELECT prt_pcmp_media.mediatype_id,
               prt_pcmp_media.media_id,
               prt_pcmp_media.prt_cmpt_id,
               prt_pcmp_media.prt_party_id,
               prt_pcmp_media.prt_cm_id,
               prt_pcmp_media.prt_cmt_id,
               prt_pcmp_media.prt_prt_id,
               prt_pcmp_media.prt_pcm_from_date,
               prt_pcmp_media.prt_pcmp_from_date
        FROM prt_pcmp_media
        WHERE
            prt_pcmp_media.media_id = old_in_crddet_id
        and prt_pcmp_media.mediatype_id = 0
    )
    LOOP
        insert into prt_pcmp_media
                   (mediatype_id,
                    media_id,
                    prt_cmpt_id,
                    prt_party_id,
                    prt_cm_id,
                    prt_cmt_id,
                    prt_prt_id,
                    prt_pcm_from_date,
                    prt_pcmp_from_date)
            values (prt_pcmp_media_res.mediatype_id,
                    new_in_crddet_id,
                    prt_pcmp_media_res.prt_cmpt_id,
                    prt_pcmp_media_res.prt_party_id,
                    prt_pcmp_media_res.prt_cm_id,
                    prt_pcmp_media_res.prt_cmt_id,
                    prt_pcmp_media_res.prt_prt_id,
                    prt_pcmp_media_res.prt_pcm_from_date,
                    prt_pcmp_media_res.prt_pcmp_from_date);
    END LOOP;

end;
/

prompt
prompt Creating procedure CO_CONTEXT_SET_PENDING_EVENT
prompt ===============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.co_context_set_pending_event (state boolean,  id number) is
	int_state number;
begin
	if(state= true) then
		int_state:=1;
	else
		int_state:=0;
	end if;

	update co_context set event_pending=int_state where co_context.id=id;
end;
/

prompt
prompt Creating procedure CRD_CHG_ACCSTAT
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.crd_chg_accstat
(
	in_crddet_id	in cdsthst.crddet_id%TYPE,
	in_old_statcode	in cdsthst.old_statcode%TYPE,
	in_new_statcode	in cdsthst.new_statcode%TYPE
)
is
	tmp NUMBER(5,0);
begin
	-- Procedure does nothing
	-- create customer specific procedure insteas if need (as in mbr26)
	tmp := 0;
	return;
end;
/

prompt
prompt Creating procedure CREATE_CRDPRODSECCHK
prompt =======================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.create_crdprodsecchk(inst_id IN inst.id%type, crdproduct_id IN crdproduct.id%type)
is
	in_inst_id      inst.id%type := inst_id;
	in_crdproduct_id	crdproduct.id%type := crdproduct_id;
begin

	null;

end;
/

prompt
prompt Creating procedure CREATE_INSTSECCHK
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.create_instsecchk(inst_id IN inst.id%type)
is
	in_inst_id      inst.id%type := inst_id;
begin

	null;

end;
/

prompt
prompt Creating procedure CREATE_NEW_CRDBTCH
prompt =====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.create_new_crdbtch(
        new_batch           out varchar2,
        inst_id             in number,
        crdproduct_id       in number,
        status              in number,
        createdate          in date,
        usr                 in varchar2,
        cardcount           in number,
        date_cardpro        in date,
        date_pinpro         in date,
        priority            in char,
        btchtyp             in number,
        delvaddr            in char,
        batch_cat           in varchar2,
        options             in varchar2
    )
as
        in_batch              number(10,0) ;
begin
    new_batch := 0;
end;
/

prompt
prompt Creating procedure DECREASE_CARDCOUNT_IN_BATCH
prompt ==============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.decrease_cardcount_in_batch( batch number )
as
        in_batch       number(10,0) := batch;
begin
   NULL;
end;
/

prompt
prompt Creating procedure DEL_EUROSTR
prompt ==============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.del_eurostr(del_id_IN IN number) is
del_id number(10,0) := del_id_IN;
begin
	delete from eurostr where eurostr.id=del_id;
end;
/

prompt
prompt Creating procedure DERIVE_CARD_BATCH
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.derive_card_batch(
        new_batch   out      number,
        batch       in       number,
		crdproduct  in       number)
as
		-- output batch
		out_batch           number(5, 0);
begin
    new_batch := 0;
end;
/

prompt
prompt Creating procedure INCREASE_CARDCOUNT_IN_BATCH
prompt ==============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.increase_cardcount_in_batch(
        new_batch           out number,
        batch               in  number,
        inst_id             in  number,
        crdproduct_id       in  number,
        status              in  number,
        createdate          in  date,
        usr                 in  varchar2,
        cardcount           in  number,
        date_cardpro        in  date,
        date_pinpro         in  date,
        priority            in  char,
        btchtyp             in  number,
        delvaddr            in  char,
        batch_cat           in  varchar2,
        options             in  varchar2
	)
as
        in_batch                  number(10,0) := batch;
begin
	new_batch := 0;
end;
/

prompt
prompt Creating procedure INS_DESCR_ZH
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.ins_descr_zh
AS
	strdescrrecord strdescr%rowtype;
	cursor strdescrcursor is
		select * from STRDESCR where lang='EN';

 begin
	open strdescrcursor;
	loop
		fetch strdescrcursor into strdescrrecord;
		exit when strdescrcursor%notfound;

                insert into STRDESCR values(strdescrrecord.VERNO_CTX,'ZH',strdescrrecord.DESCRTYPE,strdescrrecord.TAG,strdescrrecord.DESCR);

	end loop;
	close strdescrcursor;
	commit;

END;
/

prompt
prompt Creating procedure LOG_ACC_STATCHG
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.log_acc_statchg
(
	in_inst_id	accdet.inst_id%TYPE,
	in_branch_id	accdet.branch_id%TYPE,
	in_currcode	accdet.currcode%TYPE,
	in_accno	accdet.accno%TYPE,
	in_statcode	accdet.statcode%TYPE,
	in_blkamt	accdet.blkamt%TYPE,
	in_avlbal	accdet.avlbal%TYPE,
	in_unclrcredit	accdet.unclrcredit%TYPE
)
is
	use_ai	number(10);
	stdescr	accstatus.descr%TYPE;
	sdate	date;
	accdet_id accitems.accdet_id%TYPE;
	crddet_id accitems.crddet_id%TYPE;
	in_inst_id_cp      accdet.inst_id%TYPE := in_inst_id;
	in_branch_id_cp      accdet.branch_id%TYPE := in_branch_id;
begin
	if in_inst_id_cp is null then
                in_inst_id_cp := 0;
    end if;

	if in_branch_id_cp is null then
                in_branch_id_cp := 0;
    end if;
	-- check the logging flag
	begin
		select long_t into use_ai from msc
			where tag = 'use_accitems' and idx = 1;
		if (use_ai <= 0) then
			return;
		end if;
	exception when NO_DATA_FOUND then
		return;
	end;
	-- get current system date
	begin
		select date_t into sdate from msc
			where tag = 'cursysdate' and idx = 1;
	exception when NO_DATA_FOUND then
		return;
	end;
	-- get status description
	begin
		select descr into stdescr from accstatus
			where statcode = in_statcode;
	exception when NO_DATA_FOUND then
		stdescr := in_statcode;
	end;
	-- mvitolin CTXMAINT-2654 12/09/2012, new columns unclrcredit,
	-- unclrcreditdiff
	-- get accdet_id
	begin
		select id into accdet_id from accdet
			where inst_id = in_inst_id_cp and accno  =in_accno
			and currcode = in_currcode ;
	exception when NO_DATA_FOUND then
		return;
	end;
	-- get crddet_id
	begin
		select crddet_id into crddet_id from crdacc
			where accdet_id = accdet_id;
	exception when NO_DATA_FOUND then
		return;
	end;
	insert into accitems
	(
		id             ,--      serial
		msgid          ,--      integer
	--	instcode       ,--      char(4)
		branch_id      ,--      integer
	--	pan            ,--      varchar(19,0)
	--	crdseqno       ,--      smallint
	--	accno          ,--      varchar(28,0)
		accstat        ,--      char(2)
		conaccno       ,--      varchar(28,0)
		datelocal      ,--      date
		timelocal      ,--      integer
		ctxdate        ,--      date
		txntype        ,--      smallint
		rev            ,--      char(1)
		txncode        ,--      smallint
		crdacptid      ,--      varchar(15,0)
		amtbill        ,--      float
		curbill        ,--      char(3)
		tlogid         ,--      integer
		amtblk         ,--      float
		amtavl         ,--      float
		blkamt         ,--      float
		avlbal         ,--      float
		--blkamtsusp     ,--      float
		--avlbalsusp     ,--      float
		description    ,--      varchar(40,0)
		accdet_id	,--	integer
		crddet_id	,--	integer
		unclrcredit    ,--      float(126)
		unclrcreditdiff --      float(126)
	)
	values
	(
		0,		-- id
		0,		-- msgid
	--	in_instcode,	-- instcode
		in_branch_id_cp,	-- branch_id
	--	' ',		-- pan
	--	0,		-- crdseqno
	--	in_accno,	-- accno
		in_statcode,	-- accstat
		' ',		-- conaccno
		TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'),'YYYYMMDD'), -- datelocal
		to_number(to_char(sysdate, 'HH24MISS')),	-- timelocal
		sdate,		-- ctxdate
		8,		-- txntype
		'0',		-- rev
		0,		-- txncode
		' ',		-- crdacptid
		0,		-- amtbill
		in_currcode,	-- curbill
		0,		-- tlogid
		0,		-- amtblk
		0,		-- amtavl
		in_blkamt,	-- blkamt
		in_avlbal,	-- avlbal
		--0,		-- blkamtsusp
		--0,		-- avlbalsusp
		'Changed status to ' || stdescr,	-- description
		accdet_id,
		crddet_id,
		in_unclrcredit,	-- unclrcredit
		0		-- unclrcreditdiff
	);
	return;

end;
/

prompt
prompt Creating procedure PAGER
prompt ========================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.Pager
(
	@WhichTable VARCHAR(255)--è¡¨åãè§å¾å
	,@KeyCol VARCHAR(255)--è¡¨æè§å¾çé®å?
	,@Col VARCHAR(255)--åå(ææ?)
	,@SearchStr VARCHAR(1000)--æ¡ä»¶å­å¥
	,@OrderStr VARCHAR(1000)--æåºå­å¥
	,@PageNo INT--å½åé¡µç 
	,@PageSize INT--æ¯é¡µæ¾ç¤ºæ¡æ°
	,@PageCount INT OUTPUT--é¡µæ°
	,@Cnt INT OUTPUT--æ»æ¡æ?
)
AS
BEGIN
	DECLARE @SqlText NVARCHAR(4000),@TmpCol VARCHAR(1000),@Cur CURSOR,@TmpColName VARCHAR(200)
	SET @SqlText=unistr('\0053\0045\004C\0045\0043\0054\0020\0040\0043\006E\0074\003D\0043\006F\0075\006E\0074\0028')+@KeyCol+') FROM '+ @WhichTable  +' WHERE 1=1 '+@SearchStr
  EXEC sp_executesql @SqlText,unistr('\0040\0043\006E\0074\0020\0049\004E\0054\0020\004F\0055\0054\0050\0055\0054'),@Cnt OUTPUT
  IF @Cnt%@PageSize>0
    SET @PageCount=@Cnt/@PageSize+1
  ELSE
    SET @PageCount=@Cnt/@PageSize
  IF LEN(@OrderStr)=0 SET @OrderStr=' ORDER BY '+@KeyCol
  SET @SqlText=unistr('\0053\0045\004C\0045\0043\0054\0020')+@Col+' FROM '+@WhichTable+' WHERE '+@KeyCol+' IN (SELECT TOP '+CAST(@PageSize AS VARCHAR(8))+' '+@KeyCol
    +' FROM (SELECT '+@KeyCol+',ROW_NUMBER() OVER('+@OrderStr+') AS _Row_Num FROM '+@WhichTable+' WHERE 1=1 '+@SearchStr+') AS T WHERE _Row_Num > '
    +CAST((@PageSize*(@PageNo-1)) AS VARCHAR(8))+' ORDER BY _Row_Num)'+@OrderStr
  PRINT @SqlText
  EXEC sp_executesql @SqlText
--  EXEC(@SqlText)
--  SET @Cnt= @@ROWCOUNT
END
/

prompt
prompt Creating procedure PRINT_SERVICE
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.print_service is
  t_maxtag number;
begin
  --delete from descr where descr = 'Print service' and lang = 'EN';
  --delete from msc where tag = 'printservice';

  select max(descrtag) + 1 into t_maxtag from descr;

  insert into descr(descrtag, descr, lang)
  values (t_maxtag,'Print service','EN');
  insert into descr(descrtag, descr, lang)
  values (t_maxtag,'Print service','GB');

  insert into msc (tag, idx, mscmodule, descr, mask, string_t, long_t, short_t, double_t, date_t)
  values ('printservice', 1, 'ia', t_maxtag, 1, 'ENCPRINT', 0, 0, 0.0,  TO_DATE('2263-08-31','YYYY-MM-DD'));

  commit;
end;
/

prompt
prompt Creating procedure PROC_CREATEBLL
prompt =================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.proc_createBLL( tbname IN varchar2,text OUT varchar2) is
  in_tbname varchar2(30) := tbname;
begin

  text :=''
  text :=text+'using System;'+char(10)
  text :=text+'using AbstractFactory;'+char(10)
  text :=text+'using System.Reflection;'+char(10)

  text :=text+'namespace BLL'+char(10)
  text :=text+'{'+char(10)
  text :=text+char(9)+'public class '+@tbname+'BLL'+char(10)
  text :=text+char(9)+'{'+char(10)
  text :=text+char(9)+char(9)+'public static I'+@tbname+' Creator(string className)'+char(10)
  text :=text+char(9)+char(9)+'{'+char(10)
  text :=text+char(9)+char(9)+char(9)+'return (I'+@tbname+')Assembly.Load("DAL").CreateInstance(string.Format("DAL.'+@tbname+'DAL.{0}", className), true);'+char(10)
	text :=text+char(9)+char(9)+'}'+char(10)
	text :=text+char(9)+'}'+char(10)
	text :=text+'}'+char(10)
end;
/

prompt
prompt Creating procedure PRO_TRANSACTION_RECORDS
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.PRO_TRANSACTION_RECORDS IS

  -- Author  : ÁõÍþ
  -- Created : 20170224
  -- Purpose : Ìæ»»³ÉÃû£¬Éú³ÉÁ÷Ë®±í transactionrecords

  --DAILY_DATE VARCHAR2(10) := '20170110';

  -- DECLARE
  DAILY_DATE VARCHAR2(10);

BEGIN

  SELECT TO_CHAR(SYSDATE, 'yyyymmdd') INTO DAILY_DATE FROM DUAL; --²âÊÔ£¬µ±ÌìÊý¾Ýµ±ÌìÅÜ
  --SELECT TO_CHAR(SYSDATE - 1, 'yyyymmdd') INTO DAILY_DATE FROM DUAL; --Éú²ú£¬µ±ÌìÊý¾ÝµÚ¶þÌìÅÜ

  DELETE FROM TRANSACTIONRECORDS T WHERE T.TRANSACTIONDATE = DAILY_DATE;

  INSERT INTO TRANSACTIONRECORDS
    (ID,
     MERCHANTNUMBER,
     TERMINALNUMBER,
     CARDNUMBER,
     TRANSACTIONMONEY,
     CARDACCOUNTMONEY,
     TRUEACCOUNTMONEY,
     INTEGRATIONACCOUNTMONEY,
     SERIALNUMBER,
     LOTNO,
     REFERENCENUMBER,
     RETURNPOINTS,
     TRANSACTIONTYPE,
     TRANSACTIONSTATUS,
     CARDTYPE,
     CARDTYPENAME,
     MERCHANTTYPE,
     MERCHANTSECTORS,
     PROVINCE,
     CITY,
     AREA,
     DATASOURCEID,
     ADDDATE,
     SETTLEMENTACCOUNT,
     PERFEE,
     TRANSACTIONDATE,
     TRANSACTIONTIME,
     TERMINALLOCATION,
     DATASOURCE,
     TLOGID,
     TLOGADDDATE,
     SETTLEMENTDATE,
     ISEXCLUSIVE,
     CONSUMETYPE,
     STANORG,
     RRN,
     TERMTYPE,
     TERMSEQ,
     PAN,
     AIID,
     TXNSRC,
     TXNSRCORG,
     TXNCODE,
     TXNSTATUS,
     CURTXN,
     AMTTXN,
     AMTTXNFEE,
     AMTPROCFEE,
     AMTTXNORG,
     ACTYPE1,
     ACNUM1,
     ACTYPE2,
     ACNUM2,
     RSPCODE,
     REASONCODE,
     APRVLCODE,
     SYSDATES,
     RATEBILL,
     RATESET,
     ADDDATA,
     SUB_TXNCODE,
     FLAG,
     AGETINEGRAL,
     ORDERNUMBER,
     AMTBILL,
     CURBILL,
     OLDSERIALNUMBER,
     OLDLOTNO,
     OLDREFERENCENUMBER,
     OLDTRANSDATE,
     OLDTRANSTIME,
     FNCODE,
     TRACE_NO,
     TRAN_RRN,
     BATCH_NO)
    SELECT TO_NUMBER(ID),
           MERCHANTNUMBER,
           TERMINALNUMBER,
           CARDNUMBER,
           TRANSACTIONMONEY,
           CARDACCOUNTMONEY,
           TRUEACCOUNTMONEY,
           INTEGRATIONACCOUNTMONEY,
           SERIALNUMBER,
           LOTNO,
           REFERENCENUMBER,
           RETURNPOINTS,
           TRANSACTIONTYPE,
           TRANSACTIONSTATUS,
           CARDTYPE,
           TRIM(CARDTYPENAME),
           MERCHANTTYPE,
           MERCHANTSECTORS,
           PROVINCE,
           CITY,
           AREA,
           DATASOURCEID,
           ADDDATE,
           SETTLEMENTACCOUNT,
           PERFEE,
           TRANSACTIONDATE,
           TRANSACTIONTIME,
           TERMINALLOCATION,
           DATASOURCE,
           TLOGID,
           TLOGADDDATE,
           SETTLEMENTDATE,
           ISEXCLUSIVE,
           CONSUMETYPE,
           STANORG,
           RRN,
           TERMTYPE,
           TERMSEQ,
           PAN,
           AIID,
           TXNSRC,
           TXNSRCORG,
           TXNCODE,
           TXNSTATUS,
           CURTXN,
           AMTTXN,
           AMTTXNFEE,
           AMTPROCFEE,
           AMTTXNORG,
           ACTYPE1,
           ACNUM1,
           ACTYPE2,
           ACNUM2,
           RSPCODE,
           REASONCODE,
           APRVLCODE,
           SYSDATES,
           RATEBILL,
           RATESET,
           ADDDATA,
           SUB_TXNCODE,
           FLAG,
           AGETINEGRAL,
           ORDERNUMBER,
           '',
           '',
           OLDSERIALNUMBER,
           OLDLOTNO,
           OLDREFERENCENUMBER,
           OLDTRANSDATE,
           OLDTRANSTIME,
           '',
           '',
           '',
           ''
      FROM T_TRANSACTION_RECORDS_HIS@DBLINK_TO_FKSLT
     WHERE TRANSACTIONDATE = DAILY_DATE;
  COMMIT;
  --½«Ô­À´¿¨ÏµÍ³µÄ Á÷Ë®ºÅ£¬²Î¿¼ºÅ£¬Åú´ÎºÅ ÓÃÇ°ÖÃÏµÍ³µÄ Á÷Ë®ºÅ£¬²Î¿¼ºÅ£¬Åú´ÎºÅ ´úÌæ¡£
  --ÉÌ»§ºÅ¡¢ÖÕ¶ËºÅ£¬²Î¿¼ºÅ£¬¿ÉÒÔÎ¨Ò»È·¶¨Ò»±ÊÇ°ÖÃÏµÍ³µÄ½»Ò×Á÷Ë®
  UPDATE TRANSACTIONRECORDS T
     SET (T.TRACE_NO, T.TRAN_RRN, T.BATCH_NO) =
         (SELECT T1.TRACE_NO, T1.TRAN_RRN, T1.BATCH_NO
            FROM T_CUR_TRAN_LS_HIS@DBLINK_TO_FKSLT T1
           WHERE T1.BANK_SYS_DATE = DAILY_DATE
             AND T1.MERCHANT_ID = T.MERCHANTNUMBER
             AND T1.TERMINAL_ID = T.TERMINALNUMBER
             AND T1.TRACE2 = T.REFERENCENUMBER)
   WHERE T.TRANSACTIONDATE = DAILY_DATE;
  COMMIT;

  --20170517,ÐÂÔö¼ÓÉÌ»§£¬ÓÅ»ÝÈ¯½ð¶î 
  UPDATE TRANSACTIONRECORDS T
     SET T.FREE_FIELD =
         (SELECT DECODE(T.TXNCODE, 20, -1, 1) *
                 (SUBSTR(RMK2, 2, 12) / 100.00)
            FROM T_ORDER_INFO@DBLINK_TO_FKUIT T2
           WHERE T.MERCHANTNUMBER = T2.MER_NO
             AND T.TERMINALNUMBER = T2.TERM_NO
             AND T.TRACE_NO = T2.TRACE_NO
             AND T.BATCH_NO = T2.BATCH_NO
             AND T.TRAN_RRN = T2.RRN)
   WHERE T.TRANSACTIONDATE = DAILY_DATE
     AND T.MERCHANTNUMBER != '999999999999997';

  COMMIT;
  --¸üÐÂÖÕ¶ËÎ»ÖÃ
  UPDATE TRANSACTIONRECORDS T
     SET (T.TERMINALLOCATION) =
         (SELECT T1.LOCATION
            FROM TERMPOS_X T1
           WHERE T1.MRCHNO = T.MERCHANTNUMBER
             AND T1.TERMCODE = T.TERMINALNUMBER)
   WHERE T.TRANSACTIONDATE = DAILY_DATE;

  COMMIT;
  --ÓÉÓÚÖ§¸¶Æ½Ì¨µÄ½»Ò×£¬²»¾­¹ýÇ°ÖÃ£¬ËùÒÔ97ÉÌ»§µÄ Á÷Ë®ºÅ£¬²Î¿¼ºÅ£¬Åú´ÎºÅ£¬È¡Ô­À´µÄ Á÷Ë®ºÅ£¬²Î¿¼ºÅ£¬Åú´ÎºÅ
  UPDATE TRANSACTIONRECORDS T
     SET (T.TRACE_NO, T.TRAN_RRN, T.BATCH_NO) =
         (SELECT T1.SERIALNUMBER, T1.REFERENCENUMBER, T1.LOTNO --Á÷Ë®ºÅ£¬²Î¿¼ºÅ£¬Åú´ÎºÅ
            FROM TRANSACTIONRECORDS_BAK T1
           WHERE T1.ID = T.ID)
   WHERE T.TRANSACTIONDATE = DAILY_DATE
     AND T.MERCHANTNUMBER = '999999999999997';

  COMMIT;
  --97ÉÌ»§µÄ½»Ò×£¬½«½»Ò×ÀàÐÍ£ºÏû·Ñ-0 ×ª»¯Îª 30£¬ÍË»õ-4 ×ª»¯Îª 32 ¡£¶ÔÁË¸úÏúÊÛÏµÍ³¶ÔÓ¦¡£
  --Ö§¸¶Æ½Ì¨µÄÏû·ÑÀàÐÍÖ»ÓÐÏû·Ñ¸úÍË»õ
  UPDATE TRANSACTIONRECORDS T
     SET T.TRANSACTIONTYPE = 30
   WHERE T.MERCHANTNUMBER = '999999999999997'
     AND T.TRANSACTIONTYPE = '0'
     AND T.TRANSACTIONDATE = DAILY_DATE;

  UPDATE TRANSACTIONRECORDS T
     SET T.TRANSACTIONTYPE = 32
   WHERE T.MERCHANTNUMBER = '999999999999997'
     AND T.TRANSACTIONTYPE = '4'
     AND T.TRANSACTIONDATE = DAILY_DATE;

  COMMIT;
  --Ð´Èësubacctrans-¶ÔÓ¦½»Ò×Á÷Ë®±í9¸öÕË»§½ð¶î
  DELETE FROM SUBACCTRANS T
   WHERE T.TRANSID IN (SELECT T1.ID
                         FROM TRANSACTIONRECORDS T1
                        WHERE T1.TRANSACTIONDATE = DAILY_DATE);

  INSERT INTO SUBACCTRANS TT
    (TT.ACCOUNTNO, TT.ACCMONEY, TT.TRANSID)
    (SELECT '01', T.CARDACCOUNTMONEY, T.ID
       FROM TRANSACTIONRECORDS T
      WHERE T.TRANSACTIONDATE = DAILY_DATE);
  INSERT INTO SUBACCTRANS TT
    (TT.ACCOUNTNO, TT.ACCMONEY, TT.TRANSID)
    (SELECT '02', T.TRUEACCOUNTMONEY, T.ID
       FROM TRANSACTIONRECORDS T
      WHERE T.TRANSACTIONDATE = DAILY_DATE);
  INSERT INTO SUBACCTRANS TT
    (TT.ACCOUNTNO, TT.ACCMONEY, TT.TRANSID)
    (SELECT '04', T.INTEGRATIONACCOUNTMONEY, T.ID
       FROM TRANSACTIONRECORDS T
      WHERE T.TRANSACTIONDATE = DAILY_DATE);
  INSERT INTO SUBACCTRANS TT
    (TT.ACCOUNTNO, TT.ACCMONEY, TT.TRANSID)
    (SELECT SUBSTR(T.ADDDATA, 113, 2),
            SUBSTR(T.ADDDATA, 115, 12) / 100,
            T.ID
       FROM TRANSACTIONRECORDS T
      WHERE T.TRANSACTIONDATE = DAILY_DATE);

  COMMIT;

  --¾ÛºÏÖ§¸¶£¬ÍÆËÍÇ°ÖÃÁ÷Ë®£¬ÓÉÓÚ¶¼ÊÇÏßÏÂ£¬ËùÒÔÖ±½Ó·ÅÔÚ×âºó¾Í¿ÉÒÔ¡£
  --È·¶¨Ò»ÏÂ£¬¸ù¾Ý¿¨ºÅ-00000000000000000 ¹ØÁªÖ§¸¶±¦µÄ½»Ò×£¬Ö§¸¶±¦ÊôÓÚÏßÏÂ
  --20171103,transactionrecords_alipay
  /*
  INSERT INTO TRANSACTIONRECORDS T
    (T.ID,
     T.MERCHANTNUMBER,
     T.TERMINALNUMBER,
     T.CARDNUMBER,
     T.TRANSACTIONMONEY,
     T.TRACE_NO,
     T.BATCH_NO,
     T.TRAN_RRN,
     T.TRANSACTIONDATE,
     T.TRANSACTIONTIME,
     T.TERMINALLOCATION,
     T.TRANSACTIONTYPE,
     T.PERFEE)
    SELECT DAILY_DATE || LPAD(SEQ_CLEAR_CARD_JUNL_ID.NEXTVAL, 6, 0),
           T.MERCHANT_ID,
           T.TERMINAL_ID,
           T.CARD_NO,
           T.TRAN_AMT,
           T.TRACE_NO,
           T.BATCH_NO,
           T.TRAN_RRN,
           T.BANK_SYS_DATE,
           T.BANK_SYS_TIME,
           T1.LOCATION, --ÖÕ¶ËÎ»ÖÃ
           CASE T.TRAN_TYPE
             WHEN '1' THEN
              '0'
             WHEN '9' THEN
              '4'
             WHEN '12' THEN
              '2'
             WHEN '41' THEN
              '2'
             ELSE
              TO_CHAR(T.TRAN_TYPE)
           END TRAN_TYPE,
           0
      FROM T_CUR_TRAN_LS_HIS@ORCL T, TERMPOS_X T1
     WHERE T.BANK_SYS_DATE = DAILY_DATE
       AND T.MERCHANT_ID = T1.MRCHNO
       AND T.TERMINAL_ID = T1.TERMCODE
       AND t.CARD_NO = '0000000000000000000';*/
  INSERT INTO TRANSACTIONRECORDS_ALIPAY
    (ID,
     MERCHANTNUMBER,
     TERMINALNUMBER,
     CARDNUMBER,
     TRANSACTIONMONEY,
     CARDACCOUNTMONEY,
     TRUEACCOUNTMONEY,
     INTEGRATIONACCOUNTMONEY,
     SERIALNUMBER,
     LOTNO,
     REFERENCENUMBER,
     RETURNPOINTS,
     TRANSACTIONTYPE,
     TRANSACTIONSTATUS,
     CARDTYPE,
     CARDTYPENAME,
     MERCHANTTYPE,
     PROVINCE,
     CITY,
     AREA,
     DATASOURCEID,
     SETTLEMENTACCOUNT,
     PERFEE,
     TRANSACTIONDATE,
     TRANSACTIONTIME,
     TERMINALLOCATION,
     DATASOURCE,
     TLOGID,
     ISEXCLUSIVE,
     CONSUMETYPE,
     STANORG,
     RRN,
     TERMTYPE,
     TERMSEQ,
     PAN,
     AIID,
     TXNSRC,
     TXNSRCORG,
     TXNCODE,
     TXNSTATUS,
     CURTXN,
     AMTTXN,
     AMTTXNFEE,
     AMTPROCFEE,
     AMTTXNORG,
     TRACE_NO,
     BATCH_NO,
     TRAN_RRN)
    SELECT SUBSTR(DAILY_DATE, 5, 8) ||
           LPAD(SEQ_CLEAR_CARD_JUNL_ID.NEXTVAL, 6, 0),
           T.MERCHANT_ID,
           T.TERMINAL_ID,
           T.CARD_NO,
           T.TRAN_AMT,
           T.TRAN_AMT, --cardaccountmoney
           0.00,
           0.00,
           0,
           0,
           0, --referencenumber
           0.0,
           CASE T.TRAN_TYPE
             WHEN '1' THEN
              '0'
             WHEN '9' THEN
              '4'
             WHEN '12' THEN
              '2'
             WHEN '41' THEN
              '2'
             ELSE
              TO_CHAR(T.TRAN_TYPE)
           END TRAN_TYPE,
           7,
           1, --cardtype
           'ÆÕÍ¨¿¨',
           '0',
           '000',
           '000',
           '000',
           0,
           '0000',
           0,
           T.BANK_SYS_DATE,
           T.BANK_SYS_TIME,
           T1.LOCATION, --ÖÕ¶ËÎ»ÖÃ
           'wetchat',
           0000,
           '0',
           '0',
           0,
           '0000',
           '0',
           0,
           T.CARD_NO,
           '00000000',
           '0',
           '0',
           0,
           7,
           '156',
           T.TRAN_AMT, --AMTTXN
           0,
           0,
           0,
           T.TRACE_NO,
           T.BATCH_NO,
           T.TRAN_RRN
      FROM T_CUR_TRAN_LS_HIS@ORCL T, TERMPOS_X T1
     WHERE T.BANK_SYS_DATE = DAILY_DATE
       AND T.MERCHANT_ID = T1.MRCHNO
       AND T.TERMINAL_ID = T1.TERMCODE
       AND T.CARD_NO = '0000000000000000000';

  COMMIT;
END PRO_TRANSACTION_RECORDS;
/

prompt
prompt Creating procedure RULE_CONTEXT_SET_PENDING_EVENT
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.rule_context_set_pending_event
		(use_case number, use_id number, i_id rule_rule.id%type,
		 i_activity_id rule_context.activity_id%type)
IS
BEGIN

	-- upd/del/isrt in RULE_EVALDIMLINK and RULE_DIMLVLLINK
	if ( use_case = 1 ) then
		update rule_context set event_pending = 1,
					activity_id = i_activity_id
		where id in
			( select context_id from
			  	rule_dimvalue, rule_dimension
				where rule_dimvalue.dimension_id = rule_dimension.id
				and rule_dimvalue.id = i_id );
	-- insrt/del in RULE_DIMVALUE
	elsif ( use_case = 2) then
		update rule_context set event_pending = 1,
					activity_id = i_activity_id
		where id in
			( select context_id from
				rule_dimension where id = i_id );
	-- changes in RULE_ATOM, or RULE_RULE, RULE_DIMENSION
	elsif ( use_case = 3 ) then
		-- Only for changes in RULE_ATOM where we don't really
		-- know where this atom is used
		if ( use_id  = 0 ) then
			update rule_context set event_pending = 1,
					activity_id = i_activity_id;
		else
			update rule_context set event_pending = 1,
					activity_id = i_activity_id
			where id = i_id;
		end if;
	-- upd/del/insrt in RULE_EVALRULELINK
	elsif ( use_case = 4 ) then
		update rule_context set event_pending = 1,
					activity_id = i_activity_id
		where id in
			( select context_id from rule_rule
			  where rule_rule.id = i_id );
	-- upd in RULE_EVALSET
	elsif ( use_case = 5 ) then
		update rule_context set event_pending = 1,
					activity_id = i_activity_id
		where id in
			( select rule_rule.context_id from
			  rule_evalrulelink, rule_rule
			  where rule_evalrulelink.rule_id = rule_rule.id
			  and rule_evalrulelink.evalset_id = i_id );
	end if;
end;
/

prompt
prompt Creating procedure SEL_DESCR_ZH
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.sel_descr_zh
AS
	descrrecord descr%rowtype;
	cursor descrcursor is
		select * from descr where asciistr(DESCR) like '%\%' and lang='ZH';

 begin
	open descrcursor;
	loop
		fetch descrcursor into descrrecord;
		exit when descrcursor%notfound;

		update descr set descr=descrrecord.descr where lang='ZH' and lower(trim(descr))=
		lower(trim((select distinct descr from descr where lang='EN' and DESCRTAG =descrrecord.descrtag)));

	end loop;
	close descrcursor;
	commit;

END;
/

prompt
prompt Creating procedure SET_CRDDETMISC_EXPORT
prompt ========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.set_crddetmisc_export(crddet_id_IN IN number) is
	in_crddet_id      NUMBER(10,0) := crddet_id_IN;
begin
	if in_crddet_id is null then
                in_crddet_id := 0;
    end if;
	update	crddetmisc
	set	export = 1
	where	crddetmisc.crddet_id = in_crddet_id;
end;
/

prompt
prompt Creating procedure TMP_ADD_EVENTCAT
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.tmp_add_eventcat(ieventname like EVENTCAT.event,
                        iseverity like EVENTCAT.severity,
                        iformatdescr like NUMDESCR.descr,
                        idescription like DESCR.descr,
                        ilang like NUMDESCR.lang )
        -- Ldescrtag is for the new tag number in DESCR table
        define Ldescrtag integer;

        -- Lformatref is for the new id number in NUMDESCR table
        define Lformatref integer;

        select max(descrtag) into Ldescrtag from descr;

        select max(id) into Lformatref from numdescr
                        where lang=ilang and descrtype='ef';

        -- got biggest existing numbers, now add 1 to them
        let Ldescrtag = Ldescrtag + 1;
        let Lformatref = Lformatref + 1;

        insert into descr (descrtag, descr, lang)
                values(Ldescrtag, idescription, ilang);
        insert into numdescr (lang, descrtype, id, descr)
                values(ilang, 'ef', Lformatref, iformatdescr);
        insert into eventcat (event, descrtag, severity, frmtref)
                values(ieventname, Ldescrtag, iseverity, Lformatref);
end procedure;
execute procedure tmp_add_eventcat('eccffail', 2,
                                'ECCFIMP faiure - %s',
                                'ECCFIMP faiure', 'EN');
execute procedure tmp_add_eventcat('eccffail', 2,
                                'ECCFIMP faiure - %s',
                                'ECCFIMP faiure', 'GB');
execute procedure tmp_add_eventcat('mcrdratefail', 2,
                                'MCRDRATEIMP failure - %s',
                                'MCRDRATEIMP failure', 'EN');
execute procedure tmp_add_eventcat('mcrdratefail', 2,
                                'MCRDRATEIMP failure - %s',
                                'MCRDRATEIMP failure', 'GB');
execute procedure tmp_add_eventcat('no_eccffile', 2,
                                'No ECCF file received - %s',
                                'No ECCF file received', 'EN');
execute procedure tmp_add_eventcat('no_eccffile', 2,
                                'No ECCF file received - %s',
                                'No ECCF file received', 'GB');
execute procedure tmp_add_eventcat('sdifail', 2,
                                'SDI Failed - %s',
                                'SDI failure', 'EN');
execute procedure tmp_add_eventcat('sdifail', 2,
                                'SDI Failed - %s',
                                'SDI failure', 'GB');
execute procedure tmp_add_eventcat('xmltxexpfail', 2,
                                'XMLTXNEXP failed - %s',
                                'XML Txnexp failure', 'EN');
execute procedure tmp_add_eventcat('xmltxexpfail', 2,
                                'XMLTXNEXP failed - %s',
                                'XML Txnexp failure', 'GB');
execute procedure tmp_add_eventcat('pinbtchfail', 2,
                                'PINGENBTCH failed - %s: %s',
                                'PIN Generation failure', 'EN');
execute procedure tmp_add_eventcat('pinbtchfail', 2,
                                'PINGENBTCH failed - %s: %s',
                                'PIN Generation failure', 'GB');
execute procedure tmp_add_eventcat('eodfail', 2,
                                'EOD process failed (%s)',
                                'EOD Process Failure', 'EN');
execute procedure tmp_add_eventcat('eodfail', 2,
                                'EOD process failed (%s)',
                                'EOD Process Failure', 'GB');
execute procedure tmp_add_eventcat('wasdown', 1,
                                'Websphere is down!',
                                'Websphere is down', 'EN');
execute procedure tmp_add_eventcat('wasdown', 1,
                                'Websphere is down!',
                                'Websphere is down', 'GB');
execute procedure tmp_add_eventcat('ifreqstate', 2,
                                '%s: Requested State cannot be processed',
                                'I/F Req. State not processed', 'EN');
execute procedure tmp_add_eventcat('ifreqstate', 2,
                                '%s: Requested State cannot be processed',
                                'I/F Req. State not processed', 'GB');
execute procedure tmp_add_eventcat('ifsignoff', 3,
                                '%s: The interface is signed off',
                                'I/F is signed off', 'EN');
execute procedure tmp_add_eventcat('ifsignoff', 3,
                                '%s: The interface is signed off',
                                'I/F is signed off', 'GB');
execute procedure tmp_add_eventcat('ifcomstate', 2,
                                '%s: Interface Comms are down!',
                                'Interface Comms are down', 'EN');
execute procedure tmp_add_eventcat('ifcomstate', 2,
                                '%s: Interface Comms are down!',
                                'Interface Comms are down', 'GB');
execute procedure tmp_add_eventcat('mcrdreqstate', 1,
                                '%s: Requested State cannot be processed',
                                'MCRD I/F Req. State not processed', 'EN');
execute procedure tmp_add_eventcat('mcrdreqstate', 1,
                                '%s: Requested State cannot be processed',
                                'MCRD I/F Req. State not processed', 'GB');
execute procedure tmp_add_eventcat('mcrdsignoff', 1,
                                '%s: The MCRD interface is signed off',
                                'MCRD interface is signed off', 'EN');
execute procedure tmp_add_eventcat('mcrdsignoff', 1,
                                '%s: The MCRD interface is signed off',
                                'MCRD interface is signed off', 'GB');
execute procedure tmp_add_eventcat('mcrdcom', 1,
                                '%s: MCRD Comms are down!',
                                'MCRD Comms are down', 'EN');
execute procedure tmp_add_eventcat('mcrdcom', 1,
                                '%s: MCRD Comms are down!',
                                'MCRD Comms are down', 'GB');
execute procedure tmp_add_eventcat('diskspace', 2,
                                'Disk Space Alert: %s',
                                'Disk Space Alert', 'EN');
execute procedure tmp_add_eventcat('diskspace', 2,
                                'Disk Space Alert: %s',
                                'Disk Space Alert', 'GB');
execute procedure tmp_add_eventcat('authnomatch', 3,
                                'Auth not matched for: (%s)',
                                'No AUTH MATCH found', 'EN');
execute procedure tmp_add_eventcat('authnomatch', 3,
                                'Auth not matched for: (%s)',
                                'No AUTH MATCH found', 'GB');
execute procedure tmp_add_eventcat('authexpired', 3,
                                'Authorisation Expired: (%s)',
                                'Auth Expired', 'EN');
execute procedure tmp_add_eventcat('authexpired', 3,
                                'Authorisation Expired: (%s)',
                                'Auth Expired', 'GB');
execute procedure tmp_add_eventcat('txnupldfail', 2,
                                'Failed to upload txn: (%s)',
                                'Failed to upload txn', 'EN');
execute procedure tmp_add_eventcat('txnupldfail', 2,
                                'Failed to upload txn: (%s)',
                                'Failed to upload txn', 'GB');
execute procedure tmp_add_eventcat('filesenderr', 2,
                                'Failed to send the file: %s',
                                'File Send failed', 'EN');
execute procedure tmp_add_eventcat('filesenderr', 2,
                                'Failed to send the file: %s',
                                'File Send failed', 'EN');
drop procedure tmp_add_eventcat;

;
/

prompt
prompt Creating procedure UNBLK_CORP_AUTH
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.unblk_corp_auth
	(
		cinst           IN aprvlhist.inst_id%TYPE,
		cpan            IN aprvlhist.pan%TYPE,
		cseqno          IN aprvlhist.seqno%TYPE,
		cmsgcls         IN aprvlhist.msgcls%TYPE,
		ctxncode        IN aprvlhist.txncode%TYPE,
		csrc_amtblk     IN aprvlhist.amtbill%TYPE,
		csrc_amtbill    IN aprvlhist.amtbill%TYPE,
		cfintlogid      IN aprvlhist.fintlogid%TYPE,
		chld_accno	IN aprvlhist.accno%TYPE
	)
is
BEGIN
	NULL;
END;
/

prompt
prompt Creating procedure UPDATE_AMXATMREC
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.update_amxatmrec
	(
		in_tlogid	in tlog.id%TYPE,
		in_amtset	in tlog.amtset%TYPE,
		in_curset	in tlog.curset%TYPE,
		in_aprvlcode	in tlog.aprvlcode%TYPE,
		in_actioncode	in tlog.actioncode%TYPE,
		in_rspcode	in tlog.rspcode%TYPE,
		in_txnstatus	in tlog.txnstatus%TYPE
	)
is
begin
        update amxatmrec set
		amtset = in_amtset,
		curset = in_curset,
		aprvlcode = in_aprvlcode,
		actioncode = in_actioncode,
		rspcode = in_rspcode,
		txnstatus = in_txnstatus,
		amtdsp = amttxn,
		amtsetdsp = in_amtset,
		amxcurdsp = curtxn,
		amxcurset = in_curset,
		recstatus = 0
	where
		tlogid = in_tlogid;
end;
/

prompt
prompt Creating procedure UPDATE_PREGENPIN
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.update_pregenpin(old_statcode 	in crddet.statcode%type,
					new_statcode 		in crddet.statcode%type,
					in_pan			in crddet.pan%type,
					in_seqno		in crddet.seqno%type) is
begin

NULL;

end;
/

prompt
prompt Creating procedure UPDATE_RPLACE_CRDDET_ID
prompt ==========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.update_rplace_crddet_id
(	o_crddet_id in caccdet.crddet_id%TYPE,
	n_crddet_id in caccdet.crddet_id%TYPE)
--For charge cardis if the master card is replaced then the pan of the master
--card needs to ibe set to the new pan in the corresponding caccdet record
is
	in_o_crddet_id	caccdet.crddet_id%TYPE := o_crddet_id;
	in_n_crddet_id	caccdet.crddet_id%TYPE := n_crddet_id;
begin
	if in_o_crddet_id is null then
		in_o_crddet_id := 0;
    end if;

	if in_n_crddet_id is null then
		in_n_crddet_id := 0;
    end if;

	update	caccdet
	set     crddet_id = in_n_crddet_id
	where   crddet_id = in_o_crddet_id;

end;
/

prompt
prompt Creating procedure UPDATE_TERMATMSTATHST
prompt ========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.update_termatmstathst(
	i_termcode	TERMATM.termcode%type,
	i_oldctxonline	TERMATM.online1%type,
	i_newctxonline	TERMATM.online1%type,
	i_oldstatereq	TERMATM.statereq%type,
	i_newstatereq	TERMATM.statereq%type,
	i_oldstateact	TERMATM.stateact%type,
	i_newstateact	TERMATM.stateact%type) is
begin
	-- do nothing
	NULL;
end;
/

prompt
prompt Creating procedure UPD_CRDDET_X_DATE_CYCFEE_MOVED
prompt =================================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.upd_crddet_x_date_cycfee_moved(p_crddet_id in
				crddet.id%type)
is
	date_moved date;
	in_crddet_id      crddet.id%type := p_crddet_id;
begin
	if in_crddet_id is null then
                in_crddet_id := 0;
    end if;
	date_moved := getsysdate();

	update CRDDET_X set date_cycfee_moved = date_moved
	where crddet_id = in_crddet_id;

end;
/

prompt
prompt Creating procedure WRITE_ACSLOG
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_acslog(tabname_IN IN char, keyval_IN IN char,
				colname_IN IN char, oldval_IN IN char,
				newval_IN IN char) is
	tabname  varchar2(12) := tabname_IN;
	keyval   varchar2(32) := keyval_IN;
	colname  varchar2(20) := colname_IN;
	oldval   varchar2(64) := oldval_IN;
	newval   varchar2(64) := newval_IN;
	descr acslog.descr%type;
begin
	descr := substr(rtrim(tabname, ' ')
		|| ' '
		|| rtrim(keyval, ' ')
		|| ' '
		|| rtrim(colname, ' ')
		|| ' '
		|| rtrim(oldval, ' ')
		|| ' => '
		|| rtrim(newval, ' '), 1, 255);
	insert into acslog (id, acsdate,acstime, acsusr, descr)
		values (0, TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'), 'YYYYMMDD'),
		to_number(to_char(sysdate,'HH24MISS')),
		substr(ltrim(ltrim(user,'OPS'),'$'), 1, 8) , descr);
		-- values (acslog_sequence.nextval, sysdate, systime, user, descr);
end;
/

prompt
prompt Creating procedure WRITE_ACSLOG_AUDITPAN
prompt ========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_acslog_auditpan(tabname_IN IN char,
				 		  pan_IN IN char,
						  seqno_IN IN char,
						  pan_display_IN IN char,
						  virtual_pan_IN IN char,
						  colname_IN IN char,
						  oldval_IN IN char,
						  newval_IN IN char) is
	tabname varchar2(12) := tabname_IN;
	pan varchar2(19) := pan_IN;
	seqno varchar2(4) := seqno_IN;
	pan_display varchar2(19) := pan_display_IN;
	virtual_pan varchar2(32) := virtual_pan_IN;
	colname varchar2(20) := colname_IN;
	oldval varchar2(64) := oldval_IN;
	newval varchar2(64) := newval_IN;
	descr acslog.descr%type;
	AuditPANMask varchar2(1);
	UseVirtualPAN varchar2(1);
	PANToLog varchar2(40);
	MSCcount number(10,0);
begin
	select count(*) into MSCcount from MSC where tag='auditpanmask' and idx=1;
	if (MSCcount = 1) then
		select substr(string_t,1,1) into AuditPANMask from MSC where tag='auditpanmask' and idx=1;
	end if;
	if AuditPANMask is null then
		AuditPANMask := 'N';
	end if;
	select count(*) into MSCcount from MSC where tag='usevirtualpan' and idx=1;
	if (MSCcount = 1) then
		select substr(string_t,1,1) into UseVirtualPAN from MSC where tag='usevirtualpan' and idx=1;
	end if;
	if UseVirtualPAN is null then
		UseVirtualPAN := 'N';
	end if;
	PANToLog := pan || seqno;
	if (AuditPANMask = 'Y') then
		if (UseVirtualPAN = 'Y') then
			PANToLog := virtual_pan || seqno;
		else
			PANToLog := pan_display || seqno;
		end if;
	end if;
	descr := substr(rtrim(tabname, ' ')
		|| ' '
		|| rtrim(PANToLog, ' ')
		|| ' '
		|| rtrim(colname, ' ')
		|| ' '
		|| rtrim(oldval, ' ')
		|| ' => '
		|| rtrim(newval, ' '), 1, 255);
	insert into acslog (id, acsdate,acstime, acsusr, descr)
		values (0, TO_DATE(TO_CHAR(sysdate,'YYYYMMDD'),'YYYYMMDD'),
		to_number(to_char(sysdate,'HH24MISS')),
		substr(ltrim(ltrim(user,'OPS'),'$'), 1, 8) , descr);
		-- values (acslog_sequence.nextval, sysdate, systime, user, descr);
end;
/

prompt
prompt Creating procedure WRITE_ADVICES
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_advices(tlogid_IN IN number, status_IN IN number, ctxdate IN date, ife_IN IN char) is
tlogid number(20,0) := tlogid_IN;
status number(5,0)  := status_IN;
ife    varchar2(8)      := ife_IN;
Local_exists number(10,0);
begin
	Local_exists := 0;
	select count(string_t) into Local_exists from MSC
        where tag = 'advices_ife' and string_t=ife;

        if Local_exists > 0 then
		insert into advices (tlogid, status, ctxdate, ife)
		values (tlogid, status, ctxdate, ife);
	end if;
end;
/

prompt
prompt Creating procedure WRITE_AMXATMREC
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_amxatmrec
	(
		in_tlogid	in tlog.id%TYPE,
		in_aiid		in tlog.aiid%TYPE,
		in_stan		in tlog.stan%TYPE,
		in_rrn		in tlog.rrn%TYPE,
		in_datelocal	in tlog.datelocal%TYPE,
		in_timelocal	in tlog.timelocal%TYPE,
		in_fncode	in tlog.fncode%TYPE,
		in_ctxdate	in tlog.ctxdate%TYPE,
		in_pan		in tlog.pan%TYPE,
		in_termcode	in tlog.termcode%TYPE,
		in_amttxn	in tlog.amttxn%TYPE,
		in_curtxn	in tlog.curtxn%TYPE,
		in_pan_display	in tlog.pan_display%TYPE
	)
is
begin
        insert into amxatmrec
	(
		tlogid,
		aiid,
		stan,
		rrn,
		datelocal,
		timelocal,
		fncode,
		ctxdate,
		pan,
		termcode,
		amttxn,
		curtxn,
		pan_display
	)
	values
	(
		in_tlogid,
		in_aiid,
		in_stan,
		in_rrn,
		in_datelocal,
		in_timelocal,
		in_fncode,
		in_ctxdate,
		in_pan,
		in_termcode,
		in_amttxn,
		in_curtxn,
		in_pan_display
	);
end;
/

prompt
prompt Creating procedure WRITE_AMXSEDEMO
prompt ==================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_amxsedemo
	(
		in_action	in char,
		in_mrchstat	in merchant.mrchstat%TYPE,
		in_mrchstat_old	in merchant.mrchstat%TYPE,
		in_inst_id	in merchant.inst_id%TYPE,
		in_mrchno	in merchant.mrchno%TYPE,
		in_name		in merchant.name%TYPE,
		in_phy_address1	in merchant.phy_address1%TYPE,
		in_phy_address2	in merchant.phy_address2%TYPE,
		in_phy_city	in merchant.phy_city%TYPE,
		in_phy_state	in merchant.phy_state%TYPE,
		in_phy_postcode	in merchant.phy_postcode%TYPE,
		in_phy_countrycode in merchant.phy_countrycode%TYPE,
-- If necessary, accept also parameters below and select populated ones
--		in_address1	in merchant.address1%TYPE,
--		in_address2	in merchant.address2%TYPE,
--		in_city		in merchant.city%TYPE,
--		in_state	in merchant.state%TYPE,
--		in_postcode	in merchant.postcode%TYPE,
--		in_countrycode	in merchant.countrycode%TYPE,
		in_eff_date	in merchant.contrdate%TYPE,
		in_canc_date	in merchant.contrcnx%TYPE,
		in_crdacptbus	in merchant.acptbus%TYPE,
		in_currcode	in merchant.currcode%TYPE,
		in_telno	in merchant.telno1%TYPE
	)
is
	xload_date date;
	xexport_date date;
	xexport_reas char(1);
begin
        NULL;
-- Dummy (empty) procedure does nothing
-- Real procedure in AMEX module if required
end;
/

prompt
prompt Creating procedure WRITE_CHARGEDATA
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_chargedata(
	i_crddet_id	in CRDDET.id%type,
	i_chargetype	in number,
	i_chargedata	in varchar2,
	i_chargecur	in char,
	i_custtype	in number,
	i_opdata	in varchar2,
	i_processed	in char
)
IS
BEGIN
	NULL;
	-- nothing to do
END;
/

prompt
prompt Creating procedure WRITE_CRDDET
prompt ===============================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_crddet(action_IN IN char,
		pan_IN IN crddet.pan%type,
		seqno_IN IN number, pvv_IN IN char, pvki_IN IN char,
		crdproduct_id_IN IN number, expdate IN date, old_pvv_IN IN char) is
	action   varchar2(6)     := action_IN;
	pan      varchar2(19)    := pan_IN;
	seqno    number(5,0) := seqno_IN;
	pvv      varchar2(4)     := pvv_IN;
	pvki     char(1)     := pvki_IN;
	crdproduct_id  number(10,0) := crdproduct_id_IN;
	old_pvv  varchar2(4)     := old_pvv_IN;
	hour_str char(2);
	min_str  char(2);
	sec_str  char(2);
	time_num number(10,0);
	ctxnew     number(10,0);
	ctxdate    date;
	error    number(10,0);
	err_txt  varchar2(45);
	scheme   varchar2(12);
	e_invalid_cmd	EXCEPTION;
begin
     	   error := 0;

end;
/

prompt
prompt Creating procedure WRITE_CRDMODLOG
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_crdmodlog(
        new_crddet_id  in CRDMODLOG.crddet_id%type
)
IS
TcurSysdate CRDMODLOG.ctxdate%type;
BEGIN
        SELECT date_t INTO TcurSysdate FROM msc WHERE tag = 'cursysdate';

        INSERT INTO CRDMODLOG (id, crddet_id, ctxdate, moddateTime)
                VALUES  (0, new_crddet_id, TcurSysdate, sysdate);
END;
/

prompt
prompt Creating procedure WRITE_CRDTELCODE
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_crdtelcode(crddet_id_IN IN number, statcode_IN IN char) is
	crddet_id number(10,0):= crddet_id_IN;
	statcode varchar2(2) := statcode_IN;
begin
	if crddet_id is null then
                crddet_id := 0;
    end if;
	if statcode = '00'
	then		-- un-block the telecode
		update crdtelcode set status = 0
			where crdtelcode.crddet_id = crddet_id;
	else		-- block the telecode
		update crdtelcode set status = 1
			where crdtelcode.crddet_id = crddet_id;
	end if;
end;
-- document 'This procedure is used to block/un-block telecodes when the ',
--	'status of a card changes. It is called by trigger cdsthst_insert.'
/

prompt
prompt Creating procedure WRITE_CRDTELNOTE
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_crdtelnote( crddet_id_IN IN number,
					telecode_IN IN number,
					action_IN IN number) is
	crddet_id      number(10,0)     := crddet_id_IN;
	telecode number(10,0) := telecode_IN;
	action   number(5,0)  := action_IN;
	hour_str char(2);
	min_str  char(2);
	sec_str  char(2);
	time_num number(10,0);
	ctxnew   number(10,0);
	ctxdate  date;
	exp	 date;
begin
	ctxdate := TO_DATE(TO_CHAR(sysdate, 'YYYYMMDD'), 'YYYYMMDD');
        time_num := to_number(to_char(sysdate, 'HH24MISS'));

	if crddet_id is null then
		crddet_id := 0;
	end if;

	select expdate
		into exp
		from crddet
		where crddet.id = crddet_id;
        insert into crdtelnote (id, crddet_id, expdate, telecode, action, datein, timein, datesent,
                timesent, sent, attempts, errcode) values
        	(0, crddet_id, exp, telecode,
		action, ctxdate, time_num, NULL, NULL, 0, 0, ' ');
end;
-- document 'This procedure inserts a record into ',
--	'crdtelnote. It is called by trigger crdtelcode_change.'
/

prompt
prompt Creating procedure WRITE_DIMVAL_SCOPEKEY_HIST
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_dimval_scopekey_hist
	(i_dimval_scopekey_id	rule_dimval_scopekey.id%type,
	 i_dimension_id	rule_dimvalue.dimension_id%type,
	 i_dimvalue_id	rule_dimvalue.id%type,
	 i_scopedet_id	rule_dimval_scopekey.scopedet_id%type,
	 i_scopekey	rule_dimval_scopekey.scopekey%type,
	 i_action	char,
	 i_activity_id	rule_dimval_scopekey.activity_id%type)
IS
	x_timestamp	rule_dimval_scopekey_hist.timechg%type;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_dimval_scopekey_hist(dimval_scopekey_id,
					timechg, action, dimension_id,
					dimvalue_id, scopedet_id, scopekey,
							activity_id)
		values
	(i_dimval_scopekey_id, x_timestamp, i_action, i_dimension_id,
				i_dimvalue_id, i_scopedet_id, i_scopekey,
						i_activity_id);

END;
/

prompt
prompt Creating procedure WRITE_FC_CARDTYPECYCLE_HIST
prompt ==============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_fc_cardtypecycle_hist
	(i_fc_cardtypecycle_id	FC_CARDTYPECYCLE_HIST.fc_cardtypecycle_id%type,
	 i_action		FC_CARDTYPECYCLE_HIST.action%type,
	 i_inst_id		FC_CARDTYPECYCLE_HIST.inst_id%type,
	 i_cat_isscycfee_id	FC_CARDTYPECYCLE_HIST.cat_isscycfee_id%type,
	 i_crdproduct_id	FC_CARDTYPECYCLE.crdproduct_id%type,
	 i_type_id		FC_CARDTYPECYCLE_HIST.type_id%type,
	 i_cycledet_id		FC_CARDTYPECYCLE_HIST.cycledet_id%type,
	 i_nextstart_epoch	FC_CARDTYPECYCLE_HIST.nextstart_epoch%type,
	 i_last_proc_epoch	FC_CARDTYPECYCLE_HIST.last_proc_epoch%type,
	 i_in_progress		FC_CARDTYPECYCLE_HIST.in_progress%type,
	 i_no_repeat_days	FC_CARDTYPECYCLE_HIST.no_repeat_days%type,
	 i_activity_id		FC_CARDTYPECYCLE_HIST.activity_id%type)
is
	x_timestamp		FC_CARDTYPECYCLE_HIST.timechg%type;
	in_inst_id              FC_CARDTYPECYCLE_HIST.inst_id%type := i_inst_id;
	in_crdproduct_id        FC_CARDTYPECYCLE_HIST.crdproduct_id%type := i_crdproduct_id;
begin

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
		in_inst_id := 0;
	end if;

	if in_crdproduct_id is null then
		in_crdproduct_id := 0;
	end if;

	insert into fc_cardtypecycle_hist(fc_cardtypecycle_id, timechg, action,
				inst_id, cat_isscycfee_id,
				crdproduct_id, type_id, cycledet_id,
				nextstart_epoch, last_proc_epoch, in_progress,
				no_repeat_days, activity_id)
		values
			(i_fc_cardtypecycle_id, x_timestamp, i_action,
				in_inst_id, i_cat_isscycfee_id,
				in_crdproduct_id, i_type_id, i_cycledet_id,
				i_nextstart_epoch, i_last_proc_epoch,
				i_in_progress, i_no_repeat_days, i_activity_id);


end;
/

prompt
prompt Creating procedure WRITE_FC_CHARGEDET_HIST
prompt ==========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_fc_chargedet_hist
	(i_fc_chargedet_id	FC_CHARGEDET_HIST.fc_chargedet_id%type,
	 i_action		FC_CHARGEDET_HIST.action%type,
	 i_inst_id		FC_CHARGEDET_HIST.inst_id%type,
	 i_chargetag		FC_CHARGEDET_HIST.chargetag%type,
	 i_chargetype		FC_CHARGEDET_HIST.chargetype%type,
	 i_curcharge		FC_CHARGEDET_HIST.curcharge%type,
	 i_threshold_id		FC_CHARGEDET_HIST.threshold_id%type,
	 i_amttype		FC_CHARGEDET_HIST.amttype%type,
	 i_percent		FC_CHARGEDET_HIST.percent%type,
	 i_minval		FC_CHARGEDET_HIST.minval%type,
	 i_maxval		FC_CHARGEDET_HIST.maxval%type,
	 i_flatval		FC_CHARGEDET_HIST.flatval%type,
	 i_offset_apply		FC_CHARGEDET_HIST.offset_apply%type,
	 i_activity_id		FC_CHARGEDET_HIST.activity_id%type)
is
	x_timestamp		FC_CHARGEDET_HIST.timechg%type;
	in_inst_id              FC_CHARGEDET_HIST.inst_id%type := i_inst_id;
begin
	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
		in_inst_id := 0;
	end if;

	insert into fc_chargedet_hist(fc_chargedet_id, timechg, action,
				inst_id, chargetag, chargetype, curcharge,
				threshold_id, amttype, percent, minval, maxval,
				flatval, offset_apply, activity_id)
		values
			(i_fc_chargedet_id, x_timestamp, i_action,
			in_inst_id, i_chargetag, i_chargetype, i_curcharge,
			i_threshold_id, i_amttype, i_percent, i_minval,
			i_maxval, i_flatval, i_offset_apply, i_activity_id);


end;
/

prompt
prompt Creating procedure WRITE_FC_CHARGEDET_OVRD_HIST
prompt ===============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_fc_chargedet_ovrd_hist
       (i_fc_chargedet_ovrd_id FC_CHARGEDET_OVRD_HIST.fc_chargedet_ovrd_id%type,
	 i_action		FC_CHARGEDET_OVRD_HIST.action%type,
	 i_fc_chargedet_id	FC_CHARGEDET_OVRD_HIST.fc_chargedet_id%type,
	 i_scopedet_id		FC_CHARGEDET_OVRD_HIST.scopedet_id%type,
	 i_scopekey		FC_CHARGEDET_OVRD_HIST.scopekey%type,
	 i_percent		FC_CHARGEDET_OVRD_HIST.percent%type,
	 i_minval		FC_CHARGEDET_OVRD_HIST.minval%type,
	 i_maxval		FC_CHARGEDET_OVRD_HIST.maxval%type,
	 i_flatval		FC_CHARGEDET_OVRD_HIST.flatval%type,
	 i_priority		FC_CHARGEDET_OVRD_HIST.priority%type,
	 i_effdate		FC_CHARGEDET_OVRD_HIST.effdate%type,
	 i_purgedate		FC_CHARGEDET_OVRD_HIST.purgedate%type,
	 i_activity_id		FC_CHARGEDET_OVRD_HIST.activity_id%type)
is
	x_timestamp		FC_CHARGEDET_OVRD_HIST.timechg%type;
begin
	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into fc_chargedet_ovrd_hist(fc_chargedet_ovrd_id, timechg,action,
				fc_chargedet_id, scopedet_id, scopekey, percent,
				minval, maxval, flatval, priority, effdate,
				purgedate, activity_id)
		values
			(i_fc_chargedet_ovrd_id, x_timestamp, i_action,
				i_fc_chargedet_id, i_scopedet_id, i_scopekey,
				i_percent, i_minval, i_maxval, i_flatval,
				i_priority,i_effdate,i_purgedate,i_activity_id);


end;
/

prompt
prompt Creating procedure WRITE_IFMTLOG
prompt ================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_ifmtlog(
		tlogid		tlog.id%TYPE,
		stan		tlog.stan%TYPE,
		stanorg		tlog.stanorg%TYPE,
		rrn		tlog.rrn%TYPE,
		termtype	tlog.termtype%TYPE,
		route_iid	tlog.route_iid%TYPE,
		crdseqno	tlog.crdseqno%TYPE,
		pan		tlog.pan%TYPE,
		dateexp		tlog.dateexp%TYPE,
		svccode		tlog.svccode%TYPE,
		crdacptloc	tlog.crdacptloc%TYPE,
		crdacptbus	tlog.crdacptbus%TYPE,
		crdacptid	tlog.crdacptid%TYPE,
		termcode	tlog.termcode%TYPE,
		poschic		tlog.poschic%TYPE,
		poschac		tlog.poschac%TYPE,
		poscrc		tlog.poscrc%TYPE,
		posoe		tlog.posoe%TYPE,
		poschp		tlog.poschp%TYPE,
		poscp		tlog.poscp%TYPE,
		poscdim		tlog.poscdim%TYPE,
		poscham		tlog.poscham%TYPE,
		poscha		tlog.poscha%TYPE,
		poschad		tlog.poschad%TYPE,
		possd		tlog.possd%TYPE,
		pospcc		tlog.pospcc%TYPE,
		poscc_89	tlog.poscc_89%TYPE,
		aiid		tlog.aiid%TYPE,
		acqcountry	tlog.acqcountry%TYPE,
		datexmit	tlog.datexmit%TYPE,
		timexmit	tlog.timexmit%TYPE,
		datelocal	tlog.datelocal%TYPE,
		timelocal	tlog.timelocal%TYPE,
		datexmitorg	tlog.datexmitorg%TYPE,
		timexmitorg	tlog.timexmitorg%TYPE,
		msgcls		tlog.msgcls%TYPE,
		msgclsorg	tlog.msgclsorg%TYPE,
		msgfn		tlog.msgfn%TYPE,
		msgfnorg	tlog.msgfnorg%TYPE,
		txnsrc		tlog.txnsrc%TYPE,
		txnsrcorg	tlog.txnsrcorg%TYPE,
		fncode		tlog.fncode%TYPE,
		txncode		tlog.txncode%TYPE,
		txnstatus	tlog.txnstatus%TYPE,
		rejreason	tlog.rejreason%TYPE,
		curtxn		tlog.curtxn%TYPE,
		amttxn		tlog.amttxn%TYPE,
		amttxnorg	tlog.amttxnorg%TYPE,
		amttxncb	tlog.amttxncb%TYPE,
		actioncode	tlog.actioncode%TYPE,
		rspcode		tlog.rspcode%TYPE,
		reasoncode	tlog.reasoncode%TYPE,
		aprvlcode	tlog.aprvlcode%TYPE,
		fiid		tlog.fiid%TYPE,
		fiidcountry	tlog.fiidcountry%TYPE,
		riid		tlog.riid%TYPE,
		riidcountry	tlog.riidcountry%TYPE,
		inbtchid	tlog.inbtchid%TYPE,
		ctxdate		tlog.ctxdate%TYPE,
		afe		tlog.afe%TYPE,
		ife		tlog.ife%TYPE,
		outbtchtype	tlog.outbtchtype%TYPE,
		curbill		tlog.curbill%TYPE,
		amtbill		tlog.amtbill%TYPE,
		amtbillcb	tlog.amtbillcb%TYPE,
		adddata		tlog.adddata%TYPE,
		scheme		tlog.scheme%TYPE)
AS tmp NUMBER(5,0);
BEGIN
	tmp := 0;
	-- Dummy (empty) procedure, since this is in common
	-- This is for customers without ifm.

	-- Real procedure (for ifm customers) is in
	-- base/ifm/src/crdb/schema_ora
END;
/

prompt
prompt Creating procedure WRITE_MERCHANT
prompt =================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_merchant(inst_id_IN IN NUMBER,
					new_merchant_IN IN char,
					new_mrch_acpt_bus_IN IN number) is
	in_inst_id      NUMBER(10,0) := inst_id_IN;
begin
	if in_inst_id is null then
            in_inst_id := 0;
    end if;

	for v in (
		select instscheme.scheme
		from instscheme, inst
		where inst.id = in_inst_id
		and inst.id = instscheme.inst_id
		and ((substr(posaiid,1,1) >= '0')
			and (substr(posaiid, 1, 1) <= '9'))

	) loop
		for w in ( select mrchschdef.floorlim, mrchschdef.msc,
				mrchschdef.msc_intl, mrchschdef.msc_dr,
				mrchschdef.msc_cr, mrchschdef.payoffset_dr, mrchschdef.payoffset_cr
			from mrchschdef, inst
			where inst.id = in_inst_id
			and inst.id = mrchschdef.inst_id
			and mrchschdef.scheme = v.scheme
		) loop

			insert into mrchscheme
			(
				merchant_id,
				scheme,
				floorlim,
				msc,
				msc_intl,
				msc_dr,
				msc_cr,
				payoffset_dr,
				payoffset_cr,
				crdacptbus,
				schmrchno
			)
			select id,
			       v.scheme,
                                w.floorlim,
                                w.msc,
                                w.msc_intl,
                                w.msc_dr,
                                w.msc_cr,
                                w.payoffset_dr,
                                w.payoffset_cr,
                                new_mrch_acpt_bus_IN,
                                new_merchant_IN
			from merchant
			where merchant.inst_id = in_inst_id
			and mrchno = new_merchant_IN;
		end loop;
	end loop;
end;
/

prompt
prompt Creating procedure WRITE_MRCHSCHEME
prompt ===================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_mrchscheme(
				inst_id_IN IN number,
				new_scheme_IN IN char)
is
	inst_id	number(10,0) 	:= inst_id_IN;
	new_scheme	varchar2(12) 	:= new_scheme_IN;
	mrch_num 	integer;
	new_floor_lim	mrchscheme.floorlim%TYPE;
	new_msc 	mrchscheme.msc%TYPE;
	new_msc_intl	mrchscheme.msc_intl%TYPE;
	new_acpt_bus	mrchscheme.crdacptbus%TYPE;
	new_msc_dr	mrchscheme.msc_dr%TYPE;
	new_msc_cr	mrchscheme.msc_cr%TYPE;
	new_payoffset_dr	mrchscheme.payoffset_dr%TYPE;
	new_payoffset_cr	mrchscheme.payoffset_cr%TYPE;
begin
	if inst_id is null then
            inst_id := 0;
    end if;

	-- JP NMR014760 avoid insert NULL error:
        -- only insert if merchant scheme (mrchschdef) is defined
	begin
	select mrchschdef.floorlim, mrchschdef.msc,
		mrchschdef.msc_intl, mrchschdef.msc_dr,
		mrchschdef.msc_cr, mrchschdef.payoffset_dr,
		mrchschdef.payoffset_cr
		into	new_floor_lim,
			new_msc,
			new_msc_intl,
			new_msc_dr,
			new_msc_cr,
			new_payoffset_dr,
			new_payoffset_cr
		from mrchschdef
		where mrchschdef.inst_id = inst_id
		and mrchschdef.scheme = new_scheme;
	exception when NO_DATA_FOUND then
	return;
	end;

	for v in (
	select distinct id, acptbus
	from merchant
	where merchant.inst_id = inst_id
	-- JP NMR014760 avoid dups:
        -- don't select existing mrchscheme recs
	and id not in (select mrchscheme.merchant_id
			from mrchscheme, merchant
                        where merchant.inst_id = inst_id
			and mrchscheme.merchant_id = merchant.id
                        and mrchscheme.scheme = new_scheme)
	)
	loop

		insert into mrchscheme
		(
			merchant_id,
			scheme,
			floorlim,
			msc,
			msc_intl,
			msc_dr,
			msc_cr,
			payoffset_dr,
			payoffset_cr,
			crdacptbus,
			schmrchno
		)
		values
		(
			v.id,
			new_scheme,
			new_floor_lim,
			new_msc,
			new_msc_intl,
			new_msc_dr,
			new_msc_cr,
			new_payoffset_dr,
			new_payoffset_cr,
			v.acptbus,
			' '
		);

	end loop;

end; -- write_mrchscheme
/

prompt
prompt Creating procedure WRITE_RULE_ATOM_HIST
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_atom_hist
	(i_atomid	rule_atom.id%type,
	 i_atom		rule_atom.atom%type,
	 i_atomcode	rule_atom.atomcode%type,
	 i_atomtype	rule_atom.atomtype%type,
	 i_descr	rule_atom.descr%type,
	 i_action	char,
	 i_activity_id	rule_atom.activity_id%type)
IS
	x_timestamp	rule_atom_hist.timechg%type;
BEGIN

        -- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_atom_hist(atom_id,timechg,action,atom,atomcode,
					atomtype,descr,activity_id)
		values
	(i_atomid,x_timestamp,i_action,i_atom,i_atomcode,i_atomtype,i_descr,
						i_activity_id);
END;
/

prompt
prompt Creating procedure WRITE_RULE_CONTEXT_HIST
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_context_hist
	(i_context_id	rule_context.id%type,
	 i_action	char,
	 i_old_ev_pen	rule_context.event_pending%type,
	 i_new_ev_pen	rule_context.event_pending%type,
	 i_activity_id	rule_context.activity_id%type)
IS
	x_timestamp	rule_context_hist.timechg%type;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_context_hist(context_id,timechg,action,
					old_event_pending,new_event_pending,
						activity_id)
		values
	(i_context_id,x_timestamp,i_action,i_old_ev_pen,i_new_ev_pen,
						i_activity_id);
END;
/

prompt
prompt Creating procedure WRITE_RULE_DIMLVLLINK_HIST
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_dimlvllink_hist
	(i_dimlvlid	rule_dimlvllink.id%type,
	 i_evalset_id	rule_evalset.id%type,
	 i_dimvalue_id	rule_dimvalue.id%type,
	 i_action	char,
	 i_activity_id	rule_dimlvllink.activity_id%type)
IS
	x_timestamp	rule_dimlvllink_hist.timechg%type;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_dimlvllink_hist(dimlvllink_id,timechg,action,
			evalset_id,dimvalue_id,activity_id)
		values
	(i_dimlvlid,x_timestamp,i_action,i_evalset_id,i_dimvalue_id,
						i_activity_id);

END;
/

prompt
prompt Creating procedure WRITE_RULE_DIMVALUE_HIST
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_dimvalue_hist
	(i_dimvalueid	rule_dimvalue.id%type,
	 i_dimid	rule_dimvalue.dimension_id%type,
	 i_inst_id	rule_dimvalue.inst_id%type,
	 i_dimvalue	rule_dimvalue.dimvalue%type,
	 i_descr	rule_dimvalue.descr%type,
	 i_action	char,
	 i_activity_id	rule_dimvalue.activity_id%type)
IS
	x_timestamp	rule_dimvalue_hist.timechg%type;
	in_inst_id      rule_dimvalue.inst_id%type := i_inst_id;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
                in_inst_id := 0;
        end if;

	insert into rule_dimvalue_hist(dimvalue_id,timechg,action,dimension_id,
			inst_id,dimvalue,descr,activity_id)
		values
	(i_dimvalueid,x_timestamp,i_action,i_dimid,in_inst_id,i_dimvalue,
			i_descr,i_activity_id);
END;
/

prompt
prompt Creating procedure WRITE_RULE_EVALDIMLINK_HIST
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_evaldimlink_hist
	(i_evaldimlink	rule_evaldimlink.id%type,
	 i_evalset_id	rule_evalset.id%type,
	 i_dimvalue_id	rule_dimvalue.id%type,
	 i_action	char,
	 i_activity_id	rule_dimvalue.activity_id%type)
IS
	x_timestamp	rule_evaldimlink_hist.timechg%type;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_evaldimlink_hist(evaldimlink_id,timechg,action,
			evalset_id,dimvalue_id,activity_id)
		values
	(i_evaldimlink,x_timestamp,i_action,i_evalset_id,i_dimvalue_id,
						i_activity_id);

END;
/

prompt
prompt Creating procedure WRITE_RULE_EVALRULELINK_HIST
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_evalrulelink_hist
	(i_evalrulelink	rule_evalrulelink.id%type,
	 i_evalset_id	rule_evalset.id%type,
	 i_rule_id	rule_rule.id%type,
	 i_action	char,
	 i_activity_id	rule_evalrulelink.activity_id%type)
IS
	x_timestamp	rule_evalrulelink_hist.timechg%type;
BEGIN

	-- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	insert into rule_evalrulelink_hist(evalrulelink_id,timechg,action,
			rule_id,evalset_id,activity_id)
		values
	(i_evalrulelink,x_timestamp,i_action,i_rule_id,i_evalset_id,
						i_activity_id);

END;
/

prompt
prompt Creating procedure WRITE_RULE_EVALSET_HIST
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_evalset_hist
	(i_evalsetid	rule_evalset.id%type,
	 i_inst_id	rule_evalset.inst_id%type,
	 i_evalcode	rule_evalset.evalcode%type,
	 i_priority	rule_evalset.priority%type,
	 i_descr	rule_evalset.descr%type,
	 i_enabled	rule_evalset.enabled%type,
	 i_evaluation	rule_evalset.evaluation%type,
	 i_retdata0	rule_evalset.ret_data0%type,
	 i_retdata1	rule_evalset.ret_data1%type,
	 i_retdata2	rule_evalset.ret_data2%type,
	 i_retdata3	rule_evalset.ret_data3%type,
	 i_retdata4	rule_evalset.ret_data4%type,
	 i_retdata5	rule_evalset.ret_data5%type,
	 i_retdata6	rule_evalset.ret_data6%type,
	 i_retdata7	rule_evalset.ret_data7%type,
	 i_action	char,
	 i_activity_id	rule_evalset.activity_id%type)
IS
	x_timestamp	rule_evalset_hist.timechg%type;
	in_inst_id      rule_evalset.inst_id%type := i_inst_id;
BEGIN

        -- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
                in_inst_id := 0;
        end if;

	insert into rule_evalset_hist(evalset_id,timechg,action,
		inst_id,evalcode,priority,descr,enabled,
		evaluation,ret_data0,ret_data1,ret_data2,ret_data3,
		ret_data4,ret_data5,ret_data6,ret_data7,activity_id)
	values
	(i_evalsetid,x_timestamp,i_action,in_inst_id,i_evalcode,
	 i_priority,i_descr,i_enabled,i_evaluation,i_retdata0,i_retdata1,
	 i_retdata2,i_retdata3,i_retdata4,i_retdata5,i_retdata6,i_retdata7,
						i_activity_id);

END;
/

prompt
prompt Creating procedure WRITE_RULE_RULE_HIST
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_rule_rule_hist
	(i_contextid	rule_rule.context_id%type,
	 i_ruleid	rule_rule.id%type,
	 i_inst_id	rule_rule.inst_id%type,
	 i_rulename	rule_rule.rulename%type,
	 i_ruleexpr	rule_rule.ruleexpr%type,
	 i_descr	rule_rule.descr%type,
	 i_action	char,
	 i_activity_id	rule_rule.activity_id%type)
IS
	x_timestamp	rule_rule_hist.timechg%type;
	in_inst_id      rule_rule.inst_id%type := i_inst_id;
BEGIN

        -- Get the system's timestamp
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
                in_inst_id := 0;
        end if;

	insert into rule_rule_hist(context_id,rule_id,timechg,action,inst_id,
					rulename,ruleexpr,descr,activity_id)
		values
	(i_contextid,i_ruleid,x_timestamp,
		i_action,in_inst_id,i_rulename,i_ruleexpr,i_descr,
							i_activity_id);
END;
/

prompt
prompt Creating procedure WRITE_STATCHGPERM
prompt ====================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_statchgperm(statcontext_IN IN number,
				from_statcode_IN IN char,
				to_statcode_IN IN char) is

	istatcontext	number(5,0):=statcontext_IN;
        ifrom_statcode	char(2):=from_statcode_IN;
	ito_statcode	char(2):=to_statcode_IN;
	count1		number(10,0);
	count2		number(10,0);
constraint_violation exception;
pragma exception_init(constraint_violation, -02291);
begin
	--
	-- Checks for first context: 1 - card status codes
	--
	if (istatcontext = 1) then

		if ( 'xx' <> ifrom_statcode ) then
			-- Check from value
			select count(*) into count1 from CRDSTATUS
					where statcode = ifrom_statcode;
			if (count1 < 1) then
				raise constraint_violation;
			end if;
		end if;

		if ('xx' <> ito_statcode) then
			-- Check to value
			select count(*) into count2 from CRDSTATUS
					where statcode = ito_statcode;
			if (count2 < 1) then
				raise constraint_violation;
			end if;
		end if;
	end if;

end;
/

prompt
prompt Creating procedure WRITE_TBLCHG
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE OPS$YUFU_CHINA_PS_RUN_BAK.write_tblchg
	(
		in_branch_id	IN integer,
		in_tablename	IN char,
		in_keydata	IN char,
		in_typchg	IN char
	)
IS
	branch_id integer  := in_branch_id;
	tablename char(10) := in_tablename;
	keydata char(25)  := in_keydata;
	typchg char(10)   := in_typchg;
BEGIN
	NULL;
-- Dummy (empty) procedure does nothing
-- Real procedure in src tree if required
END;
/

prompt
prompt Creating procedure WRITE_THRESHOLD_HIST
prompt =======================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_threshold_hist
	(i_threshold_id	threshold_hist.threshold_id%type,
	 i_action	threshold_hist.action%type,
         i_set_id	threshold_hist.set_id%type,
         i_max_value	threshold_hist.max_value%type,
         i_max_count	threshold_hist.max_count%type,
         i_time_period	threshold_hist.time_period%type,
         i_priority	threshold_hist.priority%type,
         i_descr	threshold_hist.descr%type,
	 i_activity_id	threshold_hist.activity_id%type)
is
	x_timestamp	threshold_hist.timechg%type;
begin
	-- get the system time
	select systimestamp into x_timestamp from dual;

	insert into threshold_hist(threshold_id, timechg, action, set_id,
			max_value, max_count, time_period, priority, descr,
						activity_id)
		values
			(i_threshold_id, x_timestamp, i_action, i_set_id,
			i_max_value, i_max_count, i_time_period, i_priority,
						i_descr, i_activity_id);
end;
/

prompt
prompt Creating procedure WRITE_THRESHOLD_OVRD_HIST
prompt ============================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_threshold_ovrd_hist
	(i_tovrd_id	threshold_ovrd_hist.threshold_ovrd_id%type,
	 i_action	threshold_ovrd_hist.action%type,
         i_threshold_id	threshold_ovrd_hist.threshold_id%type,
         i_scopekey	threshold_ovrd_hist.scopekey%type,
         i_scopedet_id	threshold_ovrd_hist.scopedet_id%type,
         i_global_ovrd_all threshold_ovrd_hist.global_ovrd_all%type,
         i_max_value	threshold_ovrd_hist.max_value%type,
         i_max_count	threshold_ovrd_hist.max_count%type,
	 i_time_period	threshold_ovrd_hist.time_period%type,
         i_priority	threshold_ovrd_hist.priority%type,
         i_effdate	threshold_ovrd_hist.effdate%type,
         i_purgedate	threshold_ovrd_hist.purgedate%type,
	 i_activity_id	threshold_ovrd_hist.activity_id%type)
is
	x_timestamp	threshold_ovrd_hist.timechg%type;
begin
	-- get the system time
	select systimestamp into x_timestamp from dual;

	insert into threshold_ovrd_hist(threshold_ovrd_id, timechg, action,
			threshold_id, scopekey, scopedet_id, global_ovrd_all,
				max_value, max_count, time_period, priority,
					effdate, purgedate, activity_id)
		values
			(i_tovrd_id, x_timestamp, i_action, i_threshold_id,
			i_scopekey, i_scopedet_id, i_global_ovrd_all,
			i_max_value, i_max_count, i_time_period, i_priority,
					i_effdate, i_purgedate, i_activity_id);
end;
/

prompt
prompt Creating procedure WRITE_THRESHOLD_SET_HIST
prompt ===========================================
prompt
create or replace procedure OPS$YUFU_CHINA_PS_RUN_BAK.write_threshold_set_hist
	(i_set_id	threshold_set_hist.set_id%type,
	 i_action	threshold_set_hist.action%type,
         i_set_code	threshold_set_hist.set_code%type,
         i_inst_id	threshold_set.inst_id%type,
         i_evalset_id	threshold_set_hist.evalset_id%type,
         i_aggr_def_id	threshold_set_hist.aggr_def_id%type,
         i_currcode	threshold_set_hist.currcode%type,
         i_descr	threshold_set_hist.descr%type,
	 i_activity_id	threshold_set_hist.activity_id%type)
is
	x_timestamp	threshold_set_hist.timechg%type;
	in_inst_id	threshold_set.inst_id%type := i_inst_id;
begin

	-- get the system time
	select systimestamp into x_timestamp from dual;

	if in_inst_id is null then
		in_inst_id := 0;
	end if;

	insert into threshold_set_hist(set_id, timechg, action, set_code,
					inst_id, evalset_id, aggr_def_id,
						currcode, descr, activity_id)
		values
			(i_set_id, x_timestamp, i_action, i_set_code,
			in_inst_id, i_evalset_id, i_aggr_def_id, i_currcode,
						i_descr, i_activity_id);
end;
/

prompt
prompt Creating package body CCS_EOD_PKG
prompt =================================
prompt
CREATE OR REPLACE PACKAGE BODY OPS$YUFU_CHINA_PS_RUN_BAK.ccs_eod_pkg
AS
  processing_date DATE;

  FUNCTION get_processing_date RETURN DATE IS
    BEGIN
      IF (processing_date IS NULL) THEN
        RETURN getsysdate();
      END IF;

      RETURN processing_date;
  END get_processing_date;

  PROCEDURE set_processing_date(processing_date_var DATE) IS
    BEGIN
      processing_date := processing_date_var;
    END set_processing_date;
END ccs_eod_pkg;
/

prompt
prompt Creating trigger ACCDET_CHANGE
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."ACCDET_CHANGE" BEFORE UPDATE ON accdet
REFERENCING OLD old_accdet NEW new_accdet
FOR EACH ROW
BEGIN
	:new_accdet.verno_ctx := :old_accdet.verno_ctx + 1;
	-- log statcode change in ACCITEMS, NMR014147 WLi 26/9/2005
	if (:old_accdet.statcode != :new_accdet.statcode) then
		log_acc_statchg
		(
		 	:new_accdet.inst_id,
			:new_accdet.branch_id,
			:new_accdet.currcode,
			:new_accdet.accno,
			:new_accdet.statcode,
			:new_accdet.blkamt,
			:new_accdet.avlbal,
			-- mvitolin CTXMAINT-2654 12/09/2012
			:new_accdet.unclrcredit
		);
	end if;
END;
/

prompt
prompt Creating trigger ACCDET_INSERT
prompt ==============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."ACCDET_INSERT" before insert on accdet
referencing new as new_accdet
for each row
begin
        if (:new_accdet.id is null or :new_accdet.id = 0) then
                select accdet_sequence.nextval into :new_accdet.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger CASHINBATCH_INSERT
prompt ===================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CASHINBATCH_INSERT" before insert on cashinbatch
referencing new as new_cashinbatch
for each row
begin
        if (:new_cashinbatch.id is null or :new_cashinbatch.id = 0) then
                select cashinbatch_sequence.nextval into :new_cashinbatch.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger CDSTHST_CHANGE
prompt ===============================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CDSTHST_CHANGE" BEFORE UPDATE ON cdsthst
REFERENCING OLD old_cdsthst NEW new_cdsthst
FOR EACH ROW
BEGIN
	:new_cdsthst.verno_ctx := :old_cdsthst.verno_ctx + 1;
END;
/

prompt
prompt Creating trigger CDSTHST_INSERT
prompt ===============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CDSTHST_INSERT" before insert on cdsthst referencing
    new as new_cdsthst
    for each row
    
begin
    	-- block/un-block VisaPhone telecodes when card status changes
        write_crdtelcode(:new_cdsthst.crddet_id,
        		 :new_cdsthst.new_statcode );
	-- change account status, NMR014147 WLi 28/9/2005
	crd_chg_accstat
	(
		:new_cdsthst.crddet_id,
		:new_cdsthst.old_statcode,
		:new_cdsthst.new_statcode
	);

	if ( :new_cdsthst.old_statcode <> :new_cdsthst.new_statcode ) then
		-- log to chargedata if the procedure is implemented
		write_chargedata
		(
		    :new_cdsthst.crddet_id,
		    2302, -- CHRG_CRD_STATCHG
		    :new_cdsthst.old_statcode||','||:new_cdsthst.new_statcode,
		    ' ', 0, ' ', 0
		);
	end if;
    end;
/

prompt
prompt Creating trigger CHGCRD_INSERT
prompt ==============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CHGCRD_INSERT" before insert on chgcrd
referencing new as new_chgcrd
for each row
begin
        if (:new_chgcrd.id is null or :new_chgcrd.id = 0) then
                select chgcrd_sequence.nextval into :new_chgcrd.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger CRDACCUPL_TR
prompt =============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDACCUPL_TR" before insert on crdacc referencing
    new as new_rec
    for each row
    
begin
    	insert into crdaccupl (crddet_id, accdet_id, branch_id,
            isocode, typecode, ctxtype, sent, attempts)
		select	:new_rec.crddet_id, :new_rec.accdet_id,
			crddet.branch_id,
			:new_rec.isocode, :new_rec.typecode, 'I', 0, 0
		from crddet
		where	crddet.id   = :new_rec.crddet_id;
	addupd_crddetmisc (:new_rec.crddet_id );
    end;
/

prompt
prompt Creating trigger CRDACC_CHANGE
prompt ==============================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDACC_CHANGE" BEFORE UPDATE ON crdacc
REFERENCING OLD old_crdacc NEW new_crdacc
FOR EACH ROW
BEGIN
	:new_crdacc.verno_ctx := :old_crdacc.verno_ctx + 1;
END;
/

prompt
prompt Creating trigger CRDDET_AFTER_INSERT
prompt ====================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDDET_AFTER_INSERT" after insert on crddet referencing
new as new_crddet
for each row
begin
	addupd_crddetmisc( :new_crddet.id );
end;
/

prompt
prompt Creating trigger CRDDET_CHANGE
prompt ==============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDDET_CHANGE" before update
	on crddet referencing
	old as old_crddet new as new_crddet
for each row
begin
        :new_crddet.verno_ctx := :old_crddet.verno_ctx + 1;
        if (:old_crddet.branch_id != :new_crddet.branch_id) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
			:old_crddet.pan_display ,
			:old_crddet.iss_host_crdref ,
			'BRANCH_ID' ,
			:old_crddet.branch_id ,
                	:new_crddet.branch_id);
        end if;
        if (:old_crddet.custdet_id != :new_crddet.custdet_id) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CUSTDET_ID' ,
			:old_crddet.custdet_id ,
                	:new_crddet.custdet_id);
        end if;
        if (:old_crddet.crdproduct_id != :new_crddet.crdproduct_id) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CRDPRODUCT_ID' ,
			:old_crddet.crdproduct_id ,
                	:new_crddet.crdproduct_id);
	    upd_crddet_x_date_cycfee_moved(:old_crddet.id);
        end if;
        if (:old_crddet.classid != :new_crddet.classid) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CLASSID' ,
			:old_crddet.classid ,
			:new_crddet.classid);
        end if;
        if (:old_crddet.pan != :new_crddet.pan) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'PAN' ,
			:old_crddet.pan ,
			:new_crddet.pan);
        end if;
        if (:old_crddet.seqno != :new_crddet.seqno) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'SEQNO' ,
			:old_crddet.seqno ,
			:new_crddet.seqno);
        end if;
        if (:old_crddet.accdet_id != :new_crddet.accdet_id) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'ACCDET_ID' ,
			:old_crddet.accdet_id ,
			:new_crddet.accdet_id);
        end if;
        if (:old_crddet.expdate != :new_crddet.expdate) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'EXPDATE' ,
			:old_crddet.expdate ,
			:new_crddet.expdate);
	    write_tblchg(:new_crddet.branch_id,'CRDDET', :new_crddet.pan || '~' || :new_crddet.seqno,
		'U');
        end if;
        if (:old_crddet.effdate != :new_crddet.effdate) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'EFFDATE' ,
			:old_crddet.effdate ,
			:new_crddet.effdate);
        end if;
        if (:old_crddet.cyclen != :new_crddet.cyclen) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CYCLEN' ,
			:old_crddet.cyclen ,
			:new_crddet.cyclen);
        end if;
        if (:old_crddet.cycbegin != :new_crddet.cycbegin) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CYCBEGIN' ,
			:old_crddet.cycbegin ,
                	:new_crddet.cycbegin);
        end if;
        if (:old_crddet.amtauth != :new_crddet.amtauth) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'AMTAUTH' ,
			:old_crddet.amtauth ,
			:new_crddet.amtauth);
        end if;
        if (:old_crddet.amtrem != :new_crddet.amtrem) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'AMTREM' ,
			:old_crddet.amtrem ,
			:new_crddet.amtrem);
        end if;
        if (:old_crddet.blkamt != :new_crddet.blkamt) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'BLKAMT' ,
			:old_crddet.blkamt ,
			:new_crddet.blkamt);
	end if;
	if (:old_crddet.statcode != :new_crddet.statcode) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'STATCODE' ,
			:old_crddet.statcode ,
                	:new_crddet.statcode);
	    write_tblchg(:new_crddet.branch_id,'CRDDET', :new_crddet.pan || '~' || :new_crddet.seqno,
		'U');
            update_pregenpin(:old_crddet.statcode, :new_crddet.statcode,
                        :new_crddet.pan, :new_crddet.seqno);
        end if;
        if (:old_crddet.batch != :new_crddet.batch) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'BATCH' ,
			:old_crddet.batch ,
			:new_crddet.batch);
	end if;
        if (:old_crddet.crdsmade != :new_crddet.crdsmade) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CRDSMADE' ,
			:old_crddet.crdsmade ,
                	:new_crddet.crdsmade);
        end if;
        if (:old_crddet.pinsmade != :new_crddet.pinsmade) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'PINSMADE' ,
			:old_crddet.pinsmade ,
                	:new_crddet.pinsmade);
        end if;
        if (:old_crddet.cvv != :new_crddet.cvv) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CVV' ,
			:old_crddet.cvv ,
			:new_crddet.cvv);
        end if;
        if (:old_crddet.pvki != :new_crddet.pvki) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'PVKI' ,
			:old_crddet.pvki ,
			:new_crddet.pvki);
        end if;
        if (:old_crddet.pvv != :new_crddet.pvv) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'PVV' ,
			:old_crddet.pvv ,
			:new_crddet.pvv);
        end if;
        if (:old_crddet.lang != :new_crddet.lang) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'LANG' ,
			:old_crddet.lang ,
			:new_crddet.lang);
        end if;
        if (:old_crddet.title != :new_crddet.title) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'TITLE' ,
			:old_crddet.title ,
			:new_crddet.title);
        end if;
        if (:old_crddet.firstname != :new_crddet.firstname) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'FIRSTNAME' ,
			:old_crddet.firstname ,
                	:new_crddet.firstname);
        end if;
        if (:old_crddet.lastname != :new_crddet.lastname) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'LASTNAME' ,
			:old_crddet.lastname ,
                	:new_crddet.lastname);
        end if;
        if (:old_crddet.discret != :new_crddet.discret) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'DISCRET' ,
			:old_crddet.discret ,
			:new_crddet.discret);
        end if;
        if (:old_crddet.usrdata != :new_crddet.usrdata) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'USRDATA' ,
			:old_crddet.usrdata ,
			:new_crddet.usrdata);
        end if;
        if (:old_crddet.svccode != :new_crddet.svccode) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'SVCCODE' ,
			:old_crddet.svccode ,
			:new_crddet.svccode);
        end if;
        if (:old_crddet.aci != :new_crddet.aci) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'ACI' ,
			:old_crddet.aci ,
			:new_crddet.aci);
        end if;
        if (:old_crddet.offauth != :new_crddet.offauth) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OFFAUTH' ,
			:old_crddet.offauth ,
			:new_crddet.offauth);
        end if;
        if (:old_crddet.cust_id_num != :new_crddet.cust_id_num) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CUST_ID_NUM' ,
			:old_crddet.cust_id_num ,
                	:new_crddet.cust_id_num);
        end if;
        if (:old_crddet.kinship != :new_crddet.kinship) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'KINSHIP' ,
			:old_crddet.kinship ,
			:new_crddet.kinship);
        end if;
        if (:old_crddet.date_statchg != :new_crddet.date_statchg) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'DATE_STATCHG' ,
			:old_crddet.date_statchg ,
                	:new_crddet.date_statchg);
        end if;
        if (:old_crddet.old_cvv != :new_crddet.old_cvv) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLD_CVV' ,
			:old_crddet.old_cvv ,
			:new_crddet.old_cvv);
        end if;
        if (:old_crddet.old_expdate != :new_crddet.old_expdate) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLD_EXPDATE' ,
			:old_crddet.old_expdate ,
                	:new_crddet.old_expdate);
        end if;
        if (:old_crddet.renew != :new_crddet.renew) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'RENEW' ,
			:old_crddet.renew ,
			:new_crddet.renew);
	end if;
        if (:old_crddet.corp != :new_crddet.corp) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CORP' ,
			:old_crddet.corp ,
			:new_crddet.corp);
        end if;
        if (:old_crddet.date_birth != :new_crddet.date_birth) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'DATE_BIRTH' ,
			:old_crddet.date_birth ,
                	:new_crddet.date_birth);
        end if;
        if (:old_crddet.offlim != :new_crddet.offlim) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OFFLIM' ,
			:old_crddet.offlim ,
			:new_crddet.offlim);
        end if;
        if (:old_crddet.cvc != :new_crddet.cvc) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'CVC' ,
			:old_crddet.cvc ,
			:new_crddet.cvc);
        end if;
        if (:old_crddet.oldcvc != :new_crddet.oldcvc) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLDCVC' ,
			:old_crddet.oldcvc ,
			:new_crddet.oldcvc);
        end if;
	-- CSC string, NMR011573 WLi 19/7/2004
        if (:old_crddet.cscs != :new_crddet.cscs) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
			:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
	    		'CSCS' ,
			:old_crddet.cscs ,
			:new_crddet.cscs);
        end if;
        if (:old_crddet.oldcscs != :new_crddet.oldcscs) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
			:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
	    		'OLDCSCS' ,
			:old_crddet.oldcscs ,
			:new_crddet.oldcscs);
        end if;
        if (:old_crddet.embossname != :new_crddet.embossname) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'EMBOSSNAME' ,
			:old_crddet.embossname ,
                	:new_crddet.embossname);
        end if;
        if (:old_crddet.additionalno != :new_crddet.additionalno) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'ADDITIONALNO' ,
			:old_crddet.additionalno ,
                	:new_crddet.additionalno);
        end if;
        if (:old_crddet.date_created != :new_crddet.date_created) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'DATE_CREATED' ,
			:old_crddet.date_created ,
                	:new_crddet.date_created);
        end if;
        if (:old_crddet.applno != :new_crddet.applno) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'APPLNO' ,
			:old_crddet.applno ,
			:new_crddet.applno);
        end if;
        if (:old_crddet.atc != :new_crddet.atc) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'ATC' ,
			:old_crddet.atc ,
			:new_crddet.atc);
        end if;
        if (:old_crddet.old_atc != :new_crddet.old_atc) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLD_ATC' ,
			:old_crddet.old_atc ,
			:new_crddet.old_atc);
        end if;
        if (:old_crddet.fallbackcnt != :new_crddet.fallbackcnt) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'FALLBACKCNT' ,
			:old_crddet.fallbackcnt ,
			:new_crddet.fallbackcnt);
        end if;
        if (:old_crddet.old_fallbackcnt != :new_crddet.old_fallbackcnt) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLD_FALLBACKCNT' ,
			:old_crddet.old_fallbackcnt ,
			:new_crddet.old_fallbackcnt);
        end if;
        if (:old_crddet.addrind != :new_crddet.addrind) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'ADDRIND' ,
			:old_crddet.addrind ,
			:new_crddet.addrind);
        end if;
        if (:old_crddet.scriptstat != :new_crddet.scriptstat) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'SCRIPTSTAT' ,
			:old_crddet.scriptstat ,
			:new_crddet.scriptstat);
	end if;
        if (:old_crddet.oldscrstat != :new_crddet.oldscrstat) then
            write_acslog_auditpan('CRDDET' ,
			:old_crddet.pan ,
                	:old_crddet.seqno ,
                        :old_crddet.pan_display ,
                        :old_crddet.iss_host_crdref ,
			'OLDSCRSTAT' ,
			:old_crddet.oldscrstat ,
			:new_crddet.oldscrstat);
	end if;
        if (:old_crddet.pvv != :new_crddet.pvv) then
            write_crddet('UPDATE' ,:new_crddet.pan
                ,:new_crddet.seqno ,:new_crddet.pvv ,:new_crddet.pvki
                ,:new_crddet.crdproduct_id ,:new_crddet.expdate, :old_crddet.pvv);
        end if;
    end;
/

prompt
prompt Creating trigger CRDDET_DELETE
prompt ==============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDDET_DELETE" before delete on crddet referencing old as old_d_crddet
for each row
begin
	write_acslog_auditpan('CRDDET' ,
			:old_d_crddet.pan ,
			:old_d_crddet.seqno ,
			:old_d_crddet.pan_display ,
			:old_d_crddet.iss_host_crdref ,
			'DELETED' ,
			' ' ,' ' );
end;
/

prompt
prompt Creating trigger CRDDET_INSERT
prompt ==============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDDET_INSERT" before insert on crddet referencing
    new as new_crddet
    for each row
    
begin
	if (:new_crddet.id is null or :new_crddet.id = 0) then
                select crddet_sequence.nextval into :new_crddet.id from dual;
       end if;

	if ( :new_crddet.cat_isscomm_id = 0 ) then
		:new_crddet.cat_isscomm_id := 1;
	end if;
	if ( :new_crddet.cat_issrisk_id = 0 ) then
		:new_crddet.cat_issrisk_id := 1;
	end if;

	if ( :new_crddet.iss_host_crdref = ' ' ) then
		:new_crddet.iss_host_crdref := :new_crddet.pan || :new_crddet.seqno;
	end if;

        write_crddet('INSERT', :new_crddet.pan,
           :new_crddet.seqno, :new_crddet.pvv, :new_crddet.pvki,
	    :new_crddet.crdproduct_id, :new_crddet.expdate, ' ' );

	write_tblchg(:new_crddet.branch_id,'CRDDET' ,:new_crddet.pan ||
	    '~' || :new_crddet.seqno ,'I' );
    end;
/

prompt
prompt Creating trigger CRDINFO_INSERT
prompt ===============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDINFO_INSERT" before insert on crdinfo
referencing new as new_crdinfo
for each row
begin
        if (:new_crdinfo.id is null or :new_crdinfo.id = 0) then
                select crdinfo_sequence.nextval into :new_crdinfo.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger CRDMODLOG_CRDACC_DELETE
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDACC_DELETE" BEFORE DELETE ON crdacc
	REFERENCING OLD old_crdacc
FOR EACH ROW
BEGIN
	write_crdmodlog( :old_crdacc.crddet_id);
END;
/

prompt
prompt Creating trigger CRDMODLOG_CRDACC_INSERT
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDACC_INSERT" AFTER INSERT ON crdacc
	REFERENCING NEW new_crdacc
FOR EACH ROW
BEGIN
	write_crdmodlog( :new_crdacc.crddet_id);
END;
/

prompt
prompt Creating trigger CRDMODLOG_CRDACC_UPDATE
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDACC_UPDATE" AFTER UPDATE ON crdacc
	REFERENCING NEW new_crdacc
FOR EACH ROW
BEGIN
	write_crdmodlog( :new_crdacc.crddet_id);
END;
/

prompt
prompt Creating trigger CRDMODLOG_CRDDET_DELETE
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDDET_DELETE" BEFORE DELETE ON crddet
	REFERENCING OLD old_crddet
FOR EACH ROW
BEGIN
	write_crdmodlog( :old_crddet.id);
END;
/

prompt
prompt Creating trigger CRDMODLOG_CRDDET_INSERT
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDDET_INSERT" AFTER INSERT ON crddet
	REFERENCING NEW new_crddet
FOR EACH ROW
BEGIN
	write_crdmodlog( :new_crddet.id);
END;
/

prompt
prompt Creating trigger CRDMODLOG_CRDDET_UPDATE
prompt ========================================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CRDMODLOG_CRDDET_UPDATE" AFTER UPDATE ON crddet
	REFERENCING OLD old_crddet NEW new_crddet
FOR EACH ROW
     
when ((old_crddet.statcode <> new_crddet.statcode)
OR	(old_crddet.expdate <> new_crddet.expdate)
OR	(old_crddet.accdet_id <> new_crddet.accdet_id))
BEGIN
	write_crdmodlog( :new_crddet.id);
END;
/

prompt
prompt Creating trigger CUSTDET_AF_INSERT_PRT_PERSON
prompt =============================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CUSTDET_AF_INSERT_PRT_PERSON" after insert on custdet
referencing new as new_custdet
for each row
declare
	prt_party_id	number(10,0) := 0;
begin
	select prt_party_sequence.nextval into prt_party_id from dual;
	insert into prt_party (id) values (prt_party_id);
	insert into prt_person (prt_party_id, custdet_id)
	values (prt_party_id, :new_custdet.id);
end;
/

prompt
prompt Creating trigger CUSTDET_CHANGE
prompt ===============================
prompt
CREATE OR REPLACE TRIGGER "OPS$YUFU_CHINA_PS_RUN_BAK"."CUSTDET_CHANGE" BEFORE UPDATE
ON
	custdet
REFERENCING OLD old_custdet NEW new_custdet
FOR EACH ROW
BEGIN
	:new_custdet.verno_ctx := :old_custdet.verno_ctx + 1;
	if (:old_custdet.inst_id != :new_custdet.inst_id ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'INSTCODE' ,:old_custdet.inst_id ,
			:new_custdet.inst_id );
	end if;
	if (:old_custdet.custcode != :new_custdet.custcode ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'CUSTCODE' ,:old_custdet.custcode ,
			:new_custdet.custcode );
	end if;
	if (:old_custdet.title != :new_custdet.title ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'TITLE' ,:old_custdet.title ,
			:new_custdet.title );
	end if;
	if (:old_custdet.firstname != :new_custdet.firstname ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'FIRSTNAME' ,:old_custdet.firstname ,
			:new_custdet.firstname );
	end if;
	if (:old_custdet.lastname != :new_custdet.lastname ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'LASTNAME' ,:old_custdet.lastname ,
			:new_custdet.lastname );
	end if;
	if (:old_custdet.typeid != :new_custdet.typeid ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'TYPEID' ,:old_custdet.typeid ,
			:new_custdet.typeid );
	end if;
	if (:old_custdet.addrl1 != :new_custdet.addrl1 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'ADDRL1' ,:old_custdet.addrl1 ,
			:new_custdet.addrl1 );
	end if;
	if (:old_custdet.addrl2 != :new_custdet.addrl2 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'ADDRL2' ,:old_custdet.addrl2 ,
			:new_custdet.addrl2 );
	end if;
	if (:old_custdet.addrl3 != :new_custdet.addrl3 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'ADDRL3' ,:old_custdet.addrl3 ,
			:new_custdet.addrl3 );
	end if;
	if (:old_custdet.home_city != :new_custdet.home_city ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'HOME_CITY' ,:old_custdet.home_city ,
			:new_custdet.home_city );
	end if;
	if (:old_custdet.home_tel != :new_custdet.home_tel ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'HOME_TEL' ,:old_custdet.home_tel ,
			:new_custdet.home_tel );
	end if;
	if (:old_custdet.work_addr1 != :new_custdet.work_addr1 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_ADDR1' ,:old_custdet.work_addr1 ,
			:new_custdet.work_addr1 );
	end if;
	if (:old_custdet.work_addr2 != :new_custdet.work_addr2 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_ADDR2' ,:old_custdet.work_addr2 ,
			:new_custdet.work_addr2 );
	end if;
	if (:old_custdet.work_addr3 != :new_custdet.work_addr3 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_ADDR3' ,:old_custdet.work_addr3 ,
			:new_custdet.work_addr3 );
	end if;
	if (:old_custdet.work_city != :new_custdet.work_city ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_CITY' ,:old_custdet.work_city ,
			:new_custdet.work_city );
	end if;
	if (:old_custdet.work_tel != :new_custdet.work_tel ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_TEL' ,:old_custdet.work_tel ,
			:new_custdet.work_tel );
	end if;
	if (:old_custdet.stmt_code != :new_custdet.stmt_code ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'STMT_CODE' ,:old_custdet.stmt_code ,
			:new_custdet.stmt_code );
	end if;
	if (:old_custdet.work_postcode != :new_custdet.work_postcode ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'WORK_POSTCODE' ,:old_custdet.work_postcode ,
			:new_custdet.work_postcode );
	end if;
	if (:old_custdet.postcode != :new_custdet.postcode ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'POSTCODE' ,:old_custdet.postcode ,
			:new_custdet.postcode );
	end if;
	if (:old_custdet.po_box != :new_custdet.po_box ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'PO_BOX' ,:old_custdet.po_box ,
			:new_custdet.po_box );
	end if;
	if (:old_custdet.collection_zone != :new_custdet.collection_zone ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'COLLECTION_ZONE' ,:old_custdet.collection_zone ,
			:new_custdet.collection_zone );
	end if;
	if (:old_custdet.prof_code != :new_custdet.prof_code ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'PROF_CODE' ,:old_custdet.prof_code ,
			:new_custdet.prof_code );
	end if;
	if (:old_custdet.married != :new_custdet.married ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'MARRIED' ,:old_custdet.married ,
			:new_custdet.married );
	end if;
	if (:old_custdet.sex != :new_custdet.sex ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'SEX' ,:old_custdet.sex ,
			:new_custdet.sex );
	end if;
	if (:old_custdet.id_number != :new_custdet.id_number ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'ID_NUMBER' ,:old_custdet.id_number ,
			:new_custdet.id_number );
	end if;
	if (:old_custdet.date_accepted != :new_custdet.date_accepted ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'DATE_ACCEPTED' ,:old_custdet.date_accepted ,
			:new_custdet.date_accepted );
	end if;
	if (:old_custdet.refuse_cheque != :new_custdet.refuse_cheque ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'REFUSE_CHEQUE' ,:old_custdet.refuse_cheque ,
			:new_custdet.refuse_cheque );
	end if;
	if (:old_custdet.num_bounced1 != :new_custdet.num_bounced1 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'NUM_BOUNCED1' ,:old_custdet.num_bounced1 ,
			:new_custdet.num_bounced1 );
	end if;
	if (:old_custdet.num_bounced2 != :new_custdet.num_bounced2 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'NUM_BOUNCED2' ,:old_custdet.num_bounced2 ,
			:new_custdet.num_bounced2 );
	end if;
	if (:old_custdet.usrdata1 != :new_custdet.usrdata1 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'USRDATA1' ,:old_custdet.usrdata1 ,
			:new_custdet.usrdata1 );
	end if;
	if (:old_custdet.usrdata2 != :new_custdet.usrdata2 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'USRDATA2' ,:old_custdet.usrdata2 ,
			:new_custdet.usrdata2 );
	end if;
	if (:old_custdet.usrdata3 != :new_custdet.usrdata3 ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'USRDATA3' ,:old_custdet.usrdata3 ,
			:new_custdet.usrdata3 );
	end if;
	if (:old_custdet.mailshots != :new_custdet.mailshots ) then
		write_acslog('CUSTDET' ,:old_custdet.inst_id
			|| :old_custdet.custcode ,'MAILSHOTS' ,:old_custdet.mailshots ,
			:new_custdet.mailshots );
	end if;
END;
/

prompt
prompt Creating trigger CUSTDET_INSERT
prompt ===============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CUSTDET_INSERT" before insert on custdet
referencing new as new_custdet
for each row
begin
        if (:new_custdet.id is null or :new_custdet.id = 0) then
                select custdet_sequence.nextval into :new_custdet.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger CUST_DELETE
prompt ============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."CUST_DELETE" before delete on custdet referencing old as old_d_cust
for each row
begin
	write_acslog('CUSTDET' ,:old_d_cust.inst_id || :old_d_cust.custcode ,'DELETED' ,' ' ,' ' );
end;
/

prompt
prompt Creating trigger MERCHANT_TELNO1_CHANGE
prompt =======================================
prompt
CREATE OR REPLACE TRIGGER OPS$YUFU_CHINA_PS_RUN_BAK.MERCHANT_TELNO1_CHANGE
AFTER UPDATE OF TELNO1 ON MERCHANT_X
FOR EACH ROW
BEGIN
update USERINFO set USERTEL = :new.TELNO1
     where LOGINNAME = :old.MRCHNO;
END;
/

prompt
prompt Creating trigger OPENCRDBATCH_INSERT
prompt ====================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."OPENCRDBATCH_INSERT" before insert on opencrdbatch
referencing new as new_opencrdbatch
for each row
begin
        if (:new_opencrdbatch.id is null or :new_opencrdbatch.id = 0) then
                select opencrdbatch_sequence.nextval into :new_opencrdbatch.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger REDEEMBAL_INSERT
prompt =================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."REDEEMBAL_INSERT" before insert on redeembal
referencing new as new_redeembal
for each row
begin
        if (:new_redeembal.id is null or :new_redeembal.id = 0) then
                select redeembal_sequence.nextval into :new_redeembal.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger SALESTLOG_INSERT
prompt =================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."SALESTLOG_INSERT" before insert on salestlog
referencing new as new_salestlog
for each row
begin
        if (:new_salestlog.id is null or :new_salestlog.id = 0) then
                select salestlog_sequence.nextval into :new_salestlog.id from dual;
        end if;
end;
/

prompt
prompt Creating trigger TLOG_CHANGE
prompt ============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."TLOG_CHANGE" before update
	on tlog referencing old as old_tlog new as new_tlog
	for each row
	
begin
		:new_tlog.verno_ctx := :old_tlog.verno_ctx + 1;
		if	(:old_tlog.txnstatus != :new_tlog.txnstatus  -- changed
			 and :new_tlog.txnstatus = 11               -- captured
			 and :old_tlog.txnstatus = 15               -- pending
			 and ((:old_tlog.msgcls = '2'	 	   -- financial
			       and :old_tlog.msgfn = '2'		   -- advice
			       and :old_tlog.fncode in (200,201,202))-- not chgbk
			     or (:old_tlog.msgcls  = '4'	           -- reversal
			         and :old_tlog.msgclsorg = '2'      -- of a fin
			         and :old_tlog.fncode in (400,401)))-- not chgbk
			) then
			write_advices(:new_tlog.id,
						0,
						:new_tlog.ctxdate,
						:old_tlog.ife);
		end if;

		-- IFMTLOG Oracle my Mark D.
		-- (I do not know if it works or not)
		--
		-- Write to IFMTLOG
		if	(:old_tlog.txnstatus != :new_tlog.txnstatus  -- changed
			 and (:new_tlog.txnstatus = 5	-- declined
			 or   :new_tlog.txnstatus = 7 	-- complete accepted
			 or   :new_tlog.txnstatus = 6	-- rejected + rev
			 or   :new_tlog.txnstatus = 8 	-- approved + rev
			 or   :new_tlog.txnstatus = 12 	-- suspect - Added!
			) and (
			  ( 	(:new_tlog.msgcls = '2'
				and :new_tlog.msgfn = '0')
				or
				:new_tlog.msgcls = '1'
			  )
			  or
			  ( 	(:new_tlog.msgcls = '4'
				and :new_tlog.msgclsorg = '2'
				and :new_tlog.msgfnorg  = '0')
				or
				(:new_tlog.msgcls = '4'
				and :new_tlog.msgclsorg = '1')
			  )
			  )
				-- now we need ATM txns, NMR014855 SKovrov 19/04/2006
				--and :new_tlog.crdacptbus != 6011
			)
		then
			write_ifmtlog(
				:new_tlog.id		,
				:new_tlog.stan		,
				:new_tlog.stanorg		,
				:new_tlog.rrn		,
				:new_tlog.termtype	,
				:new_tlog.route_iid	,
				:new_tlog.crdseqno,
				:new_tlog.pan		,
				:new_tlog.dateexp		,
				:new_tlog.svccode	,
				:new_tlog.crdacptloc	,
				:new_tlog.crdacptbus	,
				:new_tlog.crdacptid	,
				:new_tlog.termcode	,
				:new_tlog.poschic		,
				:new_tlog.poschac		,
				:new_tlog.poscrc		,
				:new_tlog.posoe		,
				:new_tlog.poschp		,
				:new_tlog.poscp		,
				:new_tlog.poscdim		,
				:new_tlog.poscham		,
				:new_tlog.poscha		,
				:new_tlog.poschad		,
				:new_tlog.possd		,
				:new_tlog.pospcc		,
				:new_tlog.poscc_89	,
				:new_tlog.aiid		,
				:new_tlog.acqcountry	,
				:new_tlog.datexmit	,
				:new_tlog.timexmit	,
				:new_tlog.datelocal	,
				:new_tlog.timelocal	,
				:new_tlog.datexmitorg	,
				:new_tlog.timexmitorg	,
				:new_tlog.msgcls		,
				:new_tlog.msgclsorg	,
				:new_tlog.msgfn		,
				:new_tlog.msgfnorg	,
				:new_tlog.txnsrc		,
				:new_tlog.txnsrcorg	,
				:new_tlog.fncode		,
				:new_tlog.txncode		,
				:new_tlog.txnstatus	,
				:new_tlog.rejreason	,
				:new_tlog.curtxn		,
				:new_tlog.amttxn		,
				:new_tlog.amttxnorg	,
				:new_tlog.amttxncb	,
				:new_tlog.actioncode	,
				:new_tlog.rspcode		,
				:new_tlog.reasoncode	,
				:new_tlog.aprvlcode	,
				:new_tlog.fiid		,
				:new_tlog.fiidcountry	,
				:new_tlog.riid		,
				:new_tlog.riidcountry	,
				:new_tlog.inbtchid	,
				:new_tlog.ctxdate		,
				:new_tlog.afe		,
				:new_tlog.ife		,
				:new_tlog.outbtchtype	,
				:new_tlog.curbill		,
				:new_tlog.amtbill		,
				:new_tlog.amtbillcb	,
				:new_tlog.adddata		,
				:new_tlog.scheme);
		end if;
		-- End of IFMTLOG new Oracle code (MD)
		-- update AMEX ATM recon, NMR012007 WLi 01/10/2004
                if (:new_tlog.crdacptbus = 6011	-- ATM
			and :new_tlog.outbtchtype = 160 	-- AMEX online
			and (:new_tlog.fncode = 200	-- financial
				or :new_tlog.msgcls = '4'
				and :new_tlog.msgclsorg = '2'))
		then
			update_amxatmrec
			(
				:new_tlog.id,
				:new_tlog.amtset,
				:new_tlog.curset,
				:new_tlog.aprvlcode,
				:new_tlog.actioncode,
				:new_tlog.rspcode,
				:new_tlog.txnstatus
			);
		end if;
end;
/

prompt
prompt Creating trigger TLOG_INSERT
prompt ============================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."TLOG_INSERT" before insert on tlog
referencing new as new_tlog
for each row
begin
	if (:new_tlog.id is null or :new_tlog.id = 0) then
		select tlog_sequence.nextval into :new_tlog.id from dual;
	end if;
	-- NMR015186 WLi 07/02/2006
	:new_tlog.inbtchseq := :new_tlog.id;
	if	((:new_tlog.msgcls = '2'	 	   -- financial
		       and :new_tlog.msgfn = '2' 	   -- advice
		       and :new_tlog.fncode in (200,201,202)-- not chgbck
		       and :new_tlog.txnstatus in (7,11))   -- cmplt,capt
		      or (:new_tlog.msgcls  = '4'	   -- reversal
			  and :new_tlog.msgclsorg = '2' 	   -- of a fin
			  and :new_tlog.fncode in (400,401) -- not chgbck
			  -- and :new_tlog.txnstatus = 11)) then	   -- capt
        and :new_tlog.txnstatus in (7,11))) then	   -- capt
		write_advices(:new_tlog.id,
				0,
				:new_tlog.ctxdate,
				:new_tlog.ife);
	end if;
	-- insert AMEX ATM recon, NMR012007 WLi 01/10/2004
	if (:new_tlog.crdacptbus = 6011	-- ATM
			and :new_tlog.outbtchtype = 160 	-- AMEX online
			and (:new_tlog.fncode = 200	-- financial
				or :new_tlog.msgcls = '4'
				and :new_tlog.msgclsorg = '2'))
	then
		write_amxatmrec(:new_tlog.id, :new_tlog.aiid, :new_tlog.stan,
				:new_tlog.rrn, :new_tlog.datelocal,
				:new_tlog.timelocal, :new_tlog.fncode,
				:new_tlog.ctxdate, :new_tlog.pan,
				:new_tlog.termcode, :new_tlog.amttxn,
				:new_tlog.curtxn, :new_tlog.pan_display);
	end if;
end;
/

prompt
prompt Creating trigger VCNREGISTINFO_INSERT
prompt =====================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."VCNREGISTINFO_INSERT" before insert on vcnregistinfo
referencing new as new_vcnregistinfo
for each row
begin
	if (:new_vcnregistinfo.id is null or :new_vcnregistinfo.id = 0) then
		select vcnregistinfo_sequence.nextval into :new_vcnregistinfo.id from dual;
	end if;
end;
/

prompt
prompt Creating trigger VCNRELATED_INSERT
prompt ==================================
prompt
create or replace trigger "OPS$YUFU_CHINA_PS_RUN_BAK"."VCNRELATED_INSERT" before insert on vcnrelated
referencing new as new_vcnrelated
for each row
begin
	if (:new_vcnrelated.id is null or :new_vcnrelated.id = 0) then
		select vcnrelated_sequence.nextval into :new_vcnrelated.id from dual;
	end if;
end;
/


spool off
