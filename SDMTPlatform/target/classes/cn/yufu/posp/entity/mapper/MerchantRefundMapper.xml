<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.yufu.posp.dao.MerchantRefundMapper">
  <resultMap id="BaseResultMap" type="cn.yufu.posp.entity.MerchantRefund">
    <result column="MERCHANT_ID" jdbcType="CHAR" property="merchantId" />
    <result column="REFUND_LIMIT" jdbcType="FLOAT" property="refundLimit" />
    <result column="REFUND_CHECK" jdbcType="CHAR" property="refundCheck" />
    <result column="UPDATE_OPER" jdbcType="CHAR" property="updateOper" />
    <result column="UPDATE_DATE" jdbcType="CHAR" property="updateDate" />
    <result column="UPDATE_TIME" jdbcType="CHAR" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    MERCHANT_ID, REFUND_LIMIT, REFUND_CHECK, UPDATE_OPER, UPDATE_DATE, UPDATE_TIME
  </sql>
  <select id="selectByExample" parameterType="cn.yufu.posp.entity.MerchantRefundExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from MERCHANT_REFUND
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByMerchantId" parameterType="cn.yufu.posp.entity.MerchantRefund" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from MERCHANT_REFUND
   	where MERCHANT_ID = #{merchantId}
  </select>
  <delete id="deleteByExample" parameterType="cn.yufu.posp.entity.MerchantRefundExample">
    delete from MERCHANT_REFUND
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.yufu.posp.entity.MerchantRefund">
    insert into MERCHANT_REFUND (MERCHANT_ID, REFUND_LIMIT, REFUND_CHECK, 
      UPDATE_OPER, UPDATE_DATE, UPDATE_TIME
      )
    values (#{merchantId,jdbcType=CHAR}, #{refundLimit,jdbcType=FLOAT}, #{refundCheck,jdbcType=CHAR}, 
      #{updateOper,jdbcType=CHAR}, #{updateDate,jdbcType=CHAR}, #{updateTime,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.yufu.posp.entity.MerchantRefund">
    insert into MERCHANT_REFUND
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="merchantId != null">
        MERCHANT_ID,
      </if>
      <if test="refundLimit != null">
        REFUND_LIMIT,
      </if>
      <if test="refundCheck != null">
        REFUND_CHECK,
      </if>
      <if test="updateOper != null">
        UPDATE_OPER,
      </if>
      <if test="updateDate != null">
        UPDATE_DATE,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="merchantId != null">
        #{merchantId,jdbcType=CHAR},
      </if>
      <if test="refundLimit != null">
        #{refundLimit,jdbcType=FLOAT},
      </if>
      <if test="refundCheck != null">
        #{refundCheck,jdbcType=CHAR},
      </if>
      <if test="updateOper != null">
        #{updateOper,jdbcType=CHAR},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=CHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.yufu.posp.entity.MerchantRefundExample" resultType="java.lang.Integer">
    select count(*) from MERCHANT_REFUND
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateSelective" parameterType="cn.yufu.posp.entity.MerchantRefund">
    update MERCHANT_REFUND
    <set>
      <if test="merchantId != null">
        MERCHANT_ID = #{merchantId,jdbcType=CHAR},
      </if>
      <if test="refundLimit != null">
        REFUND_LIMIT = #{refundLimit,jdbcType=FLOAT},
      </if>
      <if test="refundCheck != null">
        REFUND_CHECK = #{refundCheck,jdbcType=CHAR},
      </if>
      <if test="updateOper != null">
        UPDATE_OPER = #{updateOper,jdbcType=CHAR},
      </if>
      <if test="updateDate != null">
        UPDATE_DATE = #{updateDate,jdbcType=CHAR},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=CHAR},
      </if>
    </set>
    where
    	MERCHANT_ID = #{merchantId,jdbcType=CHAR}
  </update>
  <update id="updateByExampleSelective" parameterType="map">
    update MERCHANT_REFUND
    <set>
      <if test="record.merchantId != null">
        MERCHANT_ID = #{record.merchantId,jdbcType=CHAR},
      </if>
      <if test="record.refundLimit != null">
        REFUND_LIMIT = #{record.refundLimit,jdbcType=FLOAT},
      </if>
      <if test="record.refundCheck != null">
        REFUND_CHECK = #{record.refundCheck,jdbcType=CHAR},
      </if>
      <if test="record.updateOper != null">
        UPDATE_OPER = #{record.updateOper,jdbcType=CHAR},
      </if>
      <if test="record.updateDate != null">
        UPDATE_DATE = #{record.updateDate,jdbcType=CHAR},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update MERCHANT_REFUND
    set MERCHANT_ID = #{record.merchantId,jdbcType=CHAR},
      REFUND_LIMIT = #{record.refundLimit,jdbcType=FLOAT},
      REFUND_CHECK = #{record.refundCheck,jdbcType=CHAR},
      UPDATE_OPER = #{record.updateOper,jdbcType=CHAR},
      UPDATE_DATE = #{record.updateDate,jdbcType=CHAR},
      UPDATE_TIME = #{record.updateTime,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>